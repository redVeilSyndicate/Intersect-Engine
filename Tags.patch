From e0c769fc8170684fe91e7e8f5d869b72bd9161c7 Mon Sep 17 00:00:00 2001
From: Joyce <azurebeats@hotmail.nl>
Date: Sat, 23 May 2020 14:31:08 +0200
Subject: [PATCH] Updated tag patch for dev build 0.6.2.420

NOTE: This only UPDATES this to work with the build! Does not include any of the functionality introduced in the dev branch yet.
---
 1.patch                                       | 7401 +++++++++++++++++
 2.patch                                       | 1591 ++++
 Intersect (Core)/Enums/TagType.cs             |   11 +
 .../Events/Commands/EventCommands.cs          |   63 +
 .../GameObjects/Events/Condition.cs           |   44 +
 Intersect (Core)/GameObjects/Events/Enums.cs  |    3 +
 Intersect (Core)/GameObjects/ItemBase.cs      |   18 +
 Intersect (Core)/GameObjects/Maps/MapBase.cs  |   17 +
 Intersect (Core)/GameObjects/NpcBase.cs       |   17 +
 Intersect (Core)/Intersect (Core).csproj      |    1 +
 .../Forms/Editors/Events/CommandPrinter.cs    |   67 +
 .../EventCommand_ChangeItemsByTag.Designer.cs |  211 +
 .../EventCommand_ChangeItemsByTag.cs          |   68 +
 .../EventCommand_ChangeItemsByTag.resx        |  135 +
 ...EventCommand_ConditionalBranch.Designer.cs |  225 +-
 .../EventCommand_ConditionalBranch.cs         |  168 +-
 .../EventCommand_ConditionalBranch.resx       |   28 +-
 .../Forms/Editors/Events/frmEvent.Designer.cs | 2389 +++---
 .../Forms/Editors/Events/frmEvent.cs          |    9 +
 .../Forms/Editors/frmItem.Designer.cs         |   34 +-
 Intersect.Editor/Forms/Editors/frmItem.cs     |   17 +-
 Intersect.Editor/Forms/Editors/frmItem.resx   |   74 +-
 .../Forms/Editors/frmNpc.Designer.cs          |   31 +-
 Intersect.Editor/Forms/Editors/frmNpc.cs      |   19 +-
 Intersect.Editor/Forms/Editors/frmNpc.resx    |   74 +-
 Intersect.Editor/Forms/frmMain.resx           |   18 +-
 Intersect.Editor/Intersect.Editor.csproj      |    9 +
 Intersect.Editor/Localization/Strings.cs      |   86 +-
 Intersect.Editor/Maps/MapProperties.cs        |   16 +
 .../Entities/Events/CommandProcessing.cs      |  109 +
 .../Entities/Events/Conditions.cs             |  104 +
 Intersect.Server/Intersect.Server.csproj      |    8 +
 ...20200423004850_AddingTagSystem.Designer.cs | 1040 +++
 .../Game/20200423004850_AddingTagSystem.cs    |   31 +
 .../Game/20200424140012_MapTags.Designer.cs   | 1045 +++
 .../Migrations/Game/20200424140012_MapTags.cs |   22 +
 .../Game/GameContextModelSnapshot.cs          |    9 +
 37 files changed, 13918 insertions(+), 1294 deletions(-)
 create mode 100644 1.patch
 create mode 100644 2.patch
 create mode 100644 Intersect (Core)/Enums/TagType.cs
 create mode 100644 Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs
 create mode 100644 Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs
 create mode 100644 Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx
 create mode 100644 Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs
 create mode 100644 Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs
 create mode 100644 Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs
 create mode 100644 Intersect.Server/Migrations/Game/20200424140012_MapTags.cs

diff --git a/1.patch b/1.patch
new file mode 100644
index 00000000..cf9c0ecb
--- /dev/null
+++ b/1.patch
@@ -0,0 +1,7401 @@
+From 685a3fbe30eeb0dc0d4cb85de1c69ca9bfacfb46 Mon Sep 17 00:00:00 2001
+From: Joyce <azurebeats@hotmail.nl>
+Date: Sat, 25 Apr 2020 13:51:13 +0200
+Subject: [PATCH] patch
+
+---
+ Intersect (Core)/Enums/TagType.cs             |   11 +
+ .../Events/Commands/EventCommands.cs          |   61 +
+ .../GameObjects/Events/Condition.cs           |   43 +
+ Intersect (Core)/GameObjects/Events/Enums.cs  |    3 +
+ Intersect (Core)/GameObjects/ItemBase.cs      |   18 +
+ Intersect (Core)/GameObjects/Maps/MapBase.cs  |   17 +
+ Intersect (Core)/GameObjects/NpcBase.cs       |   17 +
+ Intersect (Core)/Intersect (Core).csproj      |    1 +
+ .../Forms/Editors/Events/CommandPrinter.cs    |   67 +
+ ...EventCommand_ConditionalBranch.Designer.cs |  310 ++-
+ .../EventCommand_ConditionalBranch.cs         |  170 +-
+ .../EventCommand_ConditionalBranch.resx       |   28 +-
+ .../EventCommand_TakeItemsByTag.Designer.cs   |  171 ++
+ .../EventCommand_TakeItemsByTag.cs            |   67 +
+ .../EventCommand_TakeItemsByTag.resx          |  128 +
+ .../Forms/Editors/Events/frmEvent.Designer.cs | 2389 +++++++++--------
+ .../Forms/Editors/Events/frmEvent.cs          |    9 +
+ .../Forms/Editors/frmItem.Designer.cs         |   34 +-
+ Intersect.Editor/Forms/Editors/frmItem.cs     |   17 +-
+ Intersect.Editor/Forms/Editors/frmItem.resx   |   74 +-
+ .../Forms/Editors/frmNpc.Designer.cs          |  202 +-
+ Intersect.Editor/Forms/Editors/frmNpc.cs      |   19 +-
+ Intersect.Editor/Forms/Editors/frmNpc.resx    |   74 +-
+ Intersect.Editor/Forms/frmMain.resx           |   18 +-
+ Intersect.Editor/Intersect.Editor.csproj      |    9 +
+ Intersect.Editor/Localization/Strings.cs      |   78 +
+ Intersect.Editor/Maps/MapProperties.cs        |   16 +
+ .../Entities/Events/CommandProcessing.cs      |   93 +
+ .../Entities/Events/Conditions.cs             |  104 +
+ Intersect.Server/Intersect.Server.csproj      |    8 +
+ ...20200423004850_AddingTagSystem.Designer.cs | 1040 +++++++
+ .../Game/20200423004850_AddingTagSystem.cs    |   31 +
+ .../Game/20200424140012_MapTags.Designer.cs   | 1045 +++++++
+ .../Migrations/Game/20200424140012_MapTags.cs |   22 +
+ .../Game/GameContextModelSnapshot.cs          |    9 +
+ 35 files changed, 4944 insertions(+), 1459 deletions(-)
+ create mode 100644 Intersect (Core)/Enums/TagType.cs
+ create mode 100644 Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs
+ create mode 100644 Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs
+ create mode 100644 Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx
+ create mode 100644 Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs
+ create mode 100644 Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs
+ create mode 100644 Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs
+ create mode 100644 Intersect.Server/Migrations/Game/20200424140012_MapTags.cs
+
+diff --git a/Intersect (Core)/Enums/TagType.cs b/Intersect (Core)/Enums/TagType.cs
+new file mode 100644
+index 00000000..31fb5f3a
+--- /dev/null
++++ b/Intersect (Core)/Enums/TagType.cs	
+@@ -0,0 +1,11 @@
++namespace Intersect.Enums
++{
++    public enum TagType
++    {
++        Item = 0,
++
++        MapNPC,
++
++        Map
++    }
++}
+diff --git a/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs b/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs
+index e1d5e334..9b3214e3 100644
+--- a/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs	
++++ b/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs	
+@@ -450,6 +450,67 @@ public ChangeItemsCommand(Dictionary<Guid, List<EventCommand>> commandLists)
+             return base.GetCopyData(commandLists, copyLists);
+         }
+ 
++
++        public override void FixBranchIds(Dictionary<Guid, Guid> idDict)
++        {
++            for (var i = 0; i < BranchIds.Length; i++)
++            {
++                if (idDict.ContainsKey(BranchIds[i]))
++                {
++                    BranchIds[i] = idDict[BranchIds[i]];
++                }
++            }
++        }
++
++    }
++
++    public class TakeItemsByTag : EventCommand
++    {
++
++        //For Json Deserialization
++        public TakeItemsByTag()
++        {
++        }
++
++        public TakeItemsByTag(Dictionary<Guid, List<EventCommand>> commandLists)
++        {
++            for (var i = 0; i < BranchIds.Length; i++)
++            {
++                BranchIds[i] = Guid.NewGuid();
++                commandLists.Add(BranchIds[i], new List<EventCommand>());
++            }
++        }
++
++        public override EventCommandType Type { get; } = EventCommandType.TakeItemsByTag;
++
++        public string Tag { get; set; }
++
++        public int Quantity { get; set; }
++
++        public Guid[] BranchIds { get; set; } =
++            new Guid[2]; //Branch[0] is the event commands to execute when given/taken successfully, Branch[1] is for when they're not.
++
++        public override string GetCopyData(
++            Dictionary<Guid, List<EventCommand>> commandLists,
++            Dictionary<Guid, List<EventCommand>> copyLists
++        )
++        {
++            foreach (var branch in BranchIds)
++            {
++                if (branch != Guid.Empty && commandLists.ContainsKey(branch))
++                {
++                    copyLists.Add(branch, commandLists[branch]);
++                    foreach (var cmd in commandLists[branch])
++                    {
++                        cmd.GetCopyData(commandLists, copyLists);
++                    }
++                }
++            }
++
++            return base.GetCopyData(commandLists, copyLists);
++        }
++
++
+         public override void FixBranchIds(Dictionary<Guid, Guid> idDict)
+         {
+             for (var i = 0; i < BranchIds.Length; i++)
+diff --git a/Intersect (Core)/GameObjects/Events/Condition.cs b/Intersect (Core)/GameObjects/Events/Condition.cs
+index 4fd5a40d..4af91a84 100644
+--- a/Intersect (Core)/GameObjects/Events/Condition.cs	
++++ b/Intersect (Core)/GameObjects/Events/Condition.cs	
+@@ -38,6 +38,14 @@ public enum ConditionTypes
+ 
+         IsItemEquipped,
+ 
++        EquippedItemTagIs,
++
++        HasItemWTag,
++
++        MapHasNpcWTag,
++
++        MapHasTag,
++
+     }
+ 
+     public class Condition
+@@ -175,6 +183,15 @@ public class NoNpcsOnMapCondition : Condition
+ 
+     }
+ 
++    public class MapHasNPCWTag : Condition
++    {
++
++        public override ConditionTypes Type { get; } = ConditionTypes.MapHasNpcWTag;
++
++        public string Tag { get; set; }
++
++    }
++
+     public class GenderIsCondition : Condition
+     {
+ 
+@@ -193,6 +210,15 @@ public class MapIsCondition : Condition
+ 
+     }
+ 
++    public class MapHasTag : Condition
++    {
++
++        public override ConditionTypes Type { get; } = ConditionTypes.MapHasTag;
++
++        public string Tag { get; set; }
++
++    }
++
+     public class IsItemEquippedCondition : Condition
+     {
+ 
+@@ -202,6 +228,23 @@ public class IsItemEquippedCondition : Condition
+ 
+     }
+ 
++    public class EquippedItemTagIsCondition : Condition
++    {
++        public override ConditionTypes Type { get; } = ConditionTypes.EquippedItemTagIs;
++
++        public string Tag { get; set; }
++    }
++
++    public class HasItemWTagCondition : Condition
++    {
++        public override ConditionTypes Type { get; } = ConditionTypes.HasItemWTag;
++
++        public string Tag { get; set; }
++
++        public int Quantity { get; set; }
++
++    }
++
+     public class VariableCompaison
+     {
+ 
+diff --git a/Intersect (Core)/GameObjects/Events/Enums.cs b/Intersect (Core)/GameObjects/Events/Enums.cs
+index a5d59d83..3f49f859 100644
+--- a/Intersect (Core)/GameObjects/Events/Enums.cs	
++++ b/Intersect (Core)/GameObjects/Events/Enums.cs	
+@@ -215,6 +215,9 @@ public enum EventCommandType
+         //Player Label
+         PlayerLabel,
+ 
++        // Take Items By tag
++        TakeItemsByTag,
++
+     }
+ 
+ }
+diff --git a/Intersect (Core)/GameObjects/ItemBase.cs b/Intersect (Core)/GameObjects/ItemBase.cs
+index 741a8f1e..a692e463 100644
+--- a/Intersect (Core)/GameObjects/ItemBase.cs	
++++ b/Intersect (Core)/GameObjects/ItemBase.cs	
+@@ -1,4 +1,6 @@
+ ﻿using System;
++using System.Linq;
++using System.Collections.Generic;
+ using System.ComponentModel.DataAnnotations.Schema;
+ 
+ using Intersect.Enums;
+@@ -120,6 +122,17 @@ public EventBase Event
+ 
+         public string Description { get; set; } = "";
+ 
++        [NotMapped]
++        public List<String> Tags = new List<String>();
++
++        [Column("Tag")]
++        [JsonIgnore]
++        public string JsonTags
++        {
++            get => JsonConvert.SerializeObject(Tags);
++            set => Tags = JsonConvert.DeserializeObject<List<String>>(value ?? "[]");
++        }
++
+         public string FemalePaperdoll { get; set; } = "";
+ 
+         public ItemTypes ItemType { get; set; }
+@@ -224,6 +237,11 @@ public string JsonUsageRequirements
+                                    ItemType != ItemTypes.Equipment &&
+                                    ItemType != ItemTypes.Bag;
+ 
++        [JsonIgnore, NotMapped]
++        public static string[] AllTags => Lookup
++            .SelectMany(pair => ((ItemBase)pair.Value)?.Tags)
++            .Distinct().OrderBy(t => t).ToArray();
++
+         /// <inheritdoc />
+         public string Folder { get; set; } = "";
+ 
+diff --git a/Intersect (Core)/GameObjects/Maps/MapBase.cs b/Intersect (Core)/GameObjects/Maps/MapBase.cs
+index b0af922f..107fb624 100644
+--- a/Intersect (Core)/GameObjects/Maps/MapBase.cs	
++++ b/Intersect (Core)/GameObjects/Maps/MapBase.cs	
+@@ -1,4 +1,5 @@
+ ﻿using System;
++using System.Linq;
+ using System.Collections.Generic;
+ using System.ComponentModel.DataAnnotations.Schema;
+ 
+@@ -39,6 +40,22 @@ public class MapBase : DatabaseObject<MapBase>
+         //SyncLock
+         [JsonIgnore] [NotMapped] protected object mMapLock = new object();
+ 
++        [NotMapped]
++        public List<String> Tags = new List<String>();
++
++        [Column("Tag")]
++        [JsonIgnore]
++        public string JsonTags
++        {
++            get => JsonConvert.SerializeObject(Tags);
++            set => Tags = JsonConvert.DeserializeObject<List<String>>(value ?? "[]");
++        }
++
++        [JsonIgnore, NotMapped]
++        public static string[] AllTags => Lookup
++            .SelectMany(pair => ((MapBase)pair.Value)?.Tags)
++            .Distinct().OrderBy(t => t).ToArray();
++
+         [JsonConstructor]
+         public MapBase(Guid id) : base(id)
+         {
+diff --git a/Intersect (Core)/GameObjects/NpcBase.cs b/Intersect (Core)/GameObjects/NpcBase.cs
+index 97c62c85..3e063a96 100644
+--- a/Intersect (Core)/GameObjects/NpcBase.cs	
++++ b/Intersect (Core)/GameObjects/NpcBase.cs	
+@@ -1,4 +1,5 @@
+ ﻿using System;
++using System.Linq;
+ using System.Collections.Generic;
+ using System.ComponentModel.DataAnnotations.Schema;
+ 
+@@ -190,6 +191,17 @@ public string CraftsJson
+ 
+         public string Sprite { get; set; } = "";
+ 
++        [NotMapped]
++        public List<String> Tags = new List<String>();
++
++        [Column("Tag")]
++        [JsonIgnore]
++        public string JsonTags
++        {
++            get => JsonConvert.SerializeObject(Tags);
++            set => Tags = JsonConvert.DeserializeObject<List<String>>(value ?? "[]");
++        }
++
+         [Column("Stats")]
+         [JsonIgnore]
+         public string JsonStat
+@@ -207,6 +219,11 @@ public string RegenJson
+             set => VitalRegen = DatabaseUtils.LoadIntArray(value, (int) Vitals.VitalCount);
+         }
+ 
++        [JsonIgnore, NotMapped]
++        public static string[] AllTags => Lookup
++            .SelectMany(pair => ((NpcBase)pair.Value)?.Tags)
++            .Distinct().OrderBy(t => t).ToArray();
++
+         /// <inheritdoc />
+         public string Folder { get; set; } = "";
+ 
+diff --git a/Intersect (Core)/Intersect (Core).csproj b/Intersect (Core)/Intersect (Core).csproj
+index d1dbe3f5..38174941 100644
+--- a/Intersect (Core)/Intersect (Core).csproj	
++++ b/Intersect (Core)/Intersect (Core).csproj	
+@@ -221,6 +221,7 @@
+     <Compile Include="Console.cs" />
+     <Compile Include="Config\SmtpSettings.cs" />
+     <Compile Include="CustomColors.cs" />
++    <Compile Include="Enums\TagType.cs" />
+     <Compile Include="ErrorHandling\ExceptionInfo.cs" />
+     <Compile Include="Extensions\ArrayExtensions.cs" />
+     <Compile Include="Extensions\DateTimeExtensions.cs" />
+diff --git a/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs b/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
+index 61371483..f433e77f 100644
+--- a/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
++++ b/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
+@@ -349,7 +349,68 @@ MapInstance map
+                             mCommandProperties.Add(clp);
+ 
+                             break;
++                        case EventCommandType.TakeItemsByTag:
++                            var titm = (TakeItemsByTag)commandList[i];
++                            lstEventCommands.Items.Add(
++                                indent +
++                                Strings.EventCommandList.linestart +
++                                GetCommandText((dynamic)commandList[i], map)
++                            );
++
++                            clp = new CommandListProperties {
++                                Editable = true,
++                                MyIndex = i,
++                                MyList = commandList,
++                                Cmd = commandList[i],
++                                Type = commandList[i].Type
++                            };
++
++                            mCommandProperties.Add(clp);
++
++                            //When the item(s) were successfully taken:
++                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemstakenbytag);
++                            clp = new CommandListProperties {
++                                Editable = false,
++                                MyIndex = i,
++                                MyList = commandList,
++                                Type = commandList[i].Type,
++                                Cmd = commandList[i]
++                            };
++
++                            mCommandProperties.Add(clp);
++                            PrintCommandList(
++                                page, page.CommandLists[titm.BranchIds[0]], indent + "          ", lstEventCommands,
++                                mCommandProperties, map
++                            );
++
++                            //When the items failed to be given/taken:
++                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemsnottakenbytag);
++                            clp = new CommandListProperties {
++                                Editable = false,
++                                MyIndex = i,
++                                MyList = commandList,
++                                Type = commandList[i].Type,
++                                Cmd = commandList[i]
++                            };
++
++                            mCommandProperties.Add(clp);
++                            PrintCommandList(
++                                page, page.CommandLists[titm.BranchIds[1]], indent + "          ", lstEventCommands,
++                                mCommandProperties, map
++                            );
++
++                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.endtakeitemsbytag);
++                            clp = new CommandListProperties {
++                                Editable = false,
++                                MyIndex = i,
++                                MyList = commandList,
++                                Type = commandList[i].Type,
++                                Cmd = commandList[i]
++                            };
+ 
++                            mCommandProperties.Add(clp);
++
++                            break;
+                         case EventCommandType.StartQuest:
+                             var qst = (StartQuestCommand) commandList[i];
+                             lstEventCommands.Items.Add(
+@@ -620,6 +681,12 @@ private static string GetCommandText(ChangeItemsCommand command, MapInstance map
+             );
+         }
+ 
++        private static string GetCommandText(TakeItemsByTag command, MapInstance map)
++        {
++
++            return Strings.EventCommandList.takeitemsbytag.ToString(command.Tag);
++        }
++
+         private static string GetCommandText(EquipItemCommand command, MapInstance map)
+         {
+             return Strings.EventCommandList.equipitem.ToString(ItemBase.GetName(command.ItemId));
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs
+index e236aef2..a75cb34b 100644
+--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs	
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs	
+@@ -32,11 +32,6 @@ private void InitializeComponent()
+         {
+             System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventCommandConditionalBranch));
+             this.grpConditional = new DarkUI.Controls.DarkGroupBox();
+-            this.chkNegated = new DarkUI.Controls.DarkCheckBox();
+-            this.btnSave = new DarkUI.Controls.DarkButton();
+-            this.cmbConditionType = new DarkUI.Controls.DarkComboBox();
+-            this.lblType = new System.Windows.Forms.Label();
+-            this.btnCancel = new DarkUI.Controls.DarkButton();
+             this.grpVariable = new DarkUI.Controls.DarkGroupBox();
+             this.grpSelectVariable = new DarkUI.Controls.DarkGroupBox();
+             this.rdoPlayerVariable = new DarkUI.Controls.DarkRadioButton();
+@@ -66,6 +61,19 @@ private void InitializeComponent()
+             this.cmbComparePlayerVar = new DarkUI.Controls.DarkComboBox();
+             this.rdoVarComparePlayerVar = new DarkUI.Controls.DarkRadioButton();
+             this.rdoVarCompareGlobalVar = new DarkUI.Controls.DarkRadioButton();
++            this.grpHasItemWTag = new DarkUI.Controls.DarkGroupBox();
++            this.nudHasItemWTag = new DarkUI.Controls.DarkNumericUpDown();
++            this.lblHasAtleastTag = new System.Windows.Forms.Label();
++            this.lblHasItemWTag = new System.Windows.Forms.Label();
++            this.cmbHasItemWTag = new DarkUI.Controls.DarkComboBox();
++            this.grpEquippedItemTag = new DarkUI.Controls.DarkGroupBox();
++            this.lblItemEquippedTag = new System.Windows.Forms.Label();
++            this.cmbEquippedItemTag = new DarkUI.Controls.DarkComboBox();
++            this.chkNegated = new DarkUI.Controls.DarkCheckBox();
++            this.btnSave = new DarkUI.Controls.DarkButton();
++            this.cmbConditionType = new DarkUI.Controls.DarkComboBox();
++            this.lblType = new System.Windows.Forms.Label();
++            this.btnCancel = new DarkUI.Controls.DarkButton();
+             this.grpQuestCompleted = new DarkUI.Controls.DarkGroupBox();
+             this.lblQuestCompleted = new System.Windows.Forms.Label();
+             this.cmbCompletedQuest = new DarkUI.Controls.DarkComboBox();
+@@ -127,6 +135,9 @@ private void InitializeComponent()
+             this.grpBooleanVariable.SuspendLayout();
+             this.grpNumericVariable.SuspendLayout();
+             ((System.ComponentModel.ISupportInitialize)(this.nudVariableValue)).BeginInit();
++            this.grpHasItemWTag.SuspendLayout();
++            ((System.ComponentModel.ISupportInitialize)(this.nudHasItemWTag)).BeginInit();
++            this.grpEquippedItemTag.SuspendLayout();
+             this.grpQuestCompleted.SuspendLayout();
+             this.grpQuestInProgress.SuspendLayout();
+             this.grpStartQuest.SuspendLayout();
+@@ -148,12 +159,14 @@ private void InitializeComponent()
+             // 
+             this.grpConditional.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+             this.grpConditional.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpConditional.Controls.Add(this.grpVariable);
++            this.grpConditional.Controls.Add(this.grpHasItemWTag);
++            this.grpConditional.Controls.Add(this.grpEquippedItemTag);
+             this.grpConditional.Controls.Add(this.chkNegated);
+             this.grpConditional.Controls.Add(this.btnSave);
+             this.grpConditional.Controls.Add(this.cmbConditionType);
+             this.grpConditional.Controls.Add(this.lblType);
+             this.grpConditional.Controls.Add(this.btnCancel);
+-            this.grpConditional.Controls.Add(this.grpVariable);
+             this.grpConditional.Controls.Add(this.grpQuestCompleted);
+             this.grpConditional.Controls.Add(this.grpQuestInProgress);
+             this.grpConditional.Controls.Add(this.grpStartQuest);
+@@ -175,81 +188,6 @@ private void InitializeComponent()
+             this.grpConditional.TabStop = false;
+             this.grpConditional.Text = "Conditional";
+             // 
+-            // chkNegated
+-            // 
+-            this.chkNegated.Location = new System.Drawing.Point(199, 279);
+-            this.chkNegated.Name = "chkNegated";
+-            this.chkNegated.Size = new System.Drawing.Size(72, 17);
+-            this.chkNegated.TabIndex = 34;
+-            this.chkNegated.Text = "Negated";
+-            // 
+-            // btnSave
+-            // 
+-            this.btnSave.Location = new System.Drawing.Point(12, 307);
+-            this.btnSave.Name = "btnSave";
+-            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+-            this.btnSave.Size = new System.Drawing.Size(75, 23);
+-            this.btnSave.TabIndex = 19;
+-            this.btnSave.Text = "Ok";
+-            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+-            // 
+-            // cmbConditionType
+-            // 
+-            this.cmbConditionType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-            this.cmbConditionType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-            this.cmbConditionType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-            this.cmbConditionType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-            this.cmbConditionType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbConditionType.ButtonIcon")));
+-            this.cmbConditionType.DrawDropdownHoverOutline = false;
+-            this.cmbConditionType.DrawFocusRectangle = false;
+-            this.cmbConditionType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-            this.cmbConditionType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-            this.cmbConditionType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-            this.cmbConditionType.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.cmbConditionType.FormattingEnabled = true;
+-            this.cmbConditionType.Items.AddRange(new object[] {
+-            "Variable is...",
+-            "Has item...",
+-            "Class is...",
+-            "Knows spell...",
+-            "Level is....",
+-            "Self Switch is....",
+-            "Power level is....",
+-            "Time is between....",
+-            "Can Start Quest....",
+-            "Quest In Progress....",
+-            "Quest Completed....",
+-            "Player death...",
+-            "No NPCs on the map...",
+-            "Gender is...",
+-            "Item Equipped Is..."});
+-            this.cmbConditionType.Location = new System.Drawing.Point(88, 13);
+-            this.cmbConditionType.Name = "cmbConditionType";
+-            this.cmbConditionType.Size = new System.Drawing.Size(183, 21);
+-            this.cmbConditionType.TabIndex = 22;
+-            this.cmbConditionType.Text = "Variable is...";
+-            this.cmbConditionType.TextPadding = new System.Windows.Forms.Padding(2);
+-            this.cmbConditionType.SelectedIndexChanged += new System.EventHandler(this.cmbConditionType_SelectedIndexChanged);
+-            // 
+-            // lblType
+-            // 
+-            this.lblType.AutoSize = true;
+-            this.lblType.Location = new System.Drawing.Point(6, 16);
+-            this.lblType.Name = "lblType";
+-            this.lblType.Size = new System.Drawing.Size(81, 13);
+-            this.lblType.TabIndex = 21;
+-            this.lblType.Text = "Condition Type:";
+-            // 
+-            // btnCancel
+-            // 
+-            this.btnCancel.Location = new System.Drawing.Point(113, 307);
+-            this.btnCancel.Name = "btnCancel";
+-            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+-            this.btnCancel.Size = new System.Drawing.Size(75, 23);
+-            this.btnCancel.TabIndex = 20;
+-            this.btnCancel.Text = "Cancel";
+-            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+-            // 
+             // grpVariable
+             // 
+             this.grpVariable.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+@@ -259,7 +197,7 @@ private void InitializeComponent()
+             this.grpVariable.Controls.Add(this.grpBooleanVariable);
+             this.grpVariable.Controls.Add(this.grpNumericVariable);
+             this.grpVariable.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.grpVariable.Location = new System.Drawing.Point(9, 40);
++            this.grpVariable.Location = new System.Drawing.Point(7, 43);
+             this.grpVariable.Name = "grpVariable";
+             this.grpVariable.Size = new System.Drawing.Size(262, 233);
+             this.grpVariable.TabIndex = 24;
+@@ -690,6 +628,201 @@ private void InitializeComponent()
+             this.rdoVarCompareGlobalVar.Text = "Global Variable Value:";
+             this.rdoVarCompareGlobalVar.CheckedChanged += new System.EventHandler(this.rdoVarCompareGlobalVar_CheckedChanged);
+             // 
++            // grpHasItemWTag
++            //
++            this.grpHasItemWTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.grpHasItemWTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpHasItemWTag.Controls.Add(this.nudHasItemWTag);
++            this.grpHasItemWTag.Controls.Add(this.lblHasAtleastTag);
++            this.grpHasItemWTag.Controls.Add(this.lblHasItemWTag);
++            this.grpHasItemWTag.Controls.Add(this.cmbHasItemWTag);
++            this.grpHasItemWTag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpHasItemWTag.Location = new System.Drawing.Point(6, 43);
++            this.grpHasItemWTag.Name = "grpHasItemWTag";
++            this.grpHasItemWTag.Size = new System.Drawing.Size(262, 96);
++            this.grpHasItemWTag.TabIndex = 56;
++            this.grpHasItemWTag.TabStop = false;
++            this.grpHasItemWTag.Text = "Has Item With Tag:";
++            this.grpHasItemWTag.Visible = false;
++            //
++            // nudHasItemWTag
++            //
++            this.nudHasItemWTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.nudHasItemWTag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.nudHasItemWTag.Location = new System.Drawing.Point(92, 19);
++            this.nudHasItemWTag.Maximum = new decimal(new int[] {
++            100000,
++            0,
++            0,
++            0});
++            this.nudHasItemWTag.Name = "nudHasItemWTag";
++            this.nudHasItemWTag.Size = new System.Drawing.Size(162, 20);
++            this.nudHasItemWTag.TabIndex = 9;
++            this.nudHasItemWTag.Value = new decimal(new int[] {
++            0,
++            0,
++            0,
++            0});
++            //
++            // lblHasAtleastTag
++            //
++            this.lblHasAtleastTag.AutoSize = true;
++            this.lblHasAtleastTag.Location = new System.Drawing.Point(6, 21);
++            this.lblHasAtleastTag.Name = "lblHasAtleastTag";
++            this.lblHasAtleastTag.Size = new System.Drawing.Size(66, 13);
++            this.lblHasAtleastTag.TabIndex = 6;
++            this.lblHasAtleastTag.Text = "Has at least:";
++            //
++            // lblHasItemWTag
++            //
++            this.lblHasItemWTag.AutoSize = true;
++            this.lblHasItemWTag.Location = new System.Drawing.Point(6, 55);
++            this.lblHasItemWTag.Name = "lblHasItemWTag";
++            this.lblHasItemWTag.Size = new System.Drawing.Size(29, 13);
++            this.lblHasItemWTag.TabIndex = 5;
++            this.lblHasItemWTag.Text = "Tag:";
++            //
++            // cmbHasItemWTag
++            //
++            this.cmbHasItemWTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbHasItemWTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbHasItemWTag.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbHasItemWTag.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbHasItemWTag.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbHasItemWTag.ButtonIcon")));
++            this.cmbHasItemWTag.DrawDropdownHoverOutline = false;
++            this.cmbHasItemWTag.DrawFocusRectangle = false;
++            this.cmbHasItemWTag.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbHasItemWTag.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbHasItemWTag.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbHasItemWTag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbHasItemWTag.FormattingEnabled = true;
++            this.cmbHasItemWTag.Location = new System.Drawing.Point(92, 52);
++            this.cmbHasItemWTag.Name = "cmbHasItemWTag";
++            this.cmbHasItemWTag.Size = new System.Drawing.Size(162, 21);
++            this.cmbHasItemWTag.TabIndex = 3;
++            this.cmbHasItemWTag.Text = null;
++            this.cmbHasItemWTag.TextPadding = new System.Windows.Forms.Padding(2);
++            //
++            // grpEquippedItemTag
++            //
++            this.grpEquippedItemTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.grpEquippedItemTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpEquippedItemTag.Controls.Add(this.lblItemEquippedTag);
++            this.grpEquippedItemTag.Controls.Add(this.cmbEquippedItemTag);
++            this.grpEquippedItemTag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpEquippedItemTag.Location = new System.Drawing.Point(6, 41);
++            this.grpEquippedItemTag.Name = "grpEquippedItemTag";
++            this.grpEquippedItemTag.Size = new System.Drawing.Size(262, 71);
++            this.grpEquippedItemTag.TabIndex = 55;
++            this.grpEquippedItemTag.TabStop = false;
++            this.grpEquippedItemTag.Text = "Item Equipped Tag";
++            this.grpEquippedItemTag.Visible = false;
++            //
++            // lblItemEquippedTag
++            //
++            this.lblItemEquippedTag.AutoSize = true;
++            this.lblItemEquippedTag.Location = new System.Drawing.Point(6, 21);
++            this.lblItemEquippedTag.Name = "lblItemEquippedTag";
++            this.lblItemEquippedTag.Size = new System.Drawing.Size(29, 13);
++            this.lblItemEquippedTag.TabIndex = 5;
++            this.lblItemEquippedTag.Text = "Tag:";
++            //
++            // cmbEquippedItemTag
++            //
++            this.cmbEquippedItemTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbEquippedItemTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbEquippedItemTag.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbEquippedItemTag.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbEquippedItemTag.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEquippedItemTag.ButtonIcon")));
++            this.cmbEquippedItemTag.DrawDropdownHoverOutline = false;
++            this.cmbEquippedItemTag.DrawFocusRectangle = false;
++            this.cmbEquippedItemTag.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbEquippedItemTag.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbEquippedItemTag.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbEquippedItemTag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbEquippedItemTag.FormattingEnabled = true;
++            this.cmbEquippedItemTag.Location = new System.Drawing.Point(92, 18);
++            this.cmbEquippedItemTag.Name = "cmbEquippedItemTag";
++            this.cmbEquippedItemTag.Size = new System.Drawing.Size(162, 21);
++            this.cmbEquippedItemTag.TabIndex = 3;
++            this.cmbEquippedItemTag.Text = null;
++            this.cmbEquippedItemTag.TextPadding = new System.Windows.Forms.Padding(2);
++            //
++            // chkNegated
++            //
++            this.chkNegated.Location = new System.Drawing.Point(199, 279);
++            this.chkNegated.Name = "chkNegated";
++            this.chkNegated.Size = new System.Drawing.Size(72, 17);
++            this.chkNegated.TabIndex = 34;
++            this.chkNegated.Text = "Negated";
++            //
++            // btnSave
++            //
++            this.btnSave.Location = new System.Drawing.Point(12, 307);
++            this.btnSave.Name = "btnSave";
++            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
++            this.btnSave.Size = new System.Drawing.Size(75, 23);
++            this.btnSave.TabIndex = 19;
++            this.btnSave.Text = "Ok";
++            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
++            //
++            // cmbConditionType
++            //
++            this.cmbConditionType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbConditionType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbConditionType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbConditionType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbConditionType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbConditionType.ButtonIcon")));
++            this.cmbConditionType.DrawDropdownHoverOutline = false;
++            this.cmbConditionType.DrawFocusRectangle = false;
++            this.cmbConditionType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbConditionType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbConditionType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbConditionType.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbConditionType.FormattingEnabled = true;
++            this.cmbConditionType.Items.AddRange(new object[] {
++            "Variable is...",
++            "Has item...",
++            "Class is...",
++            "Knows spell...",
++            "Level is....",
++            "Self Switch is....",
++            "Power level is....",
++            "Time is between....",
++            "Can Start Quest....",
++            "Quest In Progress....",
++            "Quest Completed....",
++            "Player death...",
++            "No NPCs on the map...",
++            "Gender is...",
++            "Item Equipped Is..."});
++            this.cmbConditionType.Location = new System.Drawing.Point(88, 13);
++            this.cmbConditionType.Name = "cmbConditionType";
++            this.cmbConditionType.Size = new System.Drawing.Size(183, 21);
++            this.cmbConditionType.TabIndex = 22;
++            this.cmbConditionType.Text = "Variable is...";
++            this.cmbConditionType.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbConditionType.SelectedIndexChanged += new System.EventHandler(this.cmbConditionType_SelectedIndexChanged);
++            //
++            // lblType
++            //
++            this.lblType.AutoSize = true;
++            this.lblType.Location = new System.Drawing.Point(6, 16);
++            this.lblType.Name = "lblType";
++            this.lblType.Size = new System.Drawing.Size(81, 13);
++            this.lblType.TabIndex = 21;
++            this.lblType.Text = "Condition Type:";
++            //
++            // btnCancel
++            //
++            this.btnCancel.Location = new System.Drawing.Point(113, 307);
++            this.btnCancel.Name = "btnCancel";
++            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
++            this.btnCancel.Size = new System.Drawing.Size(75, 23);
++            this.btnCancel.TabIndex = 20;
++            this.btnCancel.Text = "Cancel";
++            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
++            //
+             // grpQuestCompleted
+             // 
+             this.grpQuestCompleted.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+@@ -1515,6 +1648,11 @@ private void InitializeComponent()
+             this.grpNumericVariable.ResumeLayout(false);
+             this.grpNumericVariable.PerformLayout();
+             ((System.ComponentModel.ISupportInitialize)(this.nudVariableValue)).EndInit();
++            this.grpHasItemWTag.ResumeLayout(false);
++            this.grpHasItemWTag.PerformLayout();
++            ((System.ComponentModel.ISupportInitialize)(this.nudHasItemWTag)).EndInit();
++            this.grpEquippedItemTag.ResumeLayout(false);
++            this.grpEquippedItemTag.PerformLayout();
+             this.grpQuestCompleted.ResumeLayout(false);
+             this.grpQuestCompleted.PerformLayout();
+             this.grpQuestInProgress.ResumeLayout(false);
+@@ -1637,5 +1775,13 @@ private void InitializeComponent()
+         private DarkTextBox txtStringValue;
+         private System.Windows.Forms.Label lblStringComparatorValue;
+         private System.Windows.Forms.Label lblStringTextVariables;
++        private DarkGroupBox grpEquippedItemTag;
++        private System.Windows.Forms.Label lblItemEquippedTag;
++        private DarkComboBox cmbEquippedItemTag;
++        private DarkGroupBox grpHasItemWTag;
++        private DarkNumericUpDown nudHasItemWTag;
++        private System.Windows.Forms.Label lblHasAtleastTag;
++        private System.Windows.Forms.Label lblHasItemWTag;
++        private DarkComboBox cmbHasItemWTag;
+     }
+ }
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs
+index cfe57ce8..a44e3ff6 100644
+--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs	
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs	
+@@ -132,6 +132,15 @@ private void InitLocalization()
+             grpEquippedItem.Text = Strings.EventConditional.hasitemequipped;
+             lblEquippedItem.Text = Strings.EventConditional.item;
+ 
++            //Item Equipped Has Tag
++            grpEquippedItemTag.Text = Strings.EventConditional.itemequippedhastag;
++            lblItemEquippedTag.Text = Strings.EventConditional.tag;
++
++            //Has Item With Tag
++            grpHasItemWTag.Text = Strings.EventConditional.hasitemwithtag;
++            lblHasAtleastTag.Text = Strings.EventConditional.hasatleast;
++            lblHasItemWTag.Text = Strings.EventConditional.tag;
++
+             //Class is
+             grpClass.Text = Strings.EventConditional.classis;
+             lblClass.Text = Strings.EventConditional.Class;
+@@ -311,6 +320,14 @@ private void ConditionTypeChanged(ConditionTypes type)
+                 case ConditionTypes.NoNpcsOnMap:
+                     Condition = new NoNpcsOnMapCondition();
+ 
++                    break;
++                case ConditionTypes.MapHasNpcWTag:
++                    Condition = new MapHasNPCWTag();
++                    if (cmbEquippedItemTag.Items.Count > 0)
++                    {
++                        cmbEquippedItemTag.SelectedIndex = 0;
++                    }
++
+                     break;
+                 case ConditionTypes.GenderIs:
+                     Condition = new GenderIsCondition();
+@@ -329,6 +346,32 @@ private void ConditionTypeChanged(ConditionTypes type)
+                         cmbEquippedItem.SelectedIndex = 0;
+                     }
+ 
++                    break;
++                case ConditionTypes.EquippedItemTagIs:
++                    Condition = new EquippedItemTagIsCondition();
++                    if (cmbEquippedItemTag.Items.Count > 0)
++                    {
++                        cmbEquippedItemTag.SelectedIndex = 0;
++                    }
++
++                    break;
++                case ConditionTypes.HasItemWTag:
++                    Condition = new HasItemWTagCondition();
++                    if (cmbHasItemWTag.Items.Count > 0)
++                    {
++                        cmbHasItemWTag.SelectedIndex = 0;
++                    }
++                    nudHasItemWTag.Value = 1;
++
++                    break;
++
++                case ConditionTypes.MapHasTag:
++                    Condition = new MapHasTag();
++                    if (cmbEquippedItemTag.Items.Count > 0)
++                    {
++                        cmbEquippedItemTag.SelectedIndex = 0;
++                    }
++
+                     break;
+                 default:
+                     throw new ArgumentOutOfRangeException();
+@@ -351,6 +394,8 @@ private void UpdateFormElements(ConditionTypes type)
+             grpGender.Hide();
+             grpMapIs.Hide();
+             grpEquippedItem.Hide();
++            grpHasItemWTag.Hide();
++            grpEquippedItemTag.Hide();
+             switch (type)
+             {
+                 case ConditionTypes.VariableIs:
+@@ -431,6 +476,11 @@ private void UpdateFormElements(ConditionTypes type)
+ 
+                     break;
+                 case ConditionTypes.NoNpcsOnMap:
++                    break;
++                case ConditionTypes.MapHasNpcWTag:
++                    ShowTagCombo(TagType.MapNPC);
++                    grpEquippedItemTag.Text = Strings.EventConditional.maphasnpcwithtag;
++
+                     break;
+                 case ConditionTypes.GenderIs:
+                     grpGender.Show();
+@@ -445,12 +495,57 @@ private void UpdateFormElements(ConditionTypes type)
+                     cmbEquippedItem.Items.Clear();
+                     cmbEquippedItem.Items.AddRange(ItemBase.Names);
+ 
++                    break;
++                case ConditionTypes.EquippedItemTagIs:
++                    ShowTagCombo(TagType.Item);
++                    grpEquippedItemTag.Text = Strings.EventConditional.itemequippedhastag;
++                    break;
++                case ConditionTypes.HasItemWTag:
++                    grpHasItemWTag.Show();
++                    cmbHasItemWTag.Items.Clear();
++                    cmbHasItemWTag.Items.AddRange(ItemBase.AllTags);
++
++                    break;
++                case ConditionTypes.MapHasTag:
++                    ShowTagCombo(TagType.Map);
++                    grpEquippedItemTag.Text = Strings.EventConditional.maphastag;
++
+                     break;
+                 default:
+                     throw new ArgumentOutOfRangeException();
+             }
+         }
+ 
++        private void ShowTagCombo(TagType type)
++        {
++            grpEquippedItemTag.Show();
++            cmbEquippedItemTag.Items.Clear();
++            string[] tagList;
++
++            switch (type)
++            {
++                case TagType.Item:
++                    tagList = ItemBase.AllTags;
++
++                    break;
++
++                case TagType.MapNPC:
++                    tagList = NpcBase.AllTags;
++
++                    break;
++
++                case TagType.Map:
++                    tagList = GameObjects.Maps.MapBase.AllTags;
++                    break;
++
++                default:
++                    tagList = new string[0];
++                    throw new NotImplementedException();
++            }
++
++            cmbEquippedItemTag.Items.AddRange(tagList);
++        }
++
+         private void btnSave_Click(object sender, EventArgs e)
+         {
+             SaveFormValues((dynamic) Condition);
+@@ -875,6 +970,31 @@ private void SetupFormValues(HasItemCondition condition)
+             nudItemAmount.Value = condition.Quantity;
+         }
+ 
++        private void SetupFormValues(HasItemWTagCondition condition)
++        {
++            for (int i = 0; i < cmbHasItemWTag.Items.Count; i++)
++            {
++                if (cmbHasItemWTag.Items[i].ToString() == condition.Tag)
++                {
++                    cmbHasItemWTag.SelectedIndex = i;
++                    break;
++                }
++            }
++            nudHasItemWTag.Value = condition.Quantity;
++        }
++
++        private void SetupFormValues(EquippedItemTagIsCondition condition)
++        {
++            for (int i = 0; i < cmbEquippedItemTag.Items.Count; i++)
++            {
++                if (cmbEquippedItemTag.Items[i].ToString() == condition.Tag)
++                {
++                    cmbEquippedItemTag.SelectedIndex = i;
++                    break;
++                }
++            }
++        }
++
+         private void SetupFormValues(ClassIsCondition condition)
+         {
+             cmbClass.SelectedIndex = ClassBase.ListIndex(condition.ClassId);
+@@ -946,6 +1066,30 @@ private void SetupFormValues(NoNpcsOnMapCondition condition)
+             //Nothing to do but we need this here so the dynamic will work :) 
+         }
+ 
++        private void SetupFormValues(MapHasNPCWTag condition)
++        {
++            for (int i = 0; i < cmbEquippedItemTag.Items.Count; i++)
++            {
++                if (cmbEquippedItemTag.Items[i].ToString() == condition.Tag)
++                {
++                    cmbEquippedItemTag.SelectedIndex = i;
++                    break;
++                }
++            }
++        }
++
++        private void SetupFormValues(MapHasTag condition)
++        {
++            for (int i = 0; i < cmbEquippedItemTag.Items.Count; i++)
++            {
++                if (cmbEquippedItemTag.Items[i].ToString() == condition.Tag)
++                {
++                    cmbEquippedItemTag.SelectedIndex = i;
++                    break;
++                }
++            }
++        }
++
+         private void SetupFormValues(QuestCompletedCondition condition)
+         {
+             cmbCompletedQuest.SelectedIndex = QuestBase.ListIndex(condition.QuestId);
+@@ -1081,6 +1225,18 @@ private void SaveFormValues(NoNpcsOnMapCondition condition)
+             //Nothing to do but we need this here so the dynamic will work :) 
+         }
+ 
++        private void SaveFormValues(MapHasNPCWTag condition)
++        {
++            condition.Tag = cmbEquippedItemTag.SelectedIndex == -1 ? null :
++                cmbEquippedItemTag.Items[cmbEquippedItemTag.SelectedIndex].ToString();
++        }
++
++        private void SaveFormValues(MapHasTag condition)
++        {
++            condition.Tag = cmbEquippedItemTag.SelectedIndex == -1 ? null :
++                cmbEquippedItemTag.Items[cmbEquippedItemTag.SelectedIndex].ToString();
++        }
++
+         private void SaveFormValues(GenderIsCondition condition)
+         {
+             condition.Gender = (Gender) cmbGender.SelectedIndex;
+@@ -1096,8 +1252,20 @@ private void SaveFormValues(IsItemEquippedCondition condition)
+             condition.ItemId = ItemBase.IdFromList(cmbEquippedItem.SelectedIndex);
+         }
+ 
+-        #endregion
++        private void SaveFormValues(EquippedItemTagIsCondition condition)
++        {
++            condition.Tag = cmbEquippedItemTag.SelectedIndex == -1 ? null :
++                cmbEquippedItemTag.Items[cmbEquippedItemTag.SelectedIndex].ToString();
++        }
+ 
++        private void SaveFormValues(HasItemWTagCondition condition)
++        {
++            condition.Tag = cmbHasItemWTag.SelectedIndex == -1 ? null :
++                cmbHasItemWTag.Items[cmbHasItemWTag.SelectedIndex].ToString();
++            condition.Quantity = (int)nudHasItemWTag.Value;
++        }
++
++        #endregion
+     }
+ 
+ }
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx
+index fbd6a7cb..4a9b554c 100644
+--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx	
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx	
+@@ -118,13 +118,6 @@
+     <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+   </resheader>
+   <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+-  <data name="cmbConditionType.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+-    <value>
+-        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+-        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+-        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+-</value>
+-  </data>
+   <data name="cmbVariable.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+     <value>
+         iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+@@ -179,6 +172,27 @@
+         iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+         MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+         r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
++</value>
++  </data>
++  <data name="cmbHasItemWTag.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
++    <value>
++        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
++        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
++        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
++</value>
++  </data>
++  <data name="cmbEquippedItemTag.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
++    <value>
++        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
++        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
++        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
++</value>
++  </data>
++  <data name="cmbConditionType.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
++    <value>
++        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
++        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
++        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+ </value>
+   </data>
+   <data name="cmbCompletedQuest.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs
+new file mode 100644
+index 00000000..2e756720
+--- /dev/null
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs	
+@@ -0,0 +1,171 @@
++using DarkUI.Controls;
++
++namespace Intersect.Editor.Forms.Editors.Events.Event_Commands
++{
++    partial class EventCommandTakeItemsBytag
++    {
++        /// <summary>
++        /// Required designer variable.
++        /// </summary>
++        private System.ComponentModel.IContainer components = null;
++
++        /// <summary>
++        /// Clean up any resources being used.
++        /// </summary>
++        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
++        protected override void Dispose(bool disposing)
++        {
++            if (disposing && (components != null))
++            {
++                components.Dispose();
++            }
++            base.Dispose(disposing);
++        }
++
++        #region Component Designer generated code
++
++        /// <summary>
++        /// Required method for Designer support - do not modify
++        /// the contents of this method with the code editor.
++        /// </summary>
++        private void InitializeComponent()
++        {
++            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventCommandTakeItemsBytag));
++            this.grpTakeItemBytag = new DarkUI.Controls.DarkGroupBox();
++            this.nudGiveTakeAmount = new DarkUI.Controls.DarkNumericUpDown();
++            this.lblAmount = new System.Windows.Forms.Label();
++            this.cmbTags = new DarkUI.Controls.DarkComboBox();
++            this.lblTag = new System.Windows.Forms.Label();
++            this.btnCancel = new DarkUI.Controls.DarkButton();
++            this.btnSave = new DarkUI.Controls.DarkButton();
++            this.grpTakeItemBytag.SuspendLayout();
++            ((System.ComponentModel.ISupportInitialize)(this.nudGiveTakeAmount)).BeginInit();
++            this.SuspendLayout();
++            //
++            // grpTakeItemBytag
++            //
++            this.grpTakeItemBytag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.grpTakeItemBytag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpTakeItemBytag.Controls.Add(this.nudGiveTakeAmount);
++            this.grpTakeItemBytag.Controls.Add(this.lblAmount);
++            this.grpTakeItemBytag.Controls.Add(this.cmbTags);
++            this.grpTakeItemBytag.Controls.Add(this.lblTag);
++            this.grpTakeItemBytag.Controls.Add(this.btnCancel);
++            this.grpTakeItemBytag.Controls.Add(this.btnSave);
++            this.grpTakeItemBytag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpTakeItemBytag.Location = new System.Drawing.Point(3, 3);
++            this.grpTakeItemBytag.Name = "grpTakeItemBytag";
++            this.grpTakeItemBytag.Size = new System.Drawing.Size(193, 133);
++            this.grpTakeItemBytag.TabIndex = 17;
++            this.grpTakeItemBytag.TabStop = false;
++            this.grpTakeItemBytag.Text = "Take Item By Tag:";
++            //
++            // nudGiveTakeAmount
++            //
++            this.nudGiveTakeAmount.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.nudGiveTakeAmount.ForeColor = System.Drawing.Color.Gainsboro;
++            this.nudGiveTakeAmount.Location = new System.Drawing.Point(64, 46);
++            this.nudGiveTakeAmount.Maximum = new decimal(new int[] {
++            100000,
++            0,
++            0,
++            0});
++            this.nudGiveTakeAmount.Minimum = new decimal(new int[] {
++            1,
++            0,
++            0,
++            0});
++            this.nudGiveTakeAmount.Name = "nudGiveTakeAmount";
++            this.nudGiveTakeAmount.Size = new System.Drawing.Size(115, 20);
++            this.nudGiveTakeAmount.TabIndex = 26;
++            this.nudGiveTakeAmount.Value = new decimal(new int[] {
++            1,
++            0,
++            0,
++            0});
++            //
++            // lblAmount
++            //
++            this.lblAmount.AutoSize = true;
++            this.lblAmount.Location = new System.Drawing.Point(6, 48);
++            this.lblAmount.Name = "lblAmount";
++            this.lblAmount.Size = new System.Drawing.Size(46, 13);
++            this.lblAmount.TabIndex = 25;
++            this.lblAmount.Text = "Amount:";
++            //
++            // cmbTags
++            //
++            this.cmbTags.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbTags.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbTags.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbTags.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbTags.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTags.ButtonIcon")));
++            this.cmbTags.DrawDropdownHoverOutline = false;
++            this.cmbTags.DrawFocusRectangle = false;
++            this.cmbTags.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbTags.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbTags.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbTags.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbTags.FormattingEnabled = true;
++            this.cmbTags.Location = new System.Drawing.Point(64, 19);
++            this.cmbTags.Name = "cmbTags";
++            this.cmbTags.Size = new System.Drawing.Size(115, 21);
++            this.cmbTags.TabIndex = 22;
++            this.cmbTags.TextPadding = new System.Windows.Forms.Padding(2);
++            //
++            // lblTag
++            //
++            this.lblTag.AutoSize = true;
++            this.lblTag.Location = new System.Drawing.Point(5, 21);
++            this.lblTag.Name = "lblTag";
++            this.lblTag.Size = new System.Drawing.Size(29, 13);
++            this.lblTag.TabIndex = 21;
++            this.lblTag.Text = "Tag:";
++            //
++            // btnCancel
++            //
++            this.btnCancel.Location = new System.Drawing.Point(89, 104);
++            this.btnCancel.Name = "btnCancel";
++            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
++            this.btnCancel.Size = new System.Drawing.Size(75, 23);
++            this.btnCancel.TabIndex = 20;
++            this.btnCancel.Text = "Cancel";
++            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
++            //
++            // btnSave
++            //
++            this.btnSave.Location = new System.Drawing.Point(8, 104);
++            this.btnSave.Name = "btnSave";
++            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
++            this.btnSave.Size = new System.Drawing.Size(75, 23);
++            this.btnSave.TabIndex = 19;
++            this.btnSave.Text = "Ok";
++            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
++            //
++            // EventCommandTakeItemsBytag
++            //
++            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
++            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
++            this.AutoSize = true;
++            this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.Controls.Add(this.grpTakeItemBytag);
++            this.Name = "EventCommandTakeItemsBytag";
++            this.Size = new System.Drawing.Size(205, 139);
++            this.grpTakeItemBytag.ResumeLayout(false);
++            this.grpTakeItemBytag.PerformLayout();
++            ((System.ComponentModel.ISupportInitialize)(this.nudGiveTakeAmount)).EndInit();
++            this.ResumeLayout(false);
++
++        }
++
++        #endregion
++
++        private DarkGroupBox grpTakeItemBytag;
++        private DarkButton btnCancel;
++        private DarkButton btnSave;
++        private DarkComboBox cmbTags;
++        private System.Windows.Forms.Label lblTag;
++        private System.Windows.Forms.Label lblAmount;
++        private DarkNumericUpDown nudGiveTakeAmount;
++    }
++}
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs
+new file mode 100644
+index 00000000..3ae45b28
+--- /dev/null
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs	
+@@ -0,0 +1,67 @@
++using System;
++using System.Linq;
++using System.Windows.Forms;
++
++using Intersect.Editor.Localization;
++using Intersect.GameObjects;
++using Intersect.GameObjects.Events;
++using Intersect.GameObjects.Events.Commands;
++
++namespace Intersect.Editor.Forms.Editors.Events.Event_Commands
++{
++
++    public partial class EventCommandTakeItemsBytag : UserControl
++    {
++
++        private readonly FrmEvent mEventEditor;
++
++        private EventPage mCurrentPage;
++
++        private TakeItemsByTag mMyCommand;
++
++        public EventCommandTakeItemsBytag(TakeItemsByTag refCommand, EventPage refPage, FrmEvent editor)
++        {
++            InitializeComponent();
++            mMyCommand = refCommand;
++            mEventEditor = editor;
++            mCurrentPage = refPage;
++            InitLocalization();
++            cmbTags.Items.Clear();
++            cmbTags.Items.AddRange(ItemBase.AllTags.OrderBy(x => x).ToArray());
++            cmbTags.SelectedIndex = cmbTags.Items.IndexOf(mMyCommand.Tag ?? "");
++            if (mMyCommand.Quantity < 1)
++            {
++                nudGiveTakeAmount.Value = 1;
++            }
++            else
++            {
++                nudGiveTakeAmount.Value = mMyCommand.Quantity;
++            }
++
++
++        }
++
++        private void InitLocalization()
++        {
++            lblAmount.Text = Strings.EventTakeItemByTag.amount;
++            grpTakeItemBytag.Text = Strings.EventTakeItemByTag.title;
++            lblTag.Text = Strings.EventTakeItemByTag.tag;
++            btnSave.Text = Strings.EventTakeItemByTag.okay;
++            btnCancel.Text = Strings.EventTakeItemByTag.cancel;
++        }
++
++        private void btnSave_Click(object sender, EventArgs e)
++        {
++            mMyCommand.Tag = cmbTags.GetItemText(cmbTags.SelectedItem);
++            mMyCommand.Quantity = (int) nudGiveTakeAmount.Value;
++            mEventEditor.FinishCommandEdit();
++        }
++
++        private void btnCancel_Click(object sender, EventArgs e)
++        {
++            mEventEditor.CancelCommandEdit();
++        }
++
++    }
++
++}
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx
+new file mode 100644
+index 00000000..2f34d5e1
+--- /dev/null
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx	
+@@ -0,0 +1,128 @@
++<?xml version="1.0" encoding="utf-8"?>
++<root>
++  <!--
++    Microsoft ResX Schema
++
++    Version 2.0
++
++    The primary goals of this format is to allow a simple XML format
++    that is mostly human readable. The generation and parsing of the
++    various data types are done through the TypeConverter classes
++    associated with the data types.
++
++    Example:
++
++    ... ado.net/XML headers & schema ...
++    <resheader name="resmimetype">text/microsoft-resx</resheader>
++    <resheader name="version">2.0</resheader>
++    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
++    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
++    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
++    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
++    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
++        <value>[base64 mime encoded serialized .NET Framework object]</value>
++    </data>
++    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
++        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
++        <comment>This is a comment</comment>
++    </data>
++
++    There are any number of "resheader" rows that contain simple
++    name/value pairs.
++
++    Each data row contains a name, and value. The row also contains a
++    type or mimetype. Type corresponds to a .NET class that support
++    text/value conversion through the TypeConverter architecture.
++    Classes that don't support this are serialized and stored with the
++    mimetype set.
++
++    The mimetype is used for serialized objects, and tells the
++    ResXResourceReader how to depersist the object. This is currently not
++    extensible. For a given mimetype the value must be set accordingly:
++
++    Note - application/x-microsoft.net.object.binary.base64 is the format
++    that the ResXResourceWriter will generate, however the reader can
++    read any of the formats listed below.
++
++    mimetype: application/x-microsoft.net.object.binary.base64
++    value   : The object must be serialized with
++            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
++            : and then encoded with base64 encoding.
++
++    mimetype: application/x-microsoft.net.object.soap.base64
++    value   : The object must be serialized with
++            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
++            : and then encoded with base64 encoding.
++
++    mimetype: application/x-microsoft.net.object.bytearray.base64
++    value   : The object must be serialized into a byte array
++            : using a System.ComponentModel.TypeConverter
++            : and then encoded with base64 encoding.
++    -->
++  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
++    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
++    <xsd:element name="root" msdata:IsDataSet="true">
++      <xsd:complexType>
++        <xsd:choice maxOccurs="unbounded">
++          <xsd:element name="metadata">
++            <xsd:complexType>
++              <xsd:sequence>
++                <xsd:element name="value" type="xsd:string" minOccurs="0" />
++              </xsd:sequence>
++              <xsd:attribute name="name" use="required" type="xsd:string" />
++              <xsd:attribute name="type" type="xsd:string" />
++              <xsd:attribute name="mimetype" type="xsd:string" />
++              <xsd:attribute ref="xml:space" />
++            </xsd:complexType>
++          </xsd:element>
++          <xsd:element name="assembly">
++            <xsd:complexType>
++              <xsd:attribute name="alias" type="xsd:string" />
++              <xsd:attribute name="name" type="xsd:string" />
++            </xsd:complexType>
++          </xsd:element>
++          <xsd:element name="data">
++            <xsd:complexType>
++              <xsd:sequence>
++                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
++                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
++              </xsd:sequence>
++              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
++              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
++              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
++              <xsd:attribute ref="xml:space" />
++            </xsd:complexType>
++          </xsd:element>
++          <xsd:element name="resheader">
++            <xsd:complexType>
++              <xsd:sequence>
++                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
++              </xsd:sequence>
++              <xsd:attribute name="name" type="xsd:string" use="required" />
++            </xsd:complexType>
++          </xsd:element>
++        </xsd:choice>
++      </xsd:complexType>
++    </xsd:element>
++  </xsd:schema>
++  <resheader name="resmimetype">
++    <value>text/microsoft-resx</value>
++  </resheader>
++  <resheader name="version">
++    <value>2.0</value>
++  </resheader>
++  <resheader name="reader">
++    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
++  </resheader>
++  <resheader name="writer">
++    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
++  </resheader>
++  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
++  <data name="cmbTags.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
++    <value>
++        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
++        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
++        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
++</value>
++  </data>
++</root>
+\ No newline at end of file
+diff --git a/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs b/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
+index e9223a50..2450fa0d 100644
+--- a/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
++++ b/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
+@@ -32,25 +32,25 @@ protected override void Dispose(bool disposing)
+         /// </summary>
+         private void InitializeComponent()
+         {
+-      this.components = new System.ComponentModel.Container();
+-      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmEvent));
+-      System.Windows.Forms.TreeNode treeNode1 = new System.Windows.Forms.TreeNode("Show Text");
+-      System.Windows.Forms.TreeNode treeNode2 = new System.Windows.Forms.TreeNode("Show Options");
+-      System.Windows.Forms.TreeNode treeNode3 = new System.Windows.Forms.TreeNode("Input Variable");
+-      System.Windows.Forms.TreeNode treeNode4 = new System.Windows.Forms.TreeNode("Add Chatbox Text");
+-      System.Windows.Forms.TreeNode treeNode5 = new System.Windows.Forms.TreeNode("Dialogue", new System.Windows.Forms.TreeNode[] {
++            this.components = new System.ComponentModel.Container();
++            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmEvent));
++            System.Windows.Forms.TreeNode treeNode1 = new System.Windows.Forms.TreeNode("Show Text");
++            System.Windows.Forms.TreeNode treeNode2 = new System.Windows.Forms.TreeNode("Show Options");
++            System.Windows.Forms.TreeNode treeNode3 = new System.Windows.Forms.TreeNode("Input Variable");
++            System.Windows.Forms.TreeNode treeNode4 = new System.Windows.Forms.TreeNode("Add Chatbox Text");
++            System.Windows.Forms.TreeNode treeNode5 = new System.Windows.Forms.TreeNode("Dialogue", new System.Windows.Forms.TreeNode[] {
+             treeNode1,
+             treeNode2,
+             treeNode3,
+             treeNode4});
+-      System.Windows.Forms.TreeNode treeNode6 = new System.Windows.Forms.TreeNode("Set Variable");
+-      System.Windows.Forms.TreeNode treeNode7 = new System.Windows.Forms.TreeNode("Set Self Switch");
+-      System.Windows.Forms.TreeNode treeNode8 = new System.Windows.Forms.TreeNode("Conditional Branch");
+-      System.Windows.Forms.TreeNode treeNode9 = new System.Windows.Forms.TreeNode("Exit Event Process");
+-      System.Windows.Forms.TreeNode treeNode10 = new System.Windows.Forms.TreeNode("Label");
+-      System.Windows.Forms.TreeNode treeNode11 = new System.Windows.Forms.TreeNode("Go To Label");
+-      System.Windows.Forms.TreeNode treeNode12 = new System.Windows.Forms.TreeNode("Start Common Event");
+-      System.Windows.Forms.TreeNode treeNode13 = new System.Windows.Forms.TreeNode("Logic Flow", new System.Windows.Forms.TreeNode[] {
++            System.Windows.Forms.TreeNode treeNode6 = new System.Windows.Forms.TreeNode("Set Variable");
++            System.Windows.Forms.TreeNode treeNode7 = new System.Windows.Forms.TreeNode("Set Self Switch");
++            System.Windows.Forms.TreeNode treeNode8 = new System.Windows.Forms.TreeNode("Conditional Branch");
++            System.Windows.Forms.TreeNode treeNode9 = new System.Windows.Forms.TreeNode("Exit Event Process");
++            System.Windows.Forms.TreeNode treeNode10 = new System.Windows.Forms.TreeNode("Label");
++            System.Windows.Forms.TreeNode treeNode11 = new System.Windows.Forms.TreeNode("Go To Label");
++            System.Windows.Forms.TreeNode treeNode12 = new System.Windows.Forms.TreeNode("Start Common Event");
++            System.Windows.Forms.TreeNode treeNode13 = new System.Windows.Forms.TreeNode("Logic Flow", new System.Windows.Forms.TreeNode[] {
+             treeNode6,
+             treeNode7,
+             treeNode8,
+@@ -58,22 +58,23 @@ private void InitializeComponent()
+             treeNode10,
+             treeNode11,
+             treeNode12});
+-      System.Windows.Forms.TreeNode treeNode14 = new System.Windows.Forms.TreeNode("Restore HP");
+-      System.Windows.Forms.TreeNode treeNode15 = new System.Windows.Forms.TreeNode("Restore MP");
+-      System.Windows.Forms.TreeNode treeNode16 = new System.Windows.Forms.TreeNode("Level Up");
+-      System.Windows.Forms.TreeNode treeNode17 = new System.Windows.Forms.TreeNode("Give Experience");
+-      System.Windows.Forms.TreeNode treeNode18 = new System.Windows.Forms.TreeNode("Change Level");
+-      System.Windows.Forms.TreeNode treeNode19 = new System.Windows.Forms.TreeNode("Change Spells");
+-      System.Windows.Forms.TreeNode treeNode20 = new System.Windows.Forms.TreeNode("Change Items");
+-      System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode("Change Sprite");
+-      System.Windows.Forms.TreeNode treeNode22 = new System.Windows.Forms.TreeNode("Change Face");
+-      System.Windows.Forms.TreeNode treeNode23 = new System.Windows.Forms.TreeNode("Change Gender");
+-      System.Windows.Forms.TreeNode treeNode24 = new System.Windows.Forms.TreeNode("Set Access");
+-      System.Windows.Forms.TreeNode treeNode25 = new System.Windows.Forms.TreeNode("Change Class");
+-      System.Windows.Forms.TreeNode treeNode26 = new System.Windows.Forms.TreeNode("Equip Item");
+-      System.Windows.Forms.TreeNode treeNode27 = new System.Windows.Forms.TreeNode("Change Name Color");
+-      System.Windows.Forms.TreeNode treeNode28 = new System.Windows.Forms.TreeNode("Change Player Label");
+-      System.Windows.Forms.TreeNode treeNode29 = new System.Windows.Forms.TreeNode("Player Control", new System.Windows.Forms.TreeNode[] {
++            System.Windows.Forms.TreeNode treeNode14 = new System.Windows.Forms.TreeNode("Restore HP");
++            System.Windows.Forms.TreeNode treeNode15 = new System.Windows.Forms.TreeNode("Restore MP");
++            System.Windows.Forms.TreeNode treeNode16 = new System.Windows.Forms.TreeNode("Level Up");
++            System.Windows.Forms.TreeNode treeNode17 = new System.Windows.Forms.TreeNode("Give Experience");
++            System.Windows.Forms.TreeNode treeNode18 = new System.Windows.Forms.TreeNode("Change Level");
++            System.Windows.Forms.TreeNode treeNode19 = new System.Windows.Forms.TreeNode("Change Spells");
++            System.Windows.Forms.TreeNode treeNode20 = new System.Windows.Forms.TreeNode("Change Items");
++            System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode("Take Items By Tag");
++            System.Windows.Forms.TreeNode treeNode22 = new System.Windows.Forms.TreeNode("Change Sprite");
++            System.Windows.Forms.TreeNode treeNode23 = new System.Windows.Forms.TreeNode("Change Face");
++            System.Windows.Forms.TreeNode treeNode24 = new System.Windows.Forms.TreeNode("Change Gender");
++            System.Windows.Forms.TreeNode treeNode25 = new System.Windows.Forms.TreeNode("Set Access");
++            System.Windows.Forms.TreeNode treeNode26 = new System.Windows.Forms.TreeNode("Change Class");
++            System.Windows.Forms.TreeNode treeNode27 = new System.Windows.Forms.TreeNode("Equip Item");
++            System.Windows.Forms.TreeNode treeNode28 = new System.Windows.Forms.TreeNode("Change Name Color");
++            System.Windows.Forms.TreeNode treeNode29 = new System.Windows.Forms.TreeNode("Change Player Label");
++            System.Windows.Forms.TreeNode treeNode30 = new System.Windows.Forms.TreeNode("Player Control", new System.Windows.Forms.TreeNode[] {
+             treeNode14,
+             treeNode15,
+             treeNode16,
+@@ -88,18 +89,18 @@ private void InitializeComponent()
+             treeNode25,
+             treeNode26,
+             treeNode27,
+-            treeNode28});
+-      System.Windows.Forms.TreeNode treeNode30 = new System.Windows.Forms.TreeNode("Warp Player");
+-      System.Windows.Forms.TreeNode treeNode31 = new System.Windows.Forms.TreeNode("Set Move Route");
+-      System.Windows.Forms.TreeNode treeNode32 = new System.Windows.Forms.TreeNode("Wait for Route Completion");
+-      System.Windows.Forms.TreeNode treeNode33 = new System.Windows.Forms.TreeNode("Hold Player");
+-      System.Windows.Forms.TreeNode treeNode34 = new System.Windows.Forms.TreeNode("Release Player");
+-      System.Windows.Forms.TreeNode treeNode35 = new System.Windows.Forms.TreeNode("Spawn NPC");
+-      System.Windows.Forms.TreeNode treeNode36 = new System.Windows.Forms.TreeNode("Despawn NPC");
+-      System.Windows.Forms.TreeNode treeNode37 = new System.Windows.Forms.TreeNode("Hide Player");
+-      System.Windows.Forms.TreeNode treeNode38 = new System.Windows.Forms.TreeNode("Show Player");
+-      System.Windows.Forms.TreeNode treeNode39 = new System.Windows.Forms.TreeNode("Movement", new System.Windows.Forms.TreeNode[] {
+-            treeNode30,
++            treeNode28,
++            treeNode29});
++            System.Windows.Forms.TreeNode treeNode31 = new System.Windows.Forms.TreeNode("Warp Player");
++            System.Windows.Forms.TreeNode treeNode32 = new System.Windows.Forms.TreeNode("Set Move Route");
++            System.Windows.Forms.TreeNode treeNode33 = new System.Windows.Forms.TreeNode("Wait for Route Completion");
++            System.Windows.Forms.TreeNode treeNode34 = new System.Windows.Forms.TreeNode("Hold Player");
++            System.Windows.Forms.TreeNode treeNode35 = new System.Windows.Forms.TreeNode("Release Player");
++            System.Windows.Forms.TreeNode treeNode36 = new System.Windows.Forms.TreeNode("Spawn NPC");
++            System.Windows.Forms.TreeNode treeNode37 = new System.Windows.Forms.TreeNode("Despawn NPC");
++            System.Windows.Forms.TreeNode treeNode38 = new System.Windows.Forms.TreeNode("Hide Player");
++            System.Windows.Forms.TreeNode treeNode39 = new System.Windows.Forms.TreeNode("Show Player");
++            System.Windows.Forms.TreeNode treeNode40 = new System.Windows.Forms.TreeNode("Movement", new System.Windows.Forms.TreeNode[] {
+             treeNode31,
+             treeNode32,
+             treeNode33,
+@@ -107,1192 +108,1196 @@ private void InitializeComponent()
+             treeNode35,
+             treeNode36,
+             treeNode37,
+-            treeNode38});
+-      System.Windows.Forms.TreeNode treeNode40 = new System.Windows.Forms.TreeNode("Play Animation");
+-      System.Windows.Forms.TreeNode treeNode41 = new System.Windows.Forms.TreeNode("Play BGM");
+-      System.Windows.Forms.TreeNode treeNode42 = new System.Windows.Forms.TreeNode("Fadeout BGM");
+-      System.Windows.Forms.TreeNode treeNode43 = new System.Windows.Forms.TreeNode("Play Sound");
+-      System.Windows.Forms.TreeNode treeNode44 = new System.Windows.Forms.TreeNode("Stop Sounds");
+-      System.Windows.Forms.TreeNode treeNode45 = new System.Windows.Forms.TreeNode("Show Picture");
+-      System.Windows.Forms.TreeNode treeNode46 = new System.Windows.Forms.TreeNode("Hide Picture");
+-      System.Windows.Forms.TreeNode treeNode47 = new System.Windows.Forms.TreeNode("Special Effects", new System.Windows.Forms.TreeNode[] {
+-            treeNode40,
++            treeNode38,
++            treeNode39});
++            System.Windows.Forms.TreeNode treeNode41 = new System.Windows.Forms.TreeNode("Play Animation");
++            System.Windows.Forms.TreeNode treeNode42 = new System.Windows.Forms.TreeNode("Play BGM");
++            System.Windows.Forms.TreeNode treeNode43 = new System.Windows.Forms.TreeNode("Fadeout BGM");
++            System.Windows.Forms.TreeNode treeNode44 = new System.Windows.Forms.TreeNode("Play Sound");
++            System.Windows.Forms.TreeNode treeNode45 = new System.Windows.Forms.TreeNode("Stop Sounds");
++            System.Windows.Forms.TreeNode treeNode46 = new System.Windows.Forms.TreeNode("Show Picture");
++            System.Windows.Forms.TreeNode treeNode47 = new System.Windows.Forms.TreeNode("Hide Picture");
++            System.Windows.Forms.TreeNode treeNode48 = new System.Windows.Forms.TreeNode("Special Effects", new System.Windows.Forms.TreeNode[] {
+             treeNode41,
+             treeNode42,
+             treeNode43,
+             treeNode44,
+             treeNode45,
+-            treeNode46});
+-      System.Windows.Forms.TreeNode treeNode48 = new System.Windows.Forms.TreeNode("Start Quest");
+-      System.Windows.Forms.TreeNode treeNode49 = new System.Windows.Forms.TreeNode("Complete Quest Task");
+-      System.Windows.Forms.TreeNode treeNode50 = new System.Windows.Forms.TreeNode("End Quest");
+-      System.Windows.Forms.TreeNode treeNode51 = new System.Windows.Forms.TreeNode("Quest Control", new System.Windows.Forms.TreeNode[] {
+-            treeNode48,
++            treeNode46,
++            treeNode47});
++            System.Windows.Forms.TreeNode treeNode49 = new System.Windows.Forms.TreeNode("Start Quest");
++            System.Windows.Forms.TreeNode treeNode50 = new System.Windows.Forms.TreeNode("Complete Quest Task");
++            System.Windows.Forms.TreeNode treeNode51 = new System.Windows.Forms.TreeNode("End Quest");
++            System.Windows.Forms.TreeNode treeNode52 = new System.Windows.Forms.TreeNode("Quest Control", new System.Windows.Forms.TreeNode[] {
+             treeNode49,
+-            treeNode50});
+-      System.Windows.Forms.TreeNode treeNode52 = new System.Windows.Forms.TreeNode("Wait...");
+-      System.Windows.Forms.TreeNode treeNode53 = new System.Windows.Forms.TreeNode("Etc", new System.Windows.Forms.TreeNode[] {
+-            treeNode52});
+-      System.Windows.Forms.TreeNode treeNode54 = new System.Windows.Forms.TreeNode("Open Bank");
+-      System.Windows.Forms.TreeNode treeNode55 = new System.Windows.Forms.TreeNode("Open Shop");
+-      System.Windows.Forms.TreeNode treeNode56 = new System.Windows.Forms.TreeNode("Open Crafting Station");
+-      System.Windows.Forms.TreeNode treeNode57 = new System.Windows.Forms.TreeNode("Shop and Bank", new System.Windows.Forms.TreeNode[] {
+-            treeNode54,
++            treeNode50,
++            treeNode51});
++            System.Windows.Forms.TreeNode treeNode53 = new System.Windows.Forms.TreeNode("Wait...");
++            System.Windows.Forms.TreeNode treeNode54 = new System.Windows.Forms.TreeNode("Etc", new System.Windows.Forms.TreeNode[] {
++            treeNode53});
++            System.Windows.Forms.TreeNode treeNode55 = new System.Windows.Forms.TreeNode("Open Bank");
++            System.Windows.Forms.TreeNode treeNode56 = new System.Windows.Forms.TreeNode("Open Shop");
++            System.Windows.Forms.TreeNode treeNode57 = new System.Windows.Forms.TreeNode("Open Crafting Station");
++            System.Windows.Forms.TreeNode treeNode58 = new System.Windows.Forms.TreeNode("Shop and Bank", new System.Windows.Forms.TreeNode[] {
+             treeNode55,
+-            treeNode56});
+-      this.lblName = new System.Windows.Forms.Label();
+-      this.txtEventname = new DarkUI.Controls.DarkTextBox();
+-      this.grpEntityOptions = new DarkUI.Controls.DarkGroupBox();
+-      this.grpExtra = new DarkUI.Controls.DarkGroupBox();
+-      this.chkInteractionFreeze = new DarkUI.Controls.DarkCheckBox();
+-      this.chkWalkingAnimation = new DarkUI.Controls.DarkCheckBox();
+-      this.chkDirectionFix = new DarkUI.Controls.DarkCheckBox();
+-      this.chkHideName = new DarkUI.Controls.DarkCheckBox();
+-      this.chkWalkThrough = new DarkUI.Controls.DarkCheckBox();
+-      this.grpInspector = new DarkUI.Controls.DarkGroupBox();
+-      this.pnlFacePreview = new System.Windows.Forms.Panel();
+-      this.lblInspectorDesc = new System.Windows.Forms.Label();
+-      this.txtDesc = new DarkUI.Controls.DarkTextBox();
+-      this.chkDisableInspector = new DarkUI.Controls.DarkCheckBox();
+-      this.cmbPreviewFace = new DarkUI.Controls.DarkComboBox();
+-      this.lblFace = new System.Windows.Forms.Label();
+-      this.grpPreview = new DarkUI.Controls.DarkGroupBox();
+-      this.lblAnimation = new System.Windows.Forms.Label();
+-      this.cmbAnimation = new DarkUI.Controls.DarkComboBox();
+-      this.pnlPreview = new System.Windows.Forms.Panel();
+-      this.grpMovement = new DarkUI.Controls.DarkGroupBox();
+-      this.lblLayer = new System.Windows.Forms.Label();
+-      this.cmbLayering = new DarkUI.Controls.DarkComboBox();
+-      this.cmbEventFreq = new DarkUI.Controls.DarkComboBox();
+-      this.cmbEventSpeed = new DarkUI.Controls.DarkComboBox();
+-      this.lblFreq = new System.Windows.Forms.Label();
+-      this.lblSpeed = new System.Windows.Forms.Label();
+-      this.btnSetRoute = new DarkUI.Controls.DarkButton();
+-      this.lblType = new System.Windows.Forms.Label();
+-      this.cmbMoveType = new DarkUI.Controls.DarkComboBox();
+-      this.grpTriggers = new DarkUI.Controls.DarkGroupBox();
+-      this.txtCommand = new DarkUI.Controls.DarkTextBox();
+-      this.lblCommand = new System.Windows.Forms.Label();
+-      this.lblTriggerVal = new System.Windows.Forms.Label();
+-      this.cmbTriggerVal = new DarkUI.Controls.DarkComboBox();
+-      this.cmbTrigger = new DarkUI.Controls.DarkComboBox();
+-      this.grpEventConditions = new DarkUI.Controls.DarkGroupBox();
+-      this.btnEditConditions = new DarkUI.Controls.DarkButton();
+-      this.grpNewCommands = new DarkUI.Controls.DarkGroupBox();
+-      this.lblCloseCommands = new System.Windows.Forms.Label();
+-      this.lstCommands = new System.Windows.Forms.TreeView();
+-      this.grpEventCommands = new DarkUI.Controls.DarkGroupBox();
+-      this.lstEventCommands = new System.Windows.Forms.ListBox();
+-      this.grpCreateCommands = new DarkUI.Controls.DarkGroupBox();
+-      this.btnSave = new DarkUI.Controls.DarkButton();
+-      this.btnCancel = new DarkUI.Controls.DarkButton();
+-      this.commandMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
+-      this.btnInsert = new System.Windows.Forms.ToolStripMenuItem();
+-      this.btnEdit = new System.Windows.Forms.ToolStripMenuItem();
+-      this.btnCut = new System.Windows.Forms.ToolStripMenuItem();
+-      this.btnCopy = new System.Windows.Forms.ToolStripMenuItem();
+-      this.btnPaste = new System.Windows.Forms.ToolStripMenuItem();
+-      this.btnDelete = new System.Windows.Forms.ToolStripMenuItem();
+-      this.grpPageOptions = new DarkUI.Controls.DarkGroupBox();
+-      this.btnClearPage = new DarkUI.Controls.DarkButton();
+-      this.btnDeletePage = new DarkUI.Controls.DarkButton();
+-      this.btnPastePage = new DarkUI.Controls.DarkButton();
+-      this.btnCopyPage = new DarkUI.Controls.DarkButton();
+-      this.btnNewPage = new DarkUI.Controls.DarkButton();
+-      this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
+-      this.chkIsGlobal = new DarkUI.Controls.DarkCheckBox();
+-      this.pnlTabsContainer = new System.Windows.Forms.Panel();
+-      this.pnlTabs = new System.Windows.Forms.Panel();
+-      this.btnTabsRight = new DarkUI.Controls.DarkButton();
+-      this.btnTabsLeft = new DarkUI.Controls.DarkButton();
+-      this.panel1 = new System.Windows.Forms.Panel();
+-      this.grpEntityOptions.SuspendLayout();
+-      this.grpExtra.SuspendLayout();
+-      this.grpInspector.SuspendLayout();
+-      this.grpPreview.SuspendLayout();
+-      this.grpMovement.SuspendLayout();
+-      this.grpTriggers.SuspendLayout();
+-      this.grpEventConditions.SuspendLayout();
+-      this.grpNewCommands.SuspendLayout();
+-      this.grpEventCommands.SuspendLayout();
+-      this.commandMenu.SuspendLayout();
+-      this.grpPageOptions.SuspendLayout();
+-      this.grpGeneral.SuspendLayout();
+-      this.pnlTabsContainer.SuspendLayout();
+-      this.SuspendLayout();
+-      // 
+-      // lblName
+-      // 
+-      this.lblName.AutoSize = true;
+-      this.lblName.Location = new System.Drawing.Point(6, 22);
+-      this.lblName.Name = "lblName";
+-      this.lblName.Size = new System.Drawing.Size(38, 13);
+-      this.lblName.TabIndex = 1;
+-      this.lblName.Text = "Name:";
+-      // 
+-      // txtEventname
+-      // 
+-      this.txtEventname.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.txtEventname.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.txtEventname.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+-      this.txtEventname.Location = new System.Drawing.Point(48, 19);
+-      this.txtEventname.Name = "txtEventname";
+-      this.txtEventname.Size = new System.Drawing.Size(124, 20);
+-      this.txtEventname.TabIndex = 2;
+-      this.txtEventname.TextChanged += new System.EventHandler(this.txtEventname_TextChanged);
+-      // 
+-      // grpEntityOptions
+-      // 
+-      this.grpEntityOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpEntityOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpEntityOptions.Controls.Add(this.grpExtra);
+-      this.grpEntityOptions.Controls.Add(this.grpInspector);
+-      this.grpEntityOptions.Controls.Add(this.grpPreview);
+-      this.grpEntityOptions.Controls.Add(this.grpMovement);
+-      this.grpEntityOptions.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpEntityOptions.Location = new System.Drawing.Point(21, 150);
+-      this.grpEntityOptions.Name = "grpEntityOptions";
+-      this.grpEntityOptions.Size = new System.Drawing.Size(326, 423);
+-      this.grpEntityOptions.TabIndex = 12;
+-      this.grpEntityOptions.TabStop = false;
+-      this.grpEntityOptions.Text = "Entity Options";
+-      // 
+-      // grpExtra
+-      // 
+-      this.grpExtra.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpExtra.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpExtra.Controls.Add(this.chkInteractionFreeze);
+-      this.grpExtra.Controls.Add(this.chkWalkingAnimation);
+-      this.grpExtra.Controls.Add(this.chkDirectionFix);
+-      this.grpExtra.Controls.Add(this.chkHideName);
+-      this.grpExtra.Controls.Add(this.chkWalkThrough);
+-      this.grpExtra.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpExtra.Location = new System.Drawing.Point(6, 297);
+-      this.grpExtra.Name = "grpExtra";
+-      this.grpExtra.Size = new System.Drawing.Size(315, 64);
+-      this.grpExtra.TabIndex = 9;
+-      this.grpExtra.TabStop = false;
+-      this.grpExtra.Text = "Extra";
+-      // 
+-      // chkInteractionFreeze
+-      // 
+-      this.chkInteractionFreeze.AutoSize = true;
+-      this.chkInteractionFreeze.Location = new System.Drawing.Point(6, 41);
+-      this.chkInteractionFreeze.Name = "chkInteractionFreeze";
+-      this.chkInteractionFreeze.Size = new System.Drawing.Size(111, 17);
+-      this.chkInteractionFreeze.TabIndex = 6;
+-      this.chkInteractionFreeze.Text = "Interaction Freeze";
+-      this.chkInteractionFreeze.CheckedChanged += new System.EventHandler(this.chkInteractionFreeze_CheckedChanged);
+-      // 
+-      // chkWalkingAnimation
+-      // 
+-      this.chkWalkingAnimation.AutoSize = true;
+-      this.chkWalkingAnimation.Location = new System.Drawing.Point(214, 19);
+-      this.chkWalkingAnimation.Name = "chkWalkingAnimation";
+-      this.chkWalkingAnimation.Size = new System.Drawing.Size(91, 17);
+-      this.chkWalkingAnimation.TabIndex = 5;
+-      this.chkWalkingAnimation.Text = "Walking Anim";
+-      this.chkWalkingAnimation.CheckedChanged += new System.EventHandler(this.chkWalkingAnimation_CheckedChanged);
+-      // 
+-      // chkDirectionFix
+-      // 
+-      this.chkDirectionFix.AutoSize = true;
+-      this.chkDirectionFix.Location = new System.Drawing.Point(156, 19);
+-      this.chkDirectionFix.Name = "chkDirectionFix";
+-      this.chkDirectionFix.Size = new System.Drawing.Size(55, 17);
+-      this.chkDirectionFix.TabIndex = 4;
+-      this.chkDirectionFix.Text = "Dir Fix";
+-      this.chkDirectionFix.CheckedChanged += new System.EventHandler(this.chkDirectionFix_CheckedChanged);
+-      // 
+-      // chkHideName
+-      // 
+-      this.chkHideName.AutoSize = true;
+-      this.chkHideName.Location = new System.Drawing.Point(75, 19);
+-      this.chkHideName.Name = "chkHideName";
+-      this.chkHideName.Size = new System.Drawing.Size(79, 17);
+-      this.chkHideName.TabIndex = 3;
+-      this.chkHideName.Text = "Hide Name";
+-      this.chkHideName.CheckedChanged += new System.EventHandler(this.chkHideName_CheckedChanged);
+-      // 
+-      // chkWalkThrough
+-      // 
+-      this.chkWalkThrough.AutoSize = true;
+-      this.chkWalkThrough.Location = new System.Drawing.Point(6, 19);
+-      this.chkWalkThrough.Name = "chkWalkThrough";
+-      this.chkWalkThrough.Size = new System.Drawing.Size(69, 17);
+-      this.chkWalkThrough.TabIndex = 2;
+-      this.chkWalkThrough.Text = "Passable";
+-      this.chkWalkThrough.CheckedChanged += new System.EventHandler(this.chkWalkThrough_CheckedChanged);
+-      // 
+-      // grpInspector
+-      // 
+-      this.grpInspector.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpInspector.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpInspector.Controls.Add(this.pnlFacePreview);
+-      this.grpInspector.Controls.Add(this.lblInspectorDesc);
+-      this.grpInspector.Controls.Add(this.txtDesc);
+-      this.grpInspector.Controls.Add(this.chkDisableInspector);
+-      this.grpInspector.Controls.Add(this.cmbPreviewFace);
+-      this.grpInspector.Controls.Add(this.lblFace);
+-      this.grpInspector.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpInspector.Location = new System.Drawing.Point(6, 179);
+-      this.grpInspector.Name = "grpInspector";
+-      this.grpInspector.Size = new System.Drawing.Size(316, 117);
+-      this.grpInspector.TabIndex = 7;
+-      this.grpInspector.TabStop = false;
+-      this.grpInspector.Text = "Entity Inspector Options";
+-      // 
+-      // pnlFacePreview
+-      // 
+-      this.pnlFacePreview.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
+-      this.pnlFacePreview.Location = new System.Drawing.Point(9, 46);
+-      this.pnlFacePreview.Name = "pnlFacePreview";
+-      this.pnlFacePreview.Size = new System.Drawing.Size(64, 64);
+-      this.pnlFacePreview.TabIndex = 12;
+-      // 
+-      // lblInspectorDesc
+-      // 
+-      this.lblInspectorDesc.Location = new System.Drawing.Point(79, 42);
+-      this.lblInspectorDesc.Name = "lblInspectorDesc";
+-      this.lblInspectorDesc.Size = new System.Drawing.Size(112, 19);
+-      this.lblInspectorDesc.TabIndex = 11;
+-      this.lblInspectorDesc.Text = "Inspector Description:";
+-      // 
+-      // txtDesc
+-      // 
+-      this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+-      this.txtDesc.Location = new System.Drawing.Point(79, 61);
+-      this.txtDesc.Multiline = true;
+-      this.txtDesc.Name = "txtDesc";
+-      this.txtDesc.Size = new System.Drawing.Size(231, 50);
+-      this.txtDesc.TabIndex = 0;
+-      this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
+-      // 
+-      // chkDisableInspector
+-      // 
+-      this.chkDisableInspector.Location = new System.Drawing.Point(204, 15);
+-      this.chkDisableInspector.Name = "chkDisableInspector";
+-      this.chkDisableInspector.Size = new System.Drawing.Size(107, 21);
+-      this.chkDisableInspector.TabIndex = 4;
+-      this.chkDisableInspector.Text = "Disable Inspector";
+-      this.chkDisableInspector.CheckedChanged += new System.EventHandler(this.chkDisablePreview_CheckedChanged);
+-      // 
+-      // cmbPreviewFace
+-      // 
+-      this.cmbPreviewFace.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbPreviewFace.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbPreviewFace.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbPreviewFace.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbPreviewFace.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbPreviewFace.ButtonIcon")));
+-      this.cmbPreviewFace.DrawDropdownHoverOutline = false;
+-      this.cmbPreviewFace.DrawFocusRectangle = false;
+-      this.cmbPreviewFace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbPreviewFace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbPreviewFace.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbPreviewFace.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbPreviewFace.FormattingEnabled = true;
+-      this.cmbPreviewFace.Location = new System.Drawing.Point(46, 15);
+-      this.cmbPreviewFace.Name = "cmbPreviewFace";
+-      this.cmbPreviewFace.Size = new System.Drawing.Size(114, 21);
+-      this.cmbPreviewFace.TabIndex = 10;
+-      this.cmbPreviewFace.Text = null;
+-      this.cmbPreviewFace.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbPreviewFace.SelectedIndexChanged += new System.EventHandler(this.cmbPreviewFace_SelectedIndexChanged);
+-      // 
+-      // lblFace
+-      // 
+-      this.lblFace.AutoSize = true;
+-      this.lblFace.Location = new System.Drawing.Point(6, 18);
+-      this.lblFace.Name = "lblFace";
+-      this.lblFace.Size = new System.Drawing.Size(34, 13);
+-      this.lblFace.TabIndex = 9;
+-      this.lblFace.Text = "Face:";
+-      // 
+-      // grpPreview
+-      // 
+-      this.grpPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpPreview.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpPreview.Controls.Add(this.lblAnimation);
+-      this.grpPreview.Controls.Add(this.cmbAnimation);
+-      this.grpPreview.Controls.Add(this.pnlPreview);
+-      this.grpPreview.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpPreview.Location = new System.Drawing.Point(6, 13);
+-      this.grpPreview.Name = "grpPreview";
+-      this.grpPreview.Size = new System.Drawing.Size(160, 163);
+-      this.grpPreview.TabIndex = 10;
+-      this.grpPreview.TabStop = false;
+-      this.grpPreview.Text = "Preview";
+-      // 
+-      // lblAnimation
+-      // 
+-      this.lblAnimation.AutoSize = true;
+-      this.lblAnimation.Location = new System.Drawing.Point(4, 116);
+-      this.lblAnimation.Name = "lblAnimation";
+-      this.lblAnimation.Size = new System.Drawing.Size(56, 13);
+-      this.lblAnimation.TabIndex = 2;
+-      this.lblAnimation.Text = "Animation:";
+-      // 
+-      // cmbAnimation
+-      // 
+-      this.cmbAnimation.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbAnimation.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbAnimation.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbAnimation.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbAnimation.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAnimation.ButtonIcon")));
+-      this.cmbAnimation.DrawDropdownHoverOutline = false;
+-      this.cmbAnimation.DrawFocusRectangle = false;
+-      this.cmbAnimation.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbAnimation.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbAnimation.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbAnimation.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbAnimation.FormattingEnabled = true;
+-      this.cmbAnimation.Location = new System.Drawing.Point(20, 132);
+-      this.cmbAnimation.Name = "cmbAnimation";
+-      this.cmbAnimation.Size = new System.Drawing.Size(125, 21);
+-      this.cmbAnimation.TabIndex = 1;
+-      this.cmbAnimation.Text = null;
+-      this.cmbAnimation.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbAnimation.SelectedIndexChanged += new System.EventHandler(this.cmbAnimation_SelectedIndexChanged);
+-      // 
+-      // pnlPreview
+-      // 
+-      this.pnlPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+-      this.pnlPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.pnlPreview.Location = new System.Drawing.Point(33, 14);
+-      this.pnlPreview.Name = "pnlPreview";
+-      this.pnlPreview.Size = new System.Drawing.Size(96, 96);
+-      this.pnlPreview.TabIndex = 0;
+-      this.pnlPreview.DoubleClick += new System.EventHandler(this.pnlPreview_DoubleClick);
+-      // 
+-      // grpMovement
+-      // 
+-      this.grpMovement.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpMovement.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpMovement.Controls.Add(this.lblLayer);
+-      this.grpMovement.Controls.Add(this.cmbLayering);
+-      this.grpMovement.Controls.Add(this.cmbEventFreq);
+-      this.grpMovement.Controls.Add(this.cmbEventSpeed);
+-      this.grpMovement.Controls.Add(this.lblFreq);
+-      this.grpMovement.Controls.Add(this.lblSpeed);
+-      this.grpMovement.Controls.Add(this.btnSetRoute);
+-      this.grpMovement.Controls.Add(this.lblType);
+-      this.grpMovement.Controls.Add(this.cmbMoveType);
+-      this.grpMovement.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpMovement.Location = new System.Drawing.Point(169, 13);
+-      this.grpMovement.Name = "grpMovement";
+-      this.grpMovement.Size = new System.Drawing.Size(154, 163);
+-      this.grpMovement.TabIndex = 8;
+-      this.grpMovement.TabStop = false;
+-      this.grpMovement.Text = "Movement";
+-      // 
+-      // lblLayer
+-      // 
+-      this.lblLayer.AutoSize = true;
+-      this.lblLayer.Location = new System.Drawing.Point(6, 134);
+-      this.lblLayer.Name = "lblLayer";
+-      this.lblLayer.Size = new System.Drawing.Size(36, 13);
+-      this.lblLayer.TabIndex = 7;
+-      this.lblLayer.Text = "Layer:";
+-      // 
+-      // cmbLayering
+-      // 
+-      this.cmbLayering.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbLayering.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbLayering.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbLayering.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbLayering.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbLayering.ButtonIcon")));
+-      this.cmbLayering.DrawDropdownHoverOutline = false;
+-      this.cmbLayering.DrawFocusRectangle = false;
+-      this.cmbLayering.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbLayering.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbLayering.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbLayering.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbLayering.FormattingEnabled = true;
+-      this.cmbLayering.Items.AddRange(new object[] {
++            treeNode56,
++            treeNode57});
++            this.lblName = new System.Windows.Forms.Label();
++            this.txtEventname = new DarkUI.Controls.DarkTextBox();
++            this.grpEntityOptions = new DarkUI.Controls.DarkGroupBox();
++            this.grpExtra = new DarkUI.Controls.DarkGroupBox();
++            this.chkInteractionFreeze = new DarkUI.Controls.DarkCheckBox();
++            this.chkWalkingAnimation = new DarkUI.Controls.DarkCheckBox();
++            this.chkDirectionFix = new DarkUI.Controls.DarkCheckBox();
++            this.chkHideName = new DarkUI.Controls.DarkCheckBox();
++            this.chkWalkThrough = new DarkUI.Controls.DarkCheckBox();
++            this.grpInspector = new DarkUI.Controls.DarkGroupBox();
++            this.pnlFacePreview = new System.Windows.Forms.Panel();
++            this.lblInspectorDesc = new System.Windows.Forms.Label();
++            this.txtDesc = new DarkUI.Controls.DarkTextBox();
++            this.chkDisableInspector = new DarkUI.Controls.DarkCheckBox();
++            this.cmbPreviewFace = new DarkUI.Controls.DarkComboBox();
++            this.lblFace = new System.Windows.Forms.Label();
++            this.grpPreview = new DarkUI.Controls.DarkGroupBox();
++            this.lblAnimation = new System.Windows.Forms.Label();
++            this.cmbAnimation = new DarkUI.Controls.DarkComboBox();
++            this.pnlPreview = new System.Windows.Forms.Panel();
++            this.grpMovement = new DarkUI.Controls.DarkGroupBox();
++            this.lblLayer = new System.Windows.Forms.Label();
++            this.cmbLayering = new DarkUI.Controls.DarkComboBox();
++            this.cmbEventFreq = new DarkUI.Controls.DarkComboBox();
++            this.cmbEventSpeed = new DarkUI.Controls.DarkComboBox();
++            this.lblFreq = new System.Windows.Forms.Label();
++            this.lblSpeed = new System.Windows.Forms.Label();
++            this.btnSetRoute = new DarkUI.Controls.DarkButton();
++            this.lblType = new System.Windows.Forms.Label();
++            this.cmbMoveType = new DarkUI.Controls.DarkComboBox();
++            this.grpTriggers = new DarkUI.Controls.DarkGroupBox();
++            this.txtCommand = new DarkUI.Controls.DarkTextBox();
++            this.lblCommand = new System.Windows.Forms.Label();
++            this.lblTriggerVal = new System.Windows.Forms.Label();
++            this.cmbTriggerVal = new DarkUI.Controls.DarkComboBox();
++            this.cmbTrigger = new DarkUI.Controls.DarkComboBox();
++            this.grpEventConditions = new DarkUI.Controls.DarkGroupBox();
++            this.btnEditConditions = new DarkUI.Controls.DarkButton();
++            this.grpNewCommands = new DarkUI.Controls.DarkGroupBox();
++            this.lblCloseCommands = new System.Windows.Forms.Label();
++            this.lstCommands = new System.Windows.Forms.TreeView();
++            this.grpEventCommands = new DarkUI.Controls.DarkGroupBox();
++            this.lstEventCommands = new System.Windows.Forms.ListBox();
++            this.grpCreateCommands = new DarkUI.Controls.DarkGroupBox();
++            this.btnSave = new DarkUI.Controls.DarkButton();
++            this.btnCancel = new DarkUI.Controls.DarkButton();
++            this.commandMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
++            this.btnInsert = new System.Windows.Forms.ToolStripMenuItem();
++            this.btnEdit = new System.Windows.Forms.ToolStripMenuItem();
++            this.btnCut = new System.Windows.Forms.ToolStripMenuItem();
++            this.btnCopy = new System.Windows.Forms.ToolStripMenuItem();
++            this.btnPaste = new System.Windows.Forms.ToolStripMenuItem();
++            this.btnDelete = new System.Windows.Forms.ToolStripMenuItem();
++            this.grpPageOptions = new DarkUI.Controls.DarkGroupBox();
++            this.btnClearPage = new DarkUI.Controls.DarkButton();
++            this.btnDeletePage = new DarkUI.Controls.DarkButton();
++            this.btnPastePage = new DarkUI.Controls.DarkButton();
++            this.btnCopyPage = new DarkUI.Controls.DarkButton();
++            this.btnNewPage = new DarkUI.Controls.DarkButton();
++            this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
++            this.chkIsGlobal = new DarkUI.Controls.DarkCheckBox();
++            this.pnlTabsContainer = new System.Windows.Forms.Panel();
++            this.pnlTabs = new System.Windows.Forms.Panel();
++            this.btnTabsRight = new DarkUI.Controls.DarkButton();
++            this.btnTabsLeft = new DarkUI.Controls.DarkButton();
++            this.panel1 = new System.Windows.Forms.Panel();
++            this.grpEntityOptions.SuspendLayout();
++            this.grpExtra.SuspendLayout();
++            this.grpInspector.SuspendLayout();
++            this.grpPreview.SuspendLayout();
++            this.grpMovement.SuspendLayout();
++            this.grpTriggers.SuspendLayout();
++            this.grpEventConditions.SuspendLayout();
++            this.grpNewCommands.SuspendLayout();
++            this.grpEventCommands.SuspendLayout();
++            this.commandMenu.SuspendLayout();
++            this.grpPageOptions.SuspendLayout();
++            this.grpGeneral.SuspendLayout();
++            this.pnlTabsContainer.SuspendLayout();
++            this.SuspendLayout();
++            //
++            // lblName
++            //
++            this.lblName.AutoSize = true;
++            this.lblName.Location = new System.Drawing.Point(6, 22);
++            this.lblName.Name = "lblName";
++            this.lblName.Size = new System.Drawing.Size(38, 13);
++            this.lblName.TabIndex = 1;
++            this.lblName.Text = "Name:";
++            //
++            // txtEventname
++            //
++            this.txtEventname.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.txtEventname.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.txtEventname.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
++            this.txtEventname.Location = new System.Drawing.Point(48, 19);
++            this.txtEventname.Name = "txtEventname";
++            this.txtEventname.Size = new System.Drawing.Size(124, 20);
++            this.txtEventname.TabIndex = 2;
++            this.txtEventname.TextChanged += new System.EventHandler(this.txtEventname_TextChanged);
++            //
++            // grpEntityOptions
++            //
++            this.grpEntityOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpEntityOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpEntityOptions.Controls.Add(this.grpExtra);
++            this.grpEntityOptions.Controls.Add(this.grpInspector);
++            this.grpEntityOptions.Controls.Add(this.grpPreview);
++            this.grpEntityOptions.Controls.Add(this.grpMovement);
++            this.grpEntityOptions.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpEntityOptions.Location = new System.Drawing.Point(21, 150);
++            this.grpEntityOptions.Name = "grpEntityOptions";
++            this.grpEntityOptions.Size = new System.Drawing.Size(326, 423);
++            this.grpEntityOptions.TabIndex = 12;
++            this.grpEntityOptions.TabStop = false;
++            this.grpEntityOptions.Text = "Entity Options";
++            //
++            // grpExtra
++            //
++            this.grpExtra.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpExtra.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpExtra.Controls.Add(this.chkInteractionFreeze);
++            this.grpExtra.Controls.Add(this.chkWalkingAnimation);
++            this.grpExtra.Controls.Add(this.chkDirectionFix);
++            this.grpExtra.Controls.Add(this.chkHideName);
++            this.grpExtra.Controls.Add(this.chkWalkThrough);
++            this.grpExtra.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpExtra.Location = new System.Drawing.Point(6, 297);
++            this.grpExtra.Name = "grpExtra";
++            this.grpExtra.Size = new System.Drawing.Size(315, 64);
++            this.grpExtra.TabIndex = 9;
++            this.grpExtra.TabStop = false;
++            this.grpExtra.Text = "Extra";
++            //
++            // chkInteractionFreeze
++            //
++            this.chkInteractionFreeze.AutoSize = true;
++            this.chkInteractionFreeze.Location = new System.Drawing.Point(6, 41);
++            this.chkInteractionFreeze.Name = "chkInteractionFreeze";
++            this.chkInteractionFreeze.Size = new System.Drawing.Size(111, 17);
++            this.chkInteractionFreeze.TabIndex = 6;
++            this.chkInteractionFreeze.Text = "Interaction Freeze";
++            this.chkInteractionFreeze.CheckedChanged += new System.EventHandler(this.chkInteractionFreeze_CheckedChanged);
++            //
++            // chkWalkingAnimation
++            //
++            this.chkWalkingAnimation.AutoSize = true;
++            this.chkWalkingAnimation.Location = new System.Drawing.Point(214, 19);
++            this.chkWalkingAnimation.Name = "chkWalkingAnimation";
++            this.chkWalkingAnimation.Size = new System.Drawing.Size(91, 17);
++            this.chkWalkingAnimation.TabIndex = 5;
++            this.chkWalkingAnimation.Text = "Walking Anim";
++            this.chkWalkingAnimation.CheckedChanged += new System.EventHandler(this.chkWalkingAnimation_CheckedChanged);
++            //
++            // chkDirectionFix
++            //
++            this.chkDirectionFix.AutoSize = true;
++            this.chkDirectionFix.Location = new System.Drawing.Point(156, 19);
++            this.chkDirectionFix.Name = "chkDirectionFix";
++            this.chkDirectionFix.Size = new System.Drawing.Size(55, 17);
++            this.chkDirectionFix.TabIndex = 4;
++            this.chkDirectionFix.Text = "Dir Fix";
++            this.chkDirectionFix.CheckedChanged += new System.EventHandler(this.chkDirectionFix_CheckedChanged);
++            //
++            // chkHideName
++            //
++            this.chkHideName.AutoSize = true;
++            this.chkHideName.Location = new System.Drawing.Point(75, 19);
++            this.chkHideName.Name = "chkHideName";
++            this.chkHideName.Size = new System.Drawing.Size(79, 17);
++            this.chkHideName.TabIndex = 3;
++            this.chkHideName.Text = "Hide Name";
++            this.chkHideName.CheckedChanged += new System.EventHandler(this.chkHideName_CheckedChanged);
++            //
++            // chkWalkThrough
++            //
++            this.chkWalkThrough.AutoSize = true;
++            this.chkWalkThrough.Location = new System.Drawing.Point(6, 19);
++            this.chkWalkThrough.Name = "chkWalkThrough";
++            this.chkWalkThrough.Size = new System.Drawing.Size(69, 17);
++            this.chkWalkThrough.TabIndex = 2;
++            this.chkWalkThrough.Text = "Passable";
++            this.chkWalkThrough.CheckedChanged += new System.EventHandler(this.chkWalkThrough_CheckedChanged);
++            //
++            // grpInspector
++            //
++            this.grpInspector.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpInspector.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpInspector.Controls.Add(this.pnlFacePreview);
++            this.grpInspector.Controls.Add(this.lblInspectorDesc);
++            this.grpInspector.Controls.Add(this.txtDesc);
++            this.grpInspector.Controls.Add(this.chkDisableInspector);
++            this.grpInspector.Controls.Add(this.cmbPreviewFace);
++            this.grpInspector.Controls.Add(this.lblFace);
++            this.grpInspector.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpInspector.Location = new System.Drawing.Point(6, 179);
++            this.grpInspector.Name = "grpInspector";
++            this.grpInspector.Size = new System.Drawing.Size(316, 117);
++            this.grpInspector.TabIndex = 7;
++            this.grpInspector.TabStop = false;
++            this.grpInspector.Text = "Entity Inspector Options";
++            //
++            // pnlFacePreview
++            //
++            this.pnlFacePreview.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
++            this.pnlFacePreview.Location = new System.Drawing.Point(9, 46);
++            this.pnlFacePreview.Name = "pnlFacePreview";
++            this.pnlFacePreview.Size = new System.Drawing.Size(64, 64);
++            this.pnlFacePreview.TabIndex = 12;
++            //
++            // lblInspectorDesc
++            //
++            this.lblInspectorDesc.Location = new System.Drawing.Point(79, 42);
++            this.lblInspectorDesc.Name = "lblInspectorDesc";
++            this.lblInspectorDesc.Size = new System.Drawing.Size(112, 19);
++            this.lblInspectorDesc.TabIndex = 11;
++            this.lblInspectorDesc.Text = "Inspector Description:";
++            //
++            // txtDesc
++            //
++            this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
++            this.txtDesc.Location = new System.Drawing.Point(79, 61);
++            this.txtDesc.Multiline = true;
++            this.txtDesc.Name = "txtDesc";
++            this.txtDesc.Size = new System.Drawing.Size(231, 50);
++            this.txtDesc.TabIndex = 0;
++            this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
++            //
++            // chkDisableInspector
++            //
++            this.chkDisableInspector.Location = new System.Drawing.Point(204, 15);
++            this.chkDisableInspector.Name = "chkDisableInspector";
++            this.chkDisableInspector.Size = new System.Drawing.Size(107, 21);
++            this.chkDisableInspector.TabIndex = 4;
++            this.chkDisableInspector.Text = "Disable Inspector";
++            this.chkDisableInspector.CheckedChanged += new System.EventHandler(this.chkDisablePreview_CheckedChanged);
++            //
++            // cmbPreviewFace
++            //
++            this.cmbPreviewFace.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbPreviewFace.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbPreviewFace.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbPreviewFace.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbPreviewFace.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbPreviewFace.ButtonIcon")));
++            this.cmbPreviewFace.DrawDropdownHoverOutline = false;
++            this.cmbPreviewFace.DrawFocusRectangle = false;
++            this.cmbPreviewFace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbPreviewFace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbPreviewFace.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbPreviewFace.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbPreviewFace.FormattingEnabled = true;
++            this.cmbPreviewFace.Location = new System.Drawing.Point(46, 15);
++            this.cmbPreviewFace.Name = "cmbPreviewFace";
++            this.cmbPreviewFace.Size = new System.Drawing.Size(114, 21);
++            this.cmbPreviewFace.TabIndex = 10;
++            this.cmbPreviewFace.Text = null;
++            this.cmbPreviewFace.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbPreviewFace.SelectedIndexChanged += new System.EventHandler(this.cmbPreviewFace_SelectedIndexChanged);
++            //
++            // lblFace
++            //
++            this.lblFace.AutoSize = true;
++            this.lblFace.Location = new System.Drawing.Point(6, 18);
++            this.lblFace.Name = "lblFace";
++            this.lblFace.Size = new System.Drawing.Size(34, 13);
++            this.lblFace.TabIndex = 9;
++            this.lblFace.Text = "Face:";
++            //
++            // grpPreview
++            //
++            this.grpPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpPreview.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpPreview.Controls.Add(this.lblAnimation);
++            this.grpPreview.Controls.Add(this.cmbAnimation);
++            this.grpPreview.Controls.Add(this.pnlPreview);
++            this.grpPreview.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpPreview.Location = new System.Drawing.Point(6, 13);
++            this.grpPreview.Name = "grpPreview";
++            this.grpPreview.Size = new System.Drawing.Size(160, 163);
++            this.grpPreview.TabIndex = 10;
++            this.grpPreview.TabStop = false;
++            this.grpPreview.Text = "Preview";
++            //
++            // lblAnimation
++            //
++            this.lblAnimation.AutoSize = true;
++            this.lblAnimation.Location = new System.Drawing.Point(4, 116);
++            this.lblAnimation.Name = "lblAnimation";
++            this.lblAnimation.Size = new System.Drawing.Size(56, 13);
++            this.lblAnimation.TabIndex = 2;
++            this.lblAnimation.Text = "Animation:";
++            //
++            // cmbAnimation
++            //
++            this.cmbAnimation.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbAnimation.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbAnimation.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbAnimation.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbAnimation.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAnimation.ButtonIcon")));
++            this.cmbAnimation.DrawDropdownHoverOutline = false;
++            this.cmbAnimation.DrawFocusRectangle = false;
++            this.cmbAnimation.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbAnimation.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbAnimation.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbAnimation.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbAnimation.FormattingEnabled = true;
++            this.cmbAnimation.Location = new System.Drawing.Point(20, 132);
++            this.cmbAnimation.Name = "cmbAnimation";
++            this.cmbAnimation.Size = new System.Drawing.Size(125, 21);
++            this.cmbAnimation.TabIndex = 1;
++            this.cmbAnimation.Text = null;
++            this.cmbAnimation.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbAnimation.SelectedIndexChanged += new System.EventHandler(this.cmbAnimation_SelectedIndexChanged);
++            //
++            // pnlPreview
++            //
++            this.pnlPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.pnlPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.pnlPreview.Location = new System.Drawing.Point(33, 14);
++            this.pnlPreview.Name = "pnlPreview";
++            this.pnlPreview.Size = new System.Drawing.Size(96, 96);
++            this.pnlPreview.TabIndex = 0;
++            this.pnlPreview.DoubleClick += new System.EventHandler(this.pnlPreview_DoubleClick);
++            //
++            // grpMovement
++            //
++            this.grpMovement.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpMovement.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpMovement.Controls.Add(this.lblLayer);
++            this.grpMovement.Controls.Add(this.cmbLayering);
++            this.grpMovement.Controls.Add(this.cmbEventFreq);
++            this.grpMovement.Controls.Add(this.cmbEventSpeed);
++            this.grpMovement.Controls.Add(this.lblFreq);
++            this.grpMovement.Controls.Add(this.lblSpeed);
++            this.grpMovement.Controls.Add(this.btnSetRoute);
++            this.grpMovement.Controls.Add(this.lblType);
++            this.grpMovement.Controls.Add(this.cmbMoveType);
++            this.grpMovement.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpMovement.Location = new System.Drawing.Point(169, 13);
++            this.grpMovement.Name = "grpMovement";
++            this.grpMovement.Size = new System.Drawing.Size(154, 163);
++            this.grpMovement.TabIndex = 8;
++            this.grpMovement.TabStop = false;
++            this.grpMovement.Text = "Movement";
++            //
++            // lblLayer
++            //
++            this.lblLayer.AutoSize = true;
++            this.lblLayer.Location = new System.Drawing.Point(6, 134);
++            this.lblLayer.Name = "lblLayer";
++            this.lblLayer.Size = new System.Drawing.Size(36, 13);
++            this.lblLayer.TabIndex = 7;
++            this.lblLayer.Text = "Layer:";
++            //
++            // cmbLayering
++            //
++            this.cmbLayering.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbLayering.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbLayering.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbLayering.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbLayering.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbLayering.ButtonIcon")));
++            this.cmbLayering.DrawDropdownHoverOutline = false;
++            this.cmbLayering.DrawFocusRectangle = false;
++            this.cmbLayering.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbLayering.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbLayering.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbLayering.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbLayering.FormattingEnabled = true;
++            this.cmbLayering.Items.AddRange(new object[] {
+             "Below Player",
+             "Same as Player",
+             "Above Player"});
+-      this.cmbLayering.Location = new System.Drawing.Point(48, 131);
+-      this.cmbLayering.Name = "cmbLayering";
+-      this.cmbLayering.Size = new System.Drawing.Size(101, 21);
+-      this.cmbLayering.TabIndex = 1;
+-      this.cmbLayering.Text = "Below Player";
+-      this.cmbLayering.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbLayering.SelectedIndexChanged += new System.EventHandler(this.cmbLayering_SelectedIndexChanged);
+-      // 
+-      // cmbEventFreq
+-      // 
+-      this.cmbEventFreq.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbEventFreq.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbEventFreq.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbEventFreq.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbEventFreq.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventFreq.ButtonIcon")));
+-      this.cmbEventFreq.DrawDropdownHoverOutline = false;
+-      this.cmbEventFreq.DrawFocusRectangle = false;
+-      this.cmbEventFreq.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbEventFreq.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbEventFreq.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbEventFreq.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbEventFreq.FormattingEnabled = true;
+-      this.cmbEventFreq.Items.AddRange(new object[] {
++            this.cmbLayering.Location = new System.Drawing.Point(48, 131);
++            this.cmbLayering.Name = "cmbLayering";
++            this.cmbLayering.Size = new System.Drawing.Size(101, 21);
++            this.cmbLayering.TabIndex = 1;
++            this.cmbLayering.Text = "Below Player";
++            this.cmbLayering.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbLayering.SelectedIndexChanged += new System.EventHandler(this.cmbLayering_SelectedIndexChanged);
++            //
++            // cmbEventFreq
++            //
++            this.cmbEventFreq.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbEventFreq.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbEventFreq.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbEventFreq.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbEventFreq.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventFreq.ButtonIcon")));
++            this.cmbEventFreq.DrawDropdownHoverOutline = false;
++            this.cmbEventFreq.DrawFocusRectangle = false;
++            this.cmbEventFreq.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbEventFreq.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbEventFreq.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbEventFreq.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbEventFreq.FormattingEnabled = true;
++            this.cmbEventFreq.Items.AddRange(new object[] {
+             "Not Very Often",
+             "Not Often",
+             "Normal",
+             "Often",
+             "Very Often"});
+-      this.cmbEventFreq.Location = new System.Drawing.Point(48, 104);
+-      this.cmbEventFreq.Name = "cmbEventFreq";
+-      this.cmbEventFreq.Size = new System.Drawing.Size(100, 21);
+-      this.cmbEventFreq.TabIndex = 6;
+-      this.cmbEventFreq.Text = "Not Very Often";
+-      this.cmbEventFreq.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbEventFreq.SelectedIndexChanged += new System.EventHandler(this.cmbEventFreq_SelectedIndexChanged);
+-      // 
+-      // cmbEventSpeed
+-      // 
+-      this.cmbEventSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbEventSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbEventSpeed.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbEventSpeed.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbEventSpeed.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventSpeed.ButtonIcon")));
+-      this.cmbEventSpeed.DrawDropdownHoverOutline = false;
+-      this.cmbEventSpeed.DrawFocusRectangle = false;
+-      this.cmbEventSpeed.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbEventSpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbEventSpeed.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbEventSpeed.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbEventSpeed.FormattingEnabled = true;
+-      this.cmbEventSpeed.Items.AddRange(new object[] {
++            this.cmbEventFreq.Location = new System.Drawing.Point(48, 104);
++            this.cmbEventFreq.Name = "cmbEventFreq";
++            this.cmbEventFreq.Size = new System.Drawing.Size(100, 21);
++            this.cmbEventFreq.TabIndex = 6;
++            this.cmbEventFreq.Text = "Not Very Often";
++            this.cmbEventFreq.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbEventFreq.SelectedIndexChanged += new System.EventHandler(this.cmbEventFreq_SelectedIndexChanged);
++            //
++            // cmbEventSpeed
++            //
++            this.cmbEventSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbEventSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbEventSpeed.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbEventSpeed.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbEventSpeed.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventSpeed.ButtonIcon")));
++            this.cmbEventSpeed.DrawDropdownHoverOutline = false;
++            this.cmbEventSpeed.DrawFocusRectangle = false;
++            this.cmbEventSpeed.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbEventSpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbEventSpeed.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbEventSpeed.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbEventSpeed.FormattingEnabled = true;
++            this.cmbEventSpeed.Items.AddRange(new object[] {
+             "Slowest",
+             "Slower",
+             "Normal",
+             "Faster",
+             "Fastest"});
+-      this.cmbEventSpeed.Location = new System.Drawing.Point(48, 77);
+-      this.cmbEventSpeed.Name = "cmbEventSpeed";
+-      this.cmbEventSpeed.Size = new System.Drawing.Size(100, 21);
+-      this.cmbEventSpeed.TabIndex = 5;
+-      this.cmbEventSpeed.Text = "Slowest";
+-      this.cmbEventSpeed.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbEventSpeed.SelectedIndexChanged += new System.EventHandler(this.cmbEventSpeed_SelectedIndexChanged);
+-      // 
+-      // lblFreq
+-      // 
+-      this.lblFreq.AutoSize = true;
+-      this.lblFreq.Location = new System.Drawing.Point(6, 107);
+-      this.lblFreq.Name = "lblFreq";
+-      this.lblFreq.Size = new System.Drawing.Size(31, 13);
+-      this.lblFreq.TabIndex = 4;
+-      this.lblFreq.Text = "Freq:";
+-      // 
+-      // lblSpeed
+-      // 
+-      this.lblSpeed.AutoSize = true;
+-      this.lblSpeed.Location = new System.Drawing.Point(6, 80);
+-      this.lblSpeed.Name = "lblSpeed";
+-      this.lblSpeed.Size = new System.Drawing.Size(41, 13);
+-      this.lblSpeed.TabIndex = 3;
+-      this.lblSpeed.Text = "Speed:";
+-      // 
+-      // btnSetRoute
+-      // 
+-      this.btnSetRoute.Enabled = false;
+-      this.btnSetRoute.Location = new System.Drawing.Point(73, 43);
+-      this.btnSetRoute.Name = "btnSetRoute";
+-      this.btnSetRoute.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnSetRoute.Size = new System.Drawing.Size(75, 23);
+-      this.btnSetRoute.TabIndex = 2;
+-      this.btnSetRoute.Text = "Set Route....";
+-      this.btnSetRoute.Click += new System.EventHandler(this.btnSetRoute_Click);
+-      // 
+-      // lblType
+-      // 
+-      this.lblType.AutoSize = true;
+-      this.lblType.Location = new System.Drawing.Point(6, 22);
+-      this.lblType.Name = "lblType";
+-      this.lblType.Size = new System.Drawing.Size(34, 13);
+-      this.lblType.TabIndex = 1;
+-      this.lblType.Text = "Type:";
+-      // 
+-      // cmbMoveType
+-      // 
+-      this.cmbMoveType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbMoveType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbMoveType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbMoveType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbMoveType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbMoveType.ButtonIcon")));
+-      this.cmbMoveType.DrawDropdownHoverOutline = false;
+-      this.cmbMoveType.DrawFocusRectangle = false;
+-      this.cmbMoveType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbMoveType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbMoveType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbMoveType.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbMoveType.FormattingEnabled = true;
+-      this.cmbMoveType.Items.AddRange(new object[] {
++            this.cmbEventSpeed.Location = new System.Drawing.Point(48, 77);
++            this.cmbEventSpeed.Name = "cmbEventSpeed";
++            this.cmbEventSpeed.Size = new System.Drawing.Size(100, 21);
++            this.cmbEventSpeed.TabIndex = 5;
++            this.cmbEventSpeed.Text = "Slowest";
++            this.cmbEventSpeed.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbEventSpeed.SelectedIndexChanged += new System.EventHandler(this.cmbEventSpeed_SelectedIndexChanged);
++            //
++            // lblFreq
++            //
++            this.lblFreq.AutoSize = true;
++            this.lblFreq.Location = new System.Drawing.Point(6, 107);
++            this.lblFreq.Name = "lblFreq";
++            this.lblFreq.Size = new System.Drawing.Size(31, 13);
++            this.lblFreq.TabIndex = 4;
++            this.lblFreq.Text = "Freq:";
++            //
++            // lblSpeed
++            //
++            this.lblSpeed.AutoSize = true;
++            this.lblSpeed.Location = new System.Drawing.Point(6, 80);
++            this.lblSpeed.Name = "lblSpeed";
++            this.lblSpeed.Size = new System.Drawing.Size(41, 13);
++            this.lblSpeed.TabIndex = 3;
++            this.lblSpeed.Text = "Speed:";
++            //
++            // btnSetRoute
++            //
++            this.btnSetRoute.Enabled = false;
++            this.btnSetRoute.Location = new System.Drawing.Point(73, 43);
++            this.btnSetRoute.Name = "btnSetRoute";
++            this.btnSetRoute.Padding = new System.Windows.Forms.Padding(5);
++            this.btnSetRoute.Size = new System.Drawing.Size(75, 23);
++            this.btnSetRoute.TabIndex = 2;
++            this.btnSetRoute.Text = "Set Route....";
++            this.btnSetRoute.Click += new System.EventHandler(this.btnSetRoute_Click);
++            //
++            // lblType
++            //
++            this.lblType.AutoSize = true;
++            this.lblType.Location = new System.Drawing.Point(6, 22);
++            this.lblType.Name = "lblType";
++            this.lblType.Size = new System.Drawing.Size(34, 13);
++            this.lblType.TabIndex = 1;
++            this.lblType.Text = "Type:";
++            //
++            // cmbMoveType
++            //
++            this.cmbMoveType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbMoveType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbMoveType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbMoveType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbMoveType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbMoveType.ButtonIcon")));
++            this.cmbMoveType.DrawDropdownHoverOutline = false;
++            this.cmbMoveType.DrawFocusRectangle = false;
++            this.cmbMoveType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbMoveType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbMoveType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbMoveType.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbMoveType.FormattingEnabled = true;
++            this.cmbMoveType.Items.AddRange(new object[] {
+             "None",
+             "Random",
+             "Move Route"});
+-      this.cmbMoveType.Location = new System.Drawing.Point(48, 19);
+-      this.cmbMoveType.Name = "cmbMoveType";
+-      this.cmbMoveType.Size = new System.Drawing.Size(100, 21);
+-      this.cmbMoveType.TabIndex = 0;
+-      this.cmbMoveType.Text = "None";
+-      this.cmbMoveType.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbMoveType.SelectedIndexChanged += new System.EventHandler(this.cmbMoveType_SelectedIndexChanged);
+-      // 
+-      // grpTriggers
+-      // 
+-      this.grpTriggers.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpTriggers.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpTriggers.Controls.Add(this.txtCommand);
+-      this.grpTriggers.Controls.Add(this.lblCommand);
+-      this.grpTriggers.Controls.Add(this.lblTriggerVal);
+-      this.grpTriggers.Controls.Add(this.cmbTriggerVal);
+-      this.grpTriggers.Controls.Add(this.cmbTrigger);
+-      this.grpTriggers.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpTriggers.Location = new System.Drawing.Point(25, 517);
+-      this.grpTriggers.Name = "grpTriggers";
+-      this.grpTriggers.Size = new System.Drawing.Size(317, 44);
+-      this.grpTriggers.TabIndex = 21;
+-      this.grpTriggers.TabStop = false;
+-      this.grpTriggers.Text = "Trigger";
+-      // 
+-      // txtCommand
+-      // 
+-      this.txtCommand.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.txtCommand.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.txtCommand.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+-      this.txtCommand.Location = new System.Drawing.Point(181, 13);
+-      this.txtCommand.Name = "txtCommand";
+-      this.txtCommand.Size = new System.Drawing.Size(130, 20);
+-      this.txtCommand.TabIndex = 12;
+-      this.txtCommand.Visible = false;
+-      this.txtCommand.TextChanged += new System.EventHandler(this.txtCommand_TextChanged);
+-      // 
+-      // lblCommand
+-      // 
+-      this.lblCommand.AutoSize = true;
+-      this.lblCommand.Location = new System.Drawing.Point(113, 17);
+-      this.lblCommand.Name = "lblCommand";
+-      this.lblCommand.Size = new System.Drawing.Size(70, 13);
+-      this.lblCommand.TabIndex = 11;
+-      this.lblCommand.Text = "/Command: /";
+-      this.lblCommand.Visible = false;
+-      // 
+-      // lblTriggerVal
+-      // 
+-      this.lblTriggerVal.AutoSize = true;
+-      this.lblTriggerVal.Location = new System.Drawing.Point(113, 17);
+-      this.lblTriggerVal.Name = "lblTriggerVal";
+-      this.lblTriggerVal.Size = new System.Drawing.Size(53, 13);
+-      this.lblTriggerVal.TabIndex = 10;
+-      this.lblTriggerVal.Text = "Projectile:";
+-      this.lblTriggerVal.Visible = false;
+-      // 
+-      // cmbTriggerVal
+-      // 
+-      this.cmbTriggerVal.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbTriggerVal.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbTriggerVal.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbTriggerVal.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbTriggerVal.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTriggerVal.ButtonIcon")));
+-      this.cmbTriggerVal.DrawDropdownHoverOutline = false;
+-      this.cmbTriggerVal.DrawFocusRectangle = false;
+-      this.cmbTriggerVal.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbTriggerVal.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbTriggerVal.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbTriggerVal.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbTriggerVal.FormattingEnabled = true;
+-      this.cmbTriggerVal.Items.AddRange(new object[] {
++            this.cmbMoveType.Location = new System.Drawing.Point(48, 19);
++            this.cmbMoveType.Name = "cmbMoveType";
++            this.cmbMoveType.Size = new System.Drawing.Size(100, 21);
++            this.cmbMoveType.TabIndex = 0;
++            this.cmbMoveType.Text = "None";
++            this.cmbMoveType.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbMoveType.SelectedIndexChanged += new System.EventHandler(this.cmbMoveType_SelectedIndexChanged);
++            //
++            // grpTriggers
++            //
++            this.grpTriggers.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpTriggers.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpTriggers.Controls.Add(this.txtCommand);
++            this.grpTriggers.Controls.Add(this.lblCommand);
++            this.grpTriggers.Controls.Add(this.lblTriggerVal);
++            this.grpTriggers.Controls.Add(this.cmbTriggerVal);
++            this.grpTriggers.Controls.Add(this.cmbTrigger);
++            this.grpTriggers.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpTriggers.Location = new System.Drawing.Point(25, 517);
++            this.grpTriggers.Name = "grpTriggers";
++            this.grpTriggers.Size = new System.Drawing.Size(317, 44);
++            this.grpTriggers.TabIndex = 21;
++            this.grpTriggers.TabStop = false;
++            this.grpTriggers.Text = "Trigger";
++            //
++            // txtCommand
++            //
++            this.txtCommand.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.txtCommand.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.txtCommand.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
++            this.txtCommand.Location = new System.Drawing.Point(181, 13);
++            this.txtCommand.Name = "txtCommand";
++            this.txtCommand.Size = new System.Drawing.Size(130, 20);
++            this.txtCommand.TabIndex = 12;
++            this.txtCommand.Visible = false;
++            this.txtCommand.TextChanged += new System.EventHandler(this.txtCommand_TextChanged);
++            //
++            // lblCommand
++            //
++            this.lblCommand.AutoSize = true;
++            this.lblCommand.Location = new System.Drawing.Point(113, 17);
++            this.lblCommand.Name = "lblCommand";
++            this.lblCommand.Size = new System.Drawing.Size(70, 13);
++            this.lblCommand.TabIndex = 11;
++            this.lblCommand.Text = "/Command: /";
++            this.lblCommand.Visible = false;
++            //
++            // lblTriggerVal
++            //
++            this.lblTriggerVal.AutoSize = true;
++            this.lblTriggerVal.Location = new System.Drawing.Point(113, 17);
++            this.lblTriggerVal.Name = "lblTriggerVal";
++            this.lblTriggerVal.Size = new System.Drawing.Size(53, 13);
++            this.lblTriggerVal.TabIndex = 10;
++            this.lblTriggerVal.Text = "Projectile:";
++            this.lblTriggerVal.Visible = false;
++            //
++            // cmbTriggerVal
++            //
++            this.cmbTriggerVal.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbTriggerVal.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbTriggerVal.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbTriggerVal.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbTriggerVal.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTriggerVal.ButtonIcon")));
++            this.cmbTriggerVal.DrawDropdownHoverOutline = false;
++            this.cmbTriggerVal.DrawFocusRectangle = false;
++            this.cmbTriggerVal.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbTriggerVal.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbTriggerVal.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbTriggerVal.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbTriggerVal.FormattingEnabled = true;
++            this.cmbTriggerVal.Items.AddRange(new object[] {
+             "None"});
+-      this.cmbTriggerVal.Location = new System.Drawing.Point(181, 13);
+-      this.cmbTriggerVal.Name = "cmbTriggerVal";
+-      this.cmbTriggerVal.Size = new System.Drawing.Size(130, 21);
+-      this.cmbTriggerVal.TabIndex = 9;
+-      this.cmbTriggerVal.Text = "None";
+-      this.cmbTriggerVal.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbTriggerVal.Visible = false;
+-      // 
+-      // cmbTrigger
+-      // 
+-      this.cmbTrigger.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-      this.cmbTrigger.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.cmbTrigger.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-      this.cmbTrigger.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-      this.cmbTrigger.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTrigger.ButtonIcon")));
+-      this.cmbTrigger.DrawDropdownHoverOutline = false;
+-      this.cmbTrigger.DrawFocusRectangle = false;
+-      this.cmbTrigger.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-      this.cmbTrigger.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-      this.cmbTrigger.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-      this.cmbTrigger.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.cmbTrigger.FormattingEnabled = true;
+-      this.cmbTrigger.Items.AddRange(new object[] {
++            this.cmbTriggerVal.Location = new System.Drawing.Point(181, 13);
++            this.cmbTriggerVal.Name = "cmbTriggerVal";
++            this.cmbTriggerVal.Size = new System.Drawing.Size(130, 21);
++            this.cmbTriggerVal.TabIndex = 9;
++            this.cmbTriggerVal.Text = "None";
++            this.cmbTriggerVal.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbTriggerVal.Visible = false;
++            //
++            // cmbTrigger
++            //
++            this.cmbTrigger.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbTrigger.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbTrigger.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbTrigger.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbTrigger.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTrigger.ButtonIcon")));
++            this.cmbTrigger.DrawDropdownHoverOutline = false;
++            this.cmbTrigger.DrawFocusRectangle = false;
++            this.cmbTrigger.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbTrigger.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbTrigger.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbTrigger.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbTrigger.FormattingEnabled = true;
++            this.cmbTrigger.Items.AddRange(new object[] {
+             "Action Button",
+             "Player Touch",
+             "Autorun",
+             "Projectile Hit"});
+-      this.cmbTrigger.Location = new System.Drawing.Point(6, 13);
+-      this.cmbTrigger.Name = "cmbTrigger";
+-      this.cmbTrigger.Size = new System.Drawing.Size(101, 21);
+-      this.cmbTrigger.TabIndex = 2;
+-      this.cmbTrigger.Text = "Action Button";
+-      this.cmbTrigger.TextPadding = new System.Windows.Forms.Padding(2);
+-      this.cmbTrigger.SelectedIndexChanged += new System.EventHandler(this.cmbTrigger_SelectedIndexChanged);
+-      // 
+-      // grpEventConditions
+-      // 
+-      this.grpEventConditions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpEventConditions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpEventConditions.Controls.Add(this.btnEditConditions);
+-      this.grpEventConditions.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpEventConditions.Location = new System.Drawing.Point(21, 89);
+-      this.grpEventConditions.Name = "grpEventConditions";
+-      this.grpEventConditions.Size = new System.Drawing.Size(326, 55);
+-      this.grpEventConditions.TabIndex = 5;
+-      this.grpEventConditions.TabStop = false;
+-      this.grpEventConditions.Text = "Conditions";
+-      // 
+-      // btnEditConditions
+-      // 
+-      this.btnEditConditions.Location = new System.Drawing.Point(7, 20);
+-      this.btnEditConditions.Name = "btnEditConditions";
+-      this.btnEditConditions.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnEditConditions.Size = new System.Drawing.Size(304, 23);
+-      this.btnEditConditions.TabIndex = 0;
+-      this.btnEditConditions.Text = "Spawn/Execution Conditions";
+-      this.btnEditConditions.Click += new System.EventHandler(this.btnEditConditions_Click);
+-      // 
+-      // grpNewCommands
+-      // 
+-      this.grpNewCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpNewCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpNewCommands.Controls.Add(this.lblCloseCommands);
+-      this.grpNewCommands.Controls.Add(this.lstCommands);
+-      this.grpNewCommands.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpNewCommands.Location = new System.Drawing.Point(353, 89);
+-      this.grpNewCommands.Name = "grpNewCommands";
+-      this.grpNewCommands.Size = new System.Drawing.Size(457, 484);
+-      this.grpNewCommands.TabIndex = 7;
+-      this.grpNewCommands.TabStop = false;
+-      this.grpNewCommands.Text = "Add Commands";
+-      this.grpNewCommands.Visible = false;
+-      // 
+-      // lblCloseCommands
+-      // 
+-      this.lblCloseCommands.AutoSize = true;
+-      this.lblCloseCommands.Location = new System.Drawing.Point(437, 14);
+-      this.lblCloseCommands.Name = "lblCloseCommands";
+-      this.lblCloseCommands.Size = new System.Drawing.Size(14, 13);
+-      this.lblCloseCommands.TabIndex = 1;
+-      this.lblCloseCommands.Text = "X";
+-      this.lblCloseCommands.Click += new System.EventHandler(this.lblCloseCommands_Click);
+-      // 
+-      // lstCommands
+-      // 
+-      this.lstCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+-      this.lstCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.lstCommands.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.lstCommands.LineColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(150)))));
+-      this.lstCommands.Location = new System.Drawing.Point(6, 32);
+-      this.lstCommands.Name = "lstCommands";
+-      treeNode1.Name = "showtext";
+-      treeNode1.Tag = "1";
+-      treeNode1.Text = "Show Text";
+-      treeNode2.Name = "showoptions";
+-      treeNode2.Tag = "2";
+-      treeNode2.Text = "Show Options";
+-      treeNode3.Name = "inputvariable";
+-      treeNode3.Tag = "49";
+-      treeNode3.Text = "Input Variable";
+-      treeNode4.Name = "addchatboxtext";
+-      treeNode4.Tag = "3";
+-      treeNode4.Text = "Add Chatbox Text";
+-      treeNode5.Name = "dialogue";
+-      treeNode5.Text = "Dialogue";
+-      treeNode6.Name = "setvariable";
+-      treeNode6.Tag = "5";
+-      treeNode6.Text = "Set Variable";
+-      treeNode7.Name = "setselfswitch";
+-      treeNode7.Tag = "6";
+-      treeNode7.Text = "Set Self Switch";
+-      treeNode8.Name = "conditionalbranch";
+-      treeNode8.Tag = "7";
+-      treeNode8.Text = "Conditional Branch";
+-      treeNode9.Name = "exiteventprocess";
+-      treeNode9.Tag = "8";
+-      treeNode9.Text = "Exit Event Process";
+-      treeNode10.Name = "label";
+-      treeNode10.Tag = "9";
+-      treeNode10.Text = "Label";
+-      treeNode11.Name = "gotolabel";
+-      treeNode11.Tag = "10";
+-      treeNode11.Text = "Go To Label";
+-      treeNode12.Name = "startcommonevent";
+-      treeNode12.Tag = "11";
+-      treeNode12.Text = "Start Common Event";
+-      treeNode13.Name = "logicflow";
+-      treeNode13.Text = "Logic Flow";
+-      treeNode14.Name = "restorehp";
+-      treeNode14.Tag = "12";
+-      treeNode14.Text = "Restore HP";
+-      treeNode15.Name = "restoremp";
+-      treeNode15.Tag = "13";
+-      treeNode15.Text = "Restore MP";
+-      treeNode16.Name = "levelup";
+-      treeNode16.Tag = "14";
+-      treeNode16.Text = "Level Up";
+-      treeNode17.Name = "giveexperience";
+-      treeNode17.Tag = "15";
+-      treeNode17.Text = "Give Experience";
+-      treeNode18.Name = "changelevel";
+-      treeNode18.Tag = "16";
+-      treeNode18.Text = "Change Level";
+-      treeNode19.Name = "changespells";
+-      treeNode19.Tag = "17";
+-      treeNode19.Text = "Change Spells";
+-      treeNode20.Name = "changeitems";
+-      treeNode20.Tag = "18";
+-      treeNode20.Text = "Change Items";
+-      treeNode21.Name = "changesprite";
+-      treeNode21.Tag = "19";
+-      treeNode21.Text = "Change Sprite";
+-      treeNode22.Name = "changeface";
+-      treeNode22.Tag = "20";
+-      treeNode22.Text = "Change Face";
+-      treeNode23.Name = "changegender";
+-      treeNode23.Tag = "21";
+-      treeNode23.Text = "Change Gender";
+-      treeNode24.Name = "setaccess";
+-      treeNode24.Tag = "22";
+-      treeNode24.Text = "Set Access";
+-      treeNode25.Name = "changeclass";
+-      treeNode25.Tag = "38";
+-      treeNode25.Text = "Change Class";
+-      treeNode26.Name = "equipitem";
+-      treeNode26.Tag = "47";
+-      treeNode26.Text = "Equip Item";
+-      treeNode27.Name = "changenamecolor";
+-      treeNode27.Tag = "48";
+-      treeNode27.Text = "Change Name Color";
+-      treeNode28.Name = "changeplayerlabel";
+-      treeNode28.Tag = "50";
+-      treeNode28.Text = "Change Player Label";
+-      treeNode29.Name = "playercontrol";
+-      treeNode29.Text = "Player Control";
+-      treeNode30.Name = "warpplayer";
+-      treeNode30.Tag = "23";
+-      treeNode30.Text = "Warp Player";
+-      treeNode31.Name = "setmoveroute";
+-      treeNode31.Tag = "24";
+-      treeNode31.Text = "Set Move Route";
+-      treeNode32.Name = "waitmoveroute";
+-      treeNode32.Tag = "25";
+-      treeNode32.Text = "Wait for Route Completion";
+-      treeNode33.Name = "holdplayer";
+-      treeNode33.Tag = "26";
+-      treeNode33.Text = "Hold Player";
+-      treeNode34.Name = "releaseplayer";
+-      treeNode34.Tag = "27";
+-      treeNode34.Text = "Release Player";
+-      treeNode35.Name = "spawnnpc";
+-      treeNode35.Tag = "28";
+-      treeNode35.Text = "Spawn NPC";
+-      treeNode36.Name = "despawnnpcs";
+-      treeNode36.Tag = "39";
+-      treeNode36.Text = "Despawn NPC";
+-      treeNode37.Name = "hideplayer";
+-      treeNode37.Tag = "45";
+-      treeNode37.Text = "Hide Player";
+-      treeNode38.Name = "showplayer";
+-      treeNode38.Tag = "46";
+-      treeNode38.Text = "Show Player";
+-      treeNode39.Name = "movement";
+-      treeNode39.Text = "Movement";
+-      treeNode40.Name = "playanimation";
+-      treeNode40.Tag = "29";
+-      treeNode40.Text = "Play Animation";
+-      treeNode41.Name = "playbgm";
+-      treeNode41.Tag = "30";
+-      treeNode41.Text = "Play BGM";
+-      treeNode42.Name = "fadeoutbgm";
+-      treeNode42.Tag = "31";
+-      treeNode42.Text = "Fadeout BGM";
+-      treeNode43.Name = "playsound";
+-      treeNode43.Tag = "32";
+-      treeNode43.Text = "Play Sound";
+-      treeNode44.Name = "stopsounds";
+-      treeNode44.Tag = "33";
+-      treeNode44.Text = "Stop Sounds";
+-      treeNode45.Name = "showpicture";
+-      treeNode45.Tag = "43";
+-      treeNode45.Text = "Show Picture";
+-      treeNode46.Name = "hidepicture";
+-      treeNode46.Tag = "44";
+-      treeNode46.Text = "Hide Picture";
+-      treeNode47.Name = "specialeffects";
+-      treeNode47.Text = "Special Effects";
+-      treeNode48.Name = "startquest";
+-      treeNode48.Tag = "40";
+-      treeNode48.Text = "Start Quest";
+-      treeNode49.Name = "completequesttask";
+-      treeNode49.Tag = "41";
+-      treeNode49.Text = "Complete Quest Task";
+-      treeNode50.Name = "endquest";
+-      treeNode50.Tag = "42";
+-      treeNode50.Text = "End Quest";
+-      treeNode51.Name = "questcontrol";
+-      treeNode51.Text = "Quest Control";
+-      treeNode52.Name = "wait";
+-      treeNode52.Tag = "34";
+-      treeNode52.Text = "Wait...";
+-      treeNode53.Name = "etc";
+-      treeNode53.Text = "Etc";
+-      treeNode54.Name = "openbank";
+-      treeNode54.Tag = "35";
+-      treeNode54.Text = "Open Bank";
+-      treeNode55.Name = "openshop";
+-      treeNode55.Tag = "36";
+-      treeNode55.Text = "Open Shop";
+-      treeNode56.Name = "opencraftingstation";
+-      treeNode56.Tag = "37";
+-      treeNode56.Text = "Open Crafting Station";
+-      treeNode57.Name = "shopandbank";
+-      treeNode57.Text = "Shop and Bank";
+-      this.lstCommands.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {
++            this.cmbTrigger.Location = new System.Drawing.Point(6, 13);
++            this.cmbTrigger.Name = "cmbTrigger";
++            this.cmbTrigger.Size = new System.Drawing.Size(101, 21);
++            this.cmbTrigger.TabIndex = 2;
++            this.cmbTrigger.Text = "Action Button";
++            this.cmbTrigger.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbTrigger.SelectedIndexChanged += new System.EventHandler(this.cmbTrigger_SelectedIndexChanged);
++            //
++            // grpEventConditions
++            //
++            this.grpEventConditions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpEventConditions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpEventConditions.Controls.Add(this.btnEditConditions);
++            this.grpEventConditions.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpEventConditions.Location = new System.Drawing.Point(21, 89);
++            this.grpEventConditions.Name = "grpEventConditions";
++            this.grpEventConditions.Size = new System.Drawing.Size(326, 55);
++            this.grpEventConditions.TabIndex = 5;
++            this.grpEventConditions.TabStop = false;
++            this.grpEventConditions.Text = "Conditions";
++            //
++            // btnEditConditions
++            //
++            this.btnEditConditions.Location = new System.Drawing.Point(7, 20);
++            this.btnEditConditions.Name = "btnEditConditions";
++            this.btnEditConditions.Padding = new System.Windows.Forms.Padding(5);
++            this.btnEditConditions.Size = new System.Drawing.Size(304, 23);
++            this.btnEditConditions.TabIndex = 0;
++            this.btnEditConditions.Text = "Spawn/Execution Conditions";
++            this.btnEditConditions.Click += new System.EventHandler(this.btnEditConditions_Click);
++            //
++            // grpNewCommands
++            //
++            this.grpNewCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpNewCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpNewCommands.Controls.Add(this.lblCloseCommands);
++            this.grpNewCommands.Controls.Add(this.lstCommands);
++            this.grpNewCommands.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpNewCommands.Location = new System.Drawing.Point(353, 89);
++            this.grpNewCommands.Name = "grpNewCommands";
++            this.grpNewCommands.Size = new System.Drawing.Size(457, 484);
++            this.grpNewCommands.TabIndex = 7;
++            this.grpNewCommands.TabStop = false;
++            this.grpNewCommands.Text = "Add Commands";
++            this.grpNewCommands.Visible = false;
++            //
++            // lblCloseCommands
++            //
++            this.lblCloseCommands.AutoSize = true;
++            this.lblCloseCommands.Location = new System.Drawing.Point(437, 14);
++            this.lblCloseCommands.Name = "lblCloseCommands";
++            this.lblCloseCommands.Size = new System.Drawing.Size(14, 13);
++            this.lblCloseCommands.TabIndex = 1;
++            this.lblCloseCommands.Text = "X";
++            this.lblCloseCommands.Click += new System.EventHandler(this.lblCloseCommands_Click);
++            //
++            // lstCommands
++            //
++            this.lstCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.lstCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.lstCommands.ForeColor = System.Drawing.Color.Gainsboro;
++            this.lstCommands.LineColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(150)))));
++            this.lstCommands.Location = new System.Drawing.Point(6, 32);
++            this.lstCommands.Name = "lstCommands";
++            treeNode1.Name = "showtext";
++            treeNode1.Tag = "1";
++            treeNode1.Text = "Show Text";
++            treeNode2.Name = "showoptions";
++            treeNode2.Tag = "2";
++            treeNode2.Text = "Show Options";
++            treeNode3.Name = "inputvariable";
++            treeNode3.Tag = "49";
++            treeNode3.Text = "Input Variable";
++            treeNode4.Name = "addchatboxtext";
++            treeNode4.Tag = "3";
++            treeNode4.Text = "Add Chatbox Text";
++            treeNode5.Name = "dialogue";
++            treeNode5.Text = "Dialogue";
++            treeNode6.Name = "setvariable";
++            treeNode6.Tag = "5";
++            treeNode6.Text = "Set Variable";
++            treeNode7.Name = "setselfswitch";
++            treeNode7.Tag = "6";
++            treeNode7.Text = "Set Self Switch";
++            treeNode8.Name = "conditionalbranch";
++            treeNode8.Tag = "7";
++            treeNode8.Text = "Conditional Branch";
++            treeNode9.Name = "exiteventprocess";
++            treeNode9.Tag = "8";
++            treeNode9.Text = "Exit Event Process";
++            treeNode10.Name = "label";
++            treeNode10.Tag = "9";
++            treeNode10.Text = "Label";
++            treeNode11.Name = "gotolabel";
++            treeNode11.Tag = "10";
++            treeNode11.Text = "Go To Label";
++            treeNode12.Name = "startcommonevent";
++            treeNode12.Tag = "11";
++            treeNode12.Text = "Start Common Event";
++            treeNode13.Name = "logicflow";
++            treeNode13.Text = "Logic Flow";
++            treeNode14.Name = "restorehp";
++            treeNode14.Tag = "12";
++            treeNode14.Text = "Restore HP";
++            treeNode15.Name = "restoremp";
++            treeNode15.Tag = "13";
++            treeNode15.Text = "Restore MP";
++            treeNode16.Name = "levelup";
++            treeNode16.Tag = "14";
++            treeNode16.Text = "Level Up";
++            treeNode17.Name = "giveexperience";
++            treeNode17.Tag = "15";
++            treeNode17.Text = "Give Experience";
++            treeNode18.Name = "changelevel";
++            treeNode18.Tag = "16";
++            treeNode18.Text = "Change Level";
++            treeNode19.Name = "changespells";
++            treeNode19.Tag = "17";
++            treeNode19.Text = "Change Spells";
++            treeNode20.Name = "changeitems";
++            treeNode20.Tag = "18";
++            treeNode20.Text = "Change Items";
++            treeNode21.Name = "takeitemsbytag";
++            treeNode21.Tag = "51";
++            treeNode21.Text = "Take Items By Tag";
++            treeNode22.Name = "changesprite";
++            treeNode22.Tag = "19";
++            treeNode22.Text = "Change Sprite";
++            treeNode23.Name = "changeface";
++            treeNode23.Tag = "20";
++            treeNode23.Text = "Change Face";
++            treeNode24.Name = "changegender";
++            treeNode24.Tag = "21";
++            treeNode24.Text = "Change Gender";
++            treeNode25.Name = "setaccess";
++            treeNode25.Tag = "22";
++            treeNode25.Text = "Set Access";
++            treeNode26.Name = "changeclass";
++            treeNode26.Tag = "38";
++            treeNode26.Text = "Change Class";
++            treeNode27.Name = "equipitem";
++            treeNode27.Tag = "47";
++            treeNode27.Text = "Equip Item";
++            treeNode28.Name = "changenamecolor";
++            treeNode28.Tag = "48";
++            treeNode28.Text = "Change Name Color";
++            treeNode29.Name = "changeplayerlabel";
++            treeNode29.Tag = "50";
++            treeNode29.Text = "Change Player Label";
++            treeNode30.Name = "playercontrol";
++            treeNode30.Text = "Player Control";
++            treeNode31.Name = "warpplayer";
++            treeNode31.Tag = "23";
++            treeNode31.Text = "Warp Player";
++            treeNode32.Name = "setmoveroute";
++            treeNode32.Tag = "24";
++            treeNode32.Text = "Set Move Route";
++            treeNode33.Name = "waitmoveroute";
++            treeNode33.Tag = "25";
++            treeNode33.Text = "Wait for Route Completion";
++            treeNode34.Name = "holdplayer";
++            treeNode34.Tag = "26";
++            treeNode34.Text = "Hold Player";
++            treeNode35.Name = "releaseplayer";
++            treeNode35.Tag = "27";
++            treeNode35.Text = "Release Player";
++            treeNode36.Name = "spawnnpc";
++            treeNode36.Tag = "28";
++            treeNode36.Text = "Spawn NPC";
++            treeNode37.Name = "despawnnpcs";
++            treeNode37.Tag = "39";
++            treeNode37.Text = "Despawn NPC";
++            treeNode38.Name = "hideplayer";
++            treeNode38.Tag = "45";
++            treeNode38.Text = "Hide Player";
++            treeNode39.Name = "showplayer";
++            treeNode39.Tag = "46";
++            treeNode39.Text = "Show Player";
++            treeNode40.Name = "movement";
++            treeNode40.Text = "Movement";
++            treeNode41.Name = "playanimation";
++            treeNode41.Tag = "29";
++            treeNode41.Text = "Play Animation";
++            treeNode42.Name = "playbgm";
++            treeNode42.Tag = "30";
++            treeNode42.Text = "Play BGM";
++            treeNode43.Name = "fadeoutbgm";
++            treeNode43.Tag = "31";
++            treeNode43.Text = "Fadeout BGM";
++            treeNode44.Name = "playsound";
++            treeNode44.Tag = "32";
++            treeNode44.Text = "Play Sound";
++            treeNode45.Name = "stopsounds";
++            treeNode45.Tag = "33";
++            treeNode45.Text = "Stop Sounds";
++            treeNode46.Name = "showpicture";
++            treeNode46.Tag = "43";
++            treeNode46.Text = "Show Picture";
++            treeNode47.Name = "hidepicture";
++            treeNode47.Tag = "44";
++            treeNode47.Text = "Hide Picture";
++            treeNode48.Name = "specialeffects";
++            treeNode48.Text = "Special Effects";
++            treeNode49.Name = "startquest";
++            treeNode49.Tag = "40";
++            treeNode49.Text = "Start Quest";
++            treeNode50.Name = "completequesttask";
++            treeNode50.Tag = "41";
++            treeNode50.Text = "Complete Quest Task";
++            treeNode51.Name = "endquest";
++            treeNode51.Tag = "42";
++            treeNode51.Text = "End Quest";
++            treeNode52.Name = "questcontrol";
++            treeNode52.Text = "Quest Control";
++            treeNode53.Name = "wait";
++            treeNode53.Tag = "34";
++            treeNode53.Text = "Wait...";
++            treeNode54.Name = "etc";
++            treeNode54.Text = "Etc";
++            treeNode55.Name = "openbank";
++            treeNode55.Tag = "35";
++            treeNode55.Text = "Open Bank";
++            treeNode56.Name = "openshop";
++            treeNode56.Tag = "36";
++            treeNode56.Text = "Open Shop";
++            treeNode57.Name = "opencraftingstation";
++            treeNode57.Tag = "37";
++            treeNode57.Text = "Open Crafting Station";
++            treeNode58.Name = "shopandbank";
++            treeNode58.Text = "Shop and Bank";
++            this.lstCommands.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {
+             treeNode5,
+             treeNode13,
+-            treeNode29,
+-            treeNode39,
+-            treeNode47,
+-            treeNode51,
+-            treeNode53,
+-            treeNode57});
+-      this.lstCommands.Size = new System.Drawing.Size(445, 440);
+-      this.lstCommands.TabIndex = 2;
+-      this.lstCommands.NodeMouseDoubleClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.lstCommands_NodeMouseDoubleClick);
+-      // 
+-      // grpEventCommands
+-      // 
+-      this.grpEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpEventCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpEventCommands.Controls.Add(this.lstEventCommands);
+-      this.grpEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpEventCommands.Location = new System.Drawing.Point(353, 89);
+-      this.grpEventCommands.Name = "grpEventCommands";
+-      this.grpEventCommands.Size = new System.Drawing.Size(457, 484);
+-      this.grpEventCommands.TabIndex = 6;
+-      this.grpEventCommands.TabStop = false;
+-      this.grpEventCommands.Text = "Commands";
+-      // 
+-      // lstEventCommands
+-      // 
+-      this.lstEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+-      this.lstEventCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.lstEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.lstEventCommands.FormattingEnabled = true;
+-      this.lstEventCommands.HorizontalScrollbar = true;
+-      this.lstEventCommands.Items.AddRange(new object[] {
++            treeNode30,
++            treeNode40,
++            treeNode48,
++            treeNode52,
++            treeNode54,
++            treeNode58});
++            this.lstCommands.Size = new System.Drawing.Size(445, 440);
++            this.lstCommands.TabIndex = 2;
++            this.lstCommands.NodeMouseDoubleClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.lstCommands_NodeMouseDoubleClick);
++            //
++            // grpEventCommands
++            //
++            this.grpEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpEventCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpEventCommands.Controls.Add(this.lstEventCommands);
++            this.grpEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpEventCommands.Location = new System.Drawing.Point(353, 89);
++            this.grpEventCommands.Name = "grpEventCommands";
++            this.grpEventCommands.Size = new System.Drawing.Size(457, 484);
++            this.grpEventCommands.TabIndex = 6;
++            this.grpEventCommands.TabStop = false;
++            this.grpEventCommands.Text = "Commands";
++            //
++            // lstEventCommands
++            //
++            this.lstEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.lstEventCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.lstEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
++            this.lstEventCommands.FormattingEnabled = true;
++            this.lstEventCommands.HorizontalScrollbar = true;
++            this.lstEventCommands.Items.AddRange(new object[] {
+             "@>"});
+-      this.lstEventCommands.Location = new System.Drawing.Point(6, 19);
+-      this.lstEventCommands.Name = "lstEventCommands";
+-      this.lstEventCommands.Size = new System.Drawing.Size(445, 457);
+-      this.lstEventCommands.TabIndex = 0;
+-      this.lstEventCommands.SelectedIndexChanged += new System.EventHandler(this.lstEventCommands_SelectedIndexChanged);
+-      this.lstEventCommands.DoubleClick += new System.EventHandler(this.lstEventCommands_DoubleClick);
+-      this.lstEventCommands.KeyDown += new System.Windows.Forms.KeyEventHandler(this.lstEventCommands_KeyDown);
+-      this.lstEventCommands.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lstEventCommands_Click);
+-      // 
+-      // grpCreateCommands
+-      // 
+-      this.grpCreateCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpCreateCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpCreateCommands.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpCreateCommands.Location = new System.Drawing.Point(353, 89);
+-      this.grpCreateCommands.Name = "grpCreateCommands";
+-      this.grpCreateCommands.Size = new System.Drawing.Size(457, 484);
+-      this.grpCreateCommands.TabIndex = 8;
+-      this.grpCreateCommands.TabStop = false;
+-      this.grpCreateCommands.Visible = false;
+-      // 
+-      // btnSave
+-      // 
+-      this.btnSave.Location = new System.Drawing.Point(628, 586);
+-      this.btnSave.Name = "btnSave";
+-      this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnSave.Size = new System.Drawing.Size(93, 30);
+-      this.btnSave.TabIndex = 6;
+-      this.btnSave.Text = "Save";
+-      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+-      // 
+-      // btnCancel
+-      // 
+-      this.btnCancel.Location = new System.Drawing.Point(727, 586);
+-      this.btnCancel.Name = "btnCancel";
+-      this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnCancel.Size = new System.Drawing.Size(93, 30);
+-      this.btnCancel.TabIndex = 7;
+-      this.btnCancel.Text = "Cancel";
+-      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+-      // 
+-      // commandMenu
+-      // 
+-      this.commandMenu.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+-      this.commandMenu.ImageScalingSize = new System.Drawing.Size(24, 24);
+-      this.commandMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
++            this.lstEventCommands.Location = new System.Drawing.Point(6, 19);
++            this.lstEventCommands.Name = "lstEventCommands";
++            this.lstEventCommands.Size = new System.Drawing.Size(445, 457);
++            this.lstEventCommands.TabIndex = 0;
++            this.lstEventCommands.SelectedIndexChanged += new System.EventHandler(this.lstEventCommands_SelectedIndexChanged);
++            this.lstEventCommands.DoubleClick += new System.EventHandler(this.lstEventCommands_DoubleClick);
++            this.lstEventCommands.KeyDown += new System.Windows.Forms.KeyEventHandler(this.lstEventCommands_KeyDown);
++            this.lstEventCommands.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lstEventCommands_Click);
++            //
++            // grpCreateCommands
++            //
++            this.grpCreateCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpCreateCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpCreateCommands.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpCreateCommands.Location = new System.Drawing.Point(353, 89);
++            this.grpCreateCommands.Name = "grpCreateCommands";
++            this.grpCreateCommands.Size = new System.Drawing.Size(457, 484);
++            this.grpCreateCommands.TabIndex = 8;
++            this.grpCreateCommands.TabStop = false;
++            this.grpCreateCommands.Visible = false;
++            //
++            // btnSave
++            //
++            this.btnSave.Location = new System.Drawing.Point(628, 586);
++            this.btnSave.Name = "btnSave";
++            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
++            this.btnSave.Size = new System.Drawing.Size(93, 30);
++            this.btnSave.TabIndex = 6;
++            this.btnSave.Text = "Save";
++            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
++            //
++            // btnCancel
++            //
++            this.btnCancel.Location = new System.Drawing.Point(727, 586);
++            this.btnCancel.Name = "btnCancel";
++            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
++            this.btnCancel.Size = new System.Drawing.Size(93, 30);
++            this.btnCancel.TabIndex = 7;
++            this.btnCancel.Text = "Cancel";
++            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
++            //
++            // commandMenu
++            //
++            this.commandMenu.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.commandMenu.ImageScalingSize = new System.Drawing.Size(24, 24);
++            this.commandMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
+             this.btnInsert,
+             this.btnEdit,
+             this.btnCut,
+             this.btnCopy,
+             this.btnPaste,
+             this.btnDelete});
+-      this.commandMenu.Name = "commandMenu";
+-      this.commandMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
+-      this.commandMenu.Size = new System.Drawing.Size(108, 136);
+-      // 
+-      // btnInsert
+-      // 
+-      this.btnInsert.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.btnInsert.Name = "btnInsert";
+-      this.btnInsert.Size = new System.Drawing.Size(107, 22);
+-      this.btnInsert.Text = "Insert";
+-      this.btnInsert.Click += new System.EventHandler(this.btnInsert_Click);
+-      // 
+-      // btnEdit
+-      // 
+-      this.btnEdit.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.btnEdit.Name = "btnEdit";
+-      this.btnEdit.Size = new System.Drawing.Size(107, 22);
+-      this.btnEdit.Text = "Edit";
+-      this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
+-      // 
+-      // btnCut
+-      // 
+-      this.btnCut.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.btnCut.Name = "btnCut";
+-      this.btnCut.Size = new System.Drawing.Size(107, 22);
+-      this.btnCut.Text = "Cut";
+-      this.btnCut.Click += new System.EventHandler(this.btnCut_Click);
+-      // 
+-      // btnCopy
+-      // 
+-      this.btnCopy.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.btnCopy.Name = "btnCopy";
+-      this.btnCopy.Size = new System.Drawing.Size(107, 22);
+-      this.btnCopy.Text = "Copy";
+-      this.btnCopy.Click += new System.EventHandler(this.btnCopy_Click);
+-      // 
+-      // btnPaste
+-      // 
+-      this.btnPaste.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.btnPaste.Name = "btnPaste";
+-      this.btnPaste.Size = new System.Drawing.Size(107, 22);
+-      this.btnPaste.Text = "Paste";
+-      this.btnPaste.Click += new System.EventHandler(this.btnPaste_Click);
+-      // 
+-      // btnDelete
+-      // 
+-      this.btnDelete.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.btnDelete.Name = "btnDelete";
+-      this.btnDelete.Size = new System.Drawing.Size(107, 22);
+-      this.btnDelete.Text = "Delete";
+-      this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
+-      // 
+-      // grpPageOptions
+-      // 
+-      this.grpPageOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpPageOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpPageOptions.Controls.Add(this.btnClearPage);
+-      this.grpPageOptions.Controls.Add(this.btnDeletePage);
+-      this.grpPageOptions.Controls.Add(this.btnPastePage);
+-      this.grpPageOptions.Controls.Add(this.btnCopyPage);
+-      this.grpPageOptions.Controls.Add(this.btnNewPage);
+-      this.grpPageOptions.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpPageOptions.Location = new System.Drawing.Point(313, 5);
+-      this.grpPageOptions.Name = "grpPageOptions";
+-      this.grpPageOptions.Size = new System.Drawing.Size(510, 50);
+-      this.grpPageOptions.TabIndex = 13;
+-      this.grpPageOptions.TabStop = false;
+-      this.grpPageOptions.Text = "Page Options";
+-      // 
+-      // btnClearPage
+-      // 
+-      this.btnClearPage.Location = new System.Drawing.Point(402, 16);
+-      this.btnClearPage.Name = "btnClearPage";
+-      this.btnClearPage.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnClearPage.Size = new System.Drawing.Size(93, 30);
+-      this.btnClearPage.TabIndex = 17;
+-      this.btnClearPage.Text = "Clear Page";
+-      this.btnClearPage.Click += new System.EventHandler(this.btnClearPage_Click);
+-      // 
+-      // btnDeletePage
+-      // 
+-      this.btnDeletePage.Enabled = false;
+-      this.btnDeletePage.Location = new System.Drawing.Point(303, 16);
+-      this.btnDeletePage.Name = "btnDeletePage";
+-      this.btnDeletePage.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnDeletePage.Size = new System.Drawing.Size(93, 30);
+-      this.btnDeletePage.TabIndex = 16;
+-      this.btnDeletePage.Text = "Delete Page";
+-      this.btnDeletePage.Click += new System.EventHandler(this.btnDeletePage_Click);
+-      // 
+-      // btnPastePage
+-      // 
+-      this.btnPastePage.Location = new System.Drawing.Point(204, 16);
+-      this.btnPastePage.Name = "btnPastePage";
+-      this.btnPastePage.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnPastePage.Size = new System.Drawing.Size(93, 30);
+-      this.btnPastePage.TabIndex = 15;
+-      this.btnPastePage.Text = "Paste Page";
+-      this.btnPastePage.Click += new System.EventHandler(this.btnPastePage_Click);
+-      // 
+-      // btnCopyPage
+-      // 
+-      this.btnCopyPage.Location = new System.Drawing.Point(105, 16);
+-      this.btnCopyPage.Name = "btnCopyPage";
+-      this.btnCopyPage.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnCopyPage.Size = new System.Drawing.Size(93, 30);
+-      this.btnCopyPage.TabIndex = 14;
+-      this.btnCopyPage.Text = "Copy Page";
+-      this.btnCopyPage.Click += new System.EventHandler(this.btnCopyPage_Click);
+-      // 
+-      // btnNewPage
+-      // 
+-      this.btnNewPage.Location = new System.Drawing.Point(6, 16);
+-      this.btnNewPage.Name = "btnNewPage";
+-      this.btnNewPage.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnNewPage.Size = new System.Drawing.Size(93, 30);
+-      this.btnNewPage.TabIndex = 13;
+-      this.btnNewPage.Text = "New Page";
+-      this.btnNewPage.Click += new System.EventHandler(this.btnNewPage_Click);
+-      // 
+-      // grpGeneral
+-      // 
+-      this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-      this.grpGeneral.Controls.Add(this.chkIsGlobal);
+-      this.grpGeneral.Controls.Add(this.lblName);
+-      this.grpGeneral.Controls.Add(this.txtEventname);
+-      this.grpGeneral.ForeColor = System.Drawing.Color.Gainsboro;
+-      this.grpGeneral.Location = new System.Drawing.Point(12, 5);
+-      this.grpGeneral.Name = "grpGeneral";
+-      this.grpGeneral.Size = new System.Drawing.Size(295, 49);
+-      this.grpGeneral.TabIndex = 18;
+-      this.grpGeneral.TabStop = false;
+-      this.grpGeneral.Text = "General";
+-      // 
+-      // chkIsGlobal
+-      // 
+-      this.chkIsGlobal.AutoSize = true;
+-      this.chkIsGlobal.Location = new System.Drawing.Point(202, 22);
+-      this.chkIsGlobal.Name = "chkIsGlobal";
+-      this.chkIsGlobal.Size = new System.Drawing.Size(87, 17);
+-      this.chkIsGlobal.TabIndex = 3;
+-      this.chkIsGlobal.Text = "Global Event";
+-      this.chkIsGlobal.CheckedChanged += new System.EventHandler(this.chkIsGlobal_CheckedChanged);
+-      // 
+-      // pnlTabsContainer
+-      // 
+-      this.pnlTabsContainer.Controls.Add(this.pnlTabs);
+-      this.pnlTabsContainer.Location = new System.Drawing.Point(12, 61);
+-      this.pnlTabsContainer.Name = "pnlTabsContainer";
+-      this.pnlTabsContainer.Size = new System.Drawing.Size(811, 22);
+-      this.pnlTabsContainer.TabIndex = 22;
+-      // 
+-      // pnlTabs
+-      // 
+-      this.pnlTabs.AutoSize = true;
+-      this.pnlTabs.Location = new System.Drawing.Point(0, 0);
+-      this.pnlTabs.Name = "pnlTabs";
+-      this.pnlTabs.Size = new System.Drawing.Size(811, 22);
+-      this.pnlTabs.TabIndex = 23;
+-      // 
+-      // btnTabsRight
+-      // 
+-      this.btnTabsRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+-      this.btnTabsRight.Location = new System.Drawing.Point(773, 61);
+-      this.btnTabsRight.Name = "btnTabsRight";
+-      this.btnTabsRight.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnTabsRight.Size = new System.Drawing.Size(50, 23);
+-      this.btnTabsRight.TabIndex = 1;
+-      this.btnTabsRight.Text = ">";
+-      this.btnTabsRight.Click += new System.EventHandler(this.btnTabsRight_Click);
+-      // 
+-      // btnTabsLeft
+-      // 
+-      this.btnTabsLeft.Location = new System.Drawing.Point(12, 61);
+-      this.btnTabsLeft.Name = "btnTabsLeft";
+-      this.btnTabsLeft.Padding = new System.Windows.Forms.Padding(5);
+-      this.btnTabsLeft.Size = new System.Drawing.Size(50, 23);
+-      this.btnTabsLeft.TabIndex = 0;
+-      this.btnTabsLeft.Text = "<";
+-      this.btnTabsLeft.Click += new System.EventHandler(this.btnTabsLeft_Click);
+-      // 
+-      // panel1
+-      // 
+-      this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+-      this.panel1.Location = new System.Drawing.Point(12, 83);
+-      this.panel1.Name = "panel1";
+-      this.panel1.Size = new System.Drawing.Size(811, 498);
+-      this.panel1.TabIndex = 23;
+-      // 
+-      // FrmEvent
+-      // 
+-      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+-      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+-      this.AutoSize = true;
+-      this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-      this.ClientSize = new System.Drawing.Size(835, 622);
+-      this.Controls.Add(this.grpNewCommands);
+-      this.Controls.Add(this.grpTriggers);
+-      this.Controls.Add(this.btnTabsRight);
+-      this.Controls.Add(this.btnTabsLeft);
+-      this.Controls.Add(this.grpEntityOptions);
+-      this.Controls.Add(this.grpEventConditions);
+-      this.Controls.Add(this.grpPageOptions);
+-      this.Controls.Add(this.grpGeneral);
+-      this.Controls.Add(this.btnCancel);
+-      this.Controls.Add(this.btnSave);
+-      this.Controls.Add(this.pnlTabsContainer);
+-      this.Controls.Add(this.grpEventCommands);
+-      this.Controls.Add(this.grpCreateCommands);
+-      this.Controls.Add(this.panel1);
+-      this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
+-      this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
+-      this.KeyPreview = true;
+-      this.MaximizeBox = false;
+-      this.Name = "FrmEvent";
+-      this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
+-      this.Text = "Event Editor";
+-      this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.frmEvent_FormClosing);
+-      this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.FrmEvent_FormClosed);
+-      this.Load += new System.EventHandler(this.frmEvent_Load);
+-      this.VisibleChanged += new System.EventHandler(this.FrmEvent_VisibleChanged);
+-      this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.FrmEvent_KeyDown);
+-      this.grpEntityOptions.ResumeLayout(false);
+-      this.grpExtra.ResumeLayout(false);
+-      this.grpExtra.PerformLayout();
+-      this.grpInspector.ResumeLayout(false);
+-      this.grpInspector.PerformLayout();
+-      this.grpPreview.ResumeLayout(false);
+-      this.grpPreview.PerformLayout();
+-      this.grpMovement.ResumeLayout(false);
+-      this.grpMovement.PerformLayout();
+-      this.grpTriggers.ResumeLayout(false);
+-      this.grpTriggers.PerformLayout();
+-      this.grpEventConditions.ResumeLayout(false);
+-      this.grpNewCommands.ResumeLayout(false);
+-      this.grpNewCommands.PerformLayout();
+-      this.grpEventCommands.ResumeLayout(false);
+-      this.commandMenu.ResumeLayout(false);
+-      this.grpPageOptions.ResumeLayout(false);
+-      this.grpGeneral.ResumeLayout(false);
+-      this.grpGeneral.PerformLayout();
+-      this.pnlTabsContainer.ResumeLayout(false);
+-      this.pnlTabsContainer.PerformLayout();
+-      this.ResumeLayout(false);
++            this.commandMenu.Name = "commandMenu";
++            this.commandMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
++            this.commandMenu.Size = new System.Drawing.Size(108, 136);
++            //
++            // btnInsert
++            //
++            this.btnInsert.ForeColor = System.Drawing.Color.Gainsboro;
++            this.btnInsert.Name = "btnInsert";
++            this.btnInsert.Size = new System.Drawing.Size(107, 22);
++            this.btnInsert.Text = "Insert";
++            this.btnInsert.Click += new System.EventHandler(this.btnInsert_Click);
++            //
++            // btnEdit
++            //
++            this.btnEdit.ForeColor = System.Drawing.Color.Gainsboro;
++            this.btnEdit.Name = "btnEdit";
++            this.btnEdit.Size = new System.Drawing.Size(107, 22);
++            this.btnEdit.Text = "Edit";
++            this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
++            //
++            // btnCut
++            //
++            this.btnCut.ForeColor = System.Drawing.Color.Gainsboro;
++            this.btnCut.Name = "btnCut";
++            this.btnCut.Size = new System.Drawing.Size(107, 22);
++            this.btnCut.Text = "Cut";
++            this.btnCut.Click += new System.EventHandler(this.btnCut_Click);
++            //
++            // btnCopy
++            //
++            this.btnCopy.ForeColor = System.Drawing.Color.Gainsboro;
++            this.btnCopy.Name = "btnCopy";
++            this.btnCopy.Size = new System.Drawing.Size(107, 22);
++            this.btnCopy.Text = "Copy";
++            this.btnCopy.Click += new System.EventHandler(this.btnCopy_Click);
++            //
++            // btnPaste
++            //
++            this.btnPaste.ForeColor = System.Drawing.Color.Gainsboro;
++            this.btnPaste.Name = "btnPaste";
++            this.btnPaste.Size = new System.Drawing.Size(107, 22);
++            this.btnPaste.Text = "Paste";
++            this.btnPaste.Click += new System.EventHandler(this.btnPaste_Click);
++            //
++            // btnDelete
++            //
++            this.btnDelete.ForeColor = System.Drawing.Color.Gainsboro;
++            this.btnDelete.Name = "btnDelete";
++            this.btnDelete.Size = new System.Drawing.Size(107, 22);
++            this.btnDelete.Text = "Delete";
++            this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
++            //
++            // grpPageOptions
++            //
++            this.grpPageOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpPageOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpPageOptions.Controls.Add(this.btnClearPage);
++            this.grpPageOptions.Controls.Add(this.btnDeletePage);
++            this.grpPageOptions.Controls.Add(this.btnPastePage);
++            this.grpPageOptions.Controls.Add(this.btnCopyPage);
++            this.grpPageOptions.Controls.Add(this.btnNewPage);
++            this.grpPageOptions.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpPageOptions.Location = new System.Drawing.Point(313, 5);
++            this.grpPageOptions.Name = "grpPageOptions";
++            this.grpPageOptions.Size = new System.Drawing.Size(510, 50);
++            this.grpPageOptions.TabIndex = 13;
++            this.grpPageOptions.TabStop = false;
++            this.grpPageOptions.Text = "Page Options";
++            //
++            // btnClearPage
++            //
++            this.btnClearPage.Location = new System.Drawing.Point(402, 16);
++            this.btnClearPage.Name = "btnClearPage";
++            this.btnClearPage.Padding = new System.Windows.Forms.Padding(5);
++            this.btnClearPage.Size = new System.Drawing.Size(93, 30);
++            this.btnClearPage.TabIndex = 17;
++            this.btnClearPage.Text = "Clear Page";
++            this.btnClearPage.Click += new System.EventHandler(this.btnClearPage_Click);
++            //
++            // btnDeletePage
++            //
++            this.btnDeletePage.Enabled = false;
++            this.btnDeletePage.Location = new System.Drawing.Point(303, 16);
++            this.btnDeletePage.Name = "btnDeletePage";
++            this.btnDeletePage.Padding = new System.Windows.Forms.Padding(5);
++            this.btnDeletePage.Size = new System.Drawing.Size(93, 30);
++            this.btnDeletePage.TabIndex = 16;
++            this.btnDeletePage.Text = "Delete Page";
++            this.btnDeletePage.Click += new System.EventHandler(this.btnDeletePage_Click);
++            //
++            // btnPastePage
++            //
++            this.btnPastePage.Location = new System.Drawing.Point(204, 16);
++            this.btnPastePage.Name = "btnPastePage";
++            this.btnPastePage.Padding = new System.Windows.Forms.Padding(5);
++            this.btnPastePage.Size = new System.Drawing.Size(93, 30);
++            this.btnPastePage.TabIndex = 15;
++            this.btnPastePage.Text = "Paste Page";
++            this.btnPastePage.Click += new System.EventHandler(this.btnPastePage_Click);
++            //
++            // btnCopyPage
++            //
++            this.btnCopyPage.Location = new System.Drawing.Point(105, 16);
++            this.btnCopyPage.Name = "btnCopyPage";
++            this.btnCopyPage.Padding = new System.Windows.Forms.Padding(5);
++            this.btnCopyPage.Size = new System.Drawing.Size(93, 30);
++            this.btnCopyPage.TabIndex = 14;
++            this.btnCopyPage.Text = "Copy Page";
++            this.btnCopyPage.Click += new System.EventHandler(this.btnCopyPage_Click);
++            //
++            // btnNewPage
++            //
++            this.btnNewPage.Location = new System.Drawing.Point(6, 16);
++            this.btnNewPage.Name = "btnNewPage";
++            this.btnNewPage.Padding = new System.Windows.Forms.Padding(5);
++            this.btnNewPage.Size = new System.Drawing.Size(93, 30);
++            this.btnNewPage.TabIndex = 13;
++            this.btnNewPage.Text = "New Page";
++            this.btnNewPage.Click += new System.EventHandler(this.btnNewPage_Click);
++            //
++            // grpGeneral
++            //
++            this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpGeneral.Controls.Add(this.chkIsGlobal);
++            this.grpGeneral.Controls.Add(this.lblName);
++            this.grpGeneral.Controls.Add(this.txtEventname);
++            this.grpGeneral.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpGeneral.Location = new System.Drawing.Point(12, 5);
++            this.grpGeneral.Name = "grpGeneral";
++            this.grpGeneral.Size = new System.Drawing.Size(295, 49);
++            this.grpGeneral.TabIndex = 18;
++            this.grpGeneral.TabStop = false;
++            this.grpGeneral.Text = "General";
++            //
++            // chkIsGlobal
++            //
++            this.chkIsGlobal.AutoSize = true;
++            this.chkIsGlobal.Location = new System.Drawing.Point(202, 22);
++            this.chkIsGlobal.Name = "chkIsGlobal";
++            this.chkIsGlobal.Size = new System.Drawing.Size(87, 17);
++            this.chkIsGlobal.TabIndex = 3;
++            this.chkIsGlobal.Text = "Global Event";
++            this.chkIsGlobal.CheckedChanged += new System.EventHandler(this.chkIsGlobal_CheckedChanged);
++            //
++            // pnlTabsContainer
++            //
++            this.pnlTabsContainer.Controls.Add(this.pnlTabs);
++            this.pnlTabsContainer.Location = new System.Drawing.Point(12, 61);
++            this.pnlTabsContainer.Name = "pnlTabsContainer";
++            this.pnlTabsContainer.Size = new System.Drawing.Size(811, 22);
++            this.pnlTabsContainer.TabIndex = 22;
++            //
++            // pnlTabs
++            //
++            this.pnlTabs.AutoSize = true;
++            this.pnlTabs.Location = new System.Drawing.Point(0, 0);
++            this.pnlTabs.Name = "pnlTabs";
++            this.pnlTabs.Size = new System.Drawing.Size(811, 22);
++            this.pnlTabs.TabIndex = 23;
++            //
++            // btnTabsRight
++            //
++            this.btnTabsRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
++            this.btnTabsRight.Location = new System.Drawing.Point(773, 61);
++            this.btnTabsRight.Name = "btnTabsRight";
++            this.btnTabsRight.Padding = new System.Windows.Forms.Padding(5);
++            this.btnTabsRight.Size = new System.Drawing.Size(50, 23);
++            this.btnTabsRight.TabIndex = 1;
++            this.btnTabsRight.Text = ">";
++            this.btnTabsRight.Click += new System.EventHandler(this.btnTabsRight_Click);
++            //
++            // btnTabsLeft
++            //
++            this.btnTabsLeft.Location = new System.Drawing.Point(12, 61);
++            this.btnTabsLeft.Name = "btnTabsLeft";
++            this.btnTabsLeft.Padding = new System.Windows.Forms.Padding(5);
++            this.btnTabsLeft.Size = new System.Drawing.Size(50, 23);
++            this.btnTabsLeft.TabIndex = 0;
++            this.btnTabsLeft.Text = "<";
++            this.btnTabsLeft.Click += new System.EventHandler(this.btnTabsLeft_Click);
++            //
++            // panel1
++            //
++            this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.panel1.Location = new System.Drawing.Point(12, 83);
++            this.panel1.Name = "panel1";
++            this.panel1.Size = new System.Drawing.Size(811, 498);
++            this.panel1.TabIndex = 23;
++            //
++            // FrmEvent
++            //
++            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
++            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
++            this.AutoSize = true;
++            this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.ClientSize = new System.Drawing.Size(835, 622);
++            this.Controls.Add(this.grpNewCommands);
++            this.Controls.Add(this.grpTriggers);
++            this.Controls.Add(this.btnTabsRight);
++            this.Controls.Add(this.btnTabsLeft);
++            this.Controls.Add(this.grpEntityOptions);
++            this.Controls.Add(this.grpEventConditions);
++            this.Controls.Add(this.grpPageOptions);
++            this.Controls.Add(this.grpGeneral);
++            this.Controls.Add(this.btnCancel);
++            this.Controls.Add(this.btnSave);
++            this.Controls.Add(this.pnlTabsContainer);
++            this.Controls.Add(this.grpEventCommands);
++            this.Controls.Add(this.grpCreateCommands);
++            this.Controls.Add(this.panel1);
++            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
++            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
++            this.KeyPreview = true;
++            this.MaximizeBox = false;
++            this.Name = "FrmEvent";
++            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
++            this.Text = "Event Editor";
++            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.frmEvent_FormClosing);
++            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.FrmEvent_FormClosed);
++            this.Load += new System.EventHandler(this.frmEvent_Load);
++            this.VisibleChanged += new System.EventHandler(this.FrmEvent_VisibleChanged);
++            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.FrmEvent_KeyDown);
++            this.grpEntityOptions.ResumeLayout(false);
++            this.grpExtra.ResumeLayout(false);
++            this.grpExtra.PerformLayout();
++            this.grpInspector.ResumeLayout(false);
++            this.grpInspector.PerformLayout();
++            this.grpPreview.ResumeLayout(false);
++            this.grpPreview.PerformLayout();
++            this.grpMovement.ResumeLayout(false);
++            this.grpMovement.PerformLayout();
++            this.grpTriggers.ResumeLayout(false);
++            this.grpTriggers.PerformLayout();
++            this.grpEventConditions.ResumeLayout(false);
++            this.grpNewCommands.ResumeLayout(false);
++            this.grpNewCommands.PerformLayout();
++            this.grpEventCommands.ResumeLayout(false);
++            this.commandMenu.ResumeLayout(false);
++            this.grpPageOptions.ResumeLayout(false);
++            this.grpGeneral.ResumeLayout(false);
++            this.grpGeneral.PerformLayout();
++            this.pnlTabsContainer.ResumeLayout(false);
++            this.pnlTabsContainer.PerformLayout();
++            this.ResumeLayout(false);
+ 
+         }
+ 
+diff --git a/Intersect.Editor/Forms/Editors/Events/frmEvent.cs b/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
+index c0dc7bc5..355a6560 100644
+--- a/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
++++ b/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
+@@ -710,6 +710,11 @@ private void lstCommands_NodeMouseDoubleClick(object sender, TreeNodeMouseClickE
+                 case EventCommandType.ShowPlayer:
+                     tmpCommand = new ShowPlayerCommand();
+ 
++                    break;
++
++                case EventCommandType.TakeItemsByTag:
++                    tmpCommand = new TakeItemsByTag(CurrentPage.CommandLists);
++
+                     break;
+                 default:
+                     throw new ArgumentOutOfRangeException();
+@@ -1278,6 +1283,10 @@ private void OpenEditCommand(EventCommand command)
+                 case EventCommandType.EndQuest:
+                     cmdWindow = new EventCommandEndQuest((EndQuestCommand) command, this);
+ 
++                    break;
++                case EventCommandType.TakeItemsByTag:
++                    cmdWindow = new EventCommandTakeItemsBytag((TakeItemsByTag)command, CurrentPage, this);
++
+                     break;
+                 default:
+                     throw new ArgumentOutOfRangeException();
+diff --git a/Intersect.Editor/Forms/Editors/frmItem.Designer.cs b/Intersect.Editor/Forms/Editors/frmItem.Designer.cs
+index d46aa33d..21b80353 100644
+--- a/Intersect.Editor/Forms/Editors/frmItem.Designer.cs
++++ b/Intersect.Editor/Forms/Editors/frmItem.Designer.cs
+@@ -42,6 +42,8 @@ private void InitializeComponent()
+             this.btnCancel = new DarkUI.Controls.DarkButton();
+             this.btnSave = new DarkUI.Controls.DarkButton();
+             this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
++            this.lblTag = new System.Windows.Forms.Label();
++            this.txtTag = new DarkUI.Controls.DarkTextBox();
+             this.btnAddFolder = new DarkUI.Controls.DarkButton();
+             this.lblFolder = new System.Windows.Forms.Label();
+             this.cmbFolder = new DarkUI.Controls.DarkComboBox();
+@@ -317,6 +319,8 @@ private void InitializeComponent()
+             // 
+             this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpGeneral.Controls.Add(this.lblTag);
++            this.grpGeneral.Controls.Add(this.txtTag);
+             this.grpGeneral.Controls.Add(this.btnAddFolder);
+             this.grpGeneral.Controls.Add(this.lblFolder);
+             this.grpGeneral.Controls.Add(this.cmbFolder);
+@@ -348,6 +352,26 @@ private void InitializeComponent()
+             this.grpGeneral.TabStop = false;
+             this.grpGeneral.Text = "General";
+             // 
++            // lblTag
++            //
++            this.lblTag.AutoSize = true;
++            this.lblTag.Location = new System.Drawing.Point(8, 129);
++            this.lblTag.Name = "lblTag";
++            this.lblTag.Size = new System.Drawing.Size(29, 13);
++            this.lblTag.TabIndex = 51;
++            this.lblTag.Text = "Tag:";
++            //
++            // txtTag
++            //
++            this.txtTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.txtTag.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.txtTag.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
++            this.txtTag.Location = new System.Drawing.Point(53, 127);
++            this.txtTag.Name = "txtTag";
++            this.txtTag.Size = new System.Drawing.Size(145, 20);
++            this.txtTag.TabIndex = 50;
++            this.txtTag.TextChanged += new System.EventHandler(this.txtTag_TextChanged);
++            //
+             // btnAddFolder
+             // 
+             this.btnAddFolder.Location = new System.Drawing.Point(180, 58);
+@@ -531,7 +555,7 @@ private void InitializeComponent()
+             // lblDesc
+             // 
+             this.lblDesc.AutoSize = true;
+-            this.lblDesc.Location = new System.Drawing.Point(9, 126);
++            this.lblDesc.Location = new System.Drawing.Point(9, 160);
+             this.lblDesc.Name = "lblDesc";
+             this.lblDesc.Size = new System.Drawing.Size(35, 13);
+             this.lblDesc.TabIndex = 13;
+@@ -542,10 +566,10 @@ private void InitializeComponent()
+             this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+-            this.txtDesc.Location = new System.Drawing.Point(12, 142);
++            this.txtDesc.Location = new System.Drawing.Point(12, 176);
+             this.txtDesc.Multiline = true;
+             this.txtDesc.Name = "txtDesc";
+-            this.txtDesc.Size = new System.Drawing.Size(186, 93);
++            this.txtDesc.Size = new System.Drawing.Size(186, 59);
+             this.txtDesc.TabIndex = 12;
+             this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
+             // 
+@@ -2602,5 +2626,7 @@ private void InitializeComponent()
+     private Label lblHpRegen;
+     private Label lblManaRegen;
+     private Label lblRegenHint;
+-  }
++        private Label lblTag;
++        private DarkTextBox txtTag;
++    }
+ }
+diff --git a/Intersect.Editor/Forms/Editors/frmItem.cs b/Intersect.Editor/Forms/Editors/frmItem.cs
+index 11cb4269..c4bac8ad 100644
+--- a/Intersect.Editor/Forms/Editors/frmItem.cs
++++ b/Intersect.Editor/Forms/Editors/frmItem.cs
+@@ -162,6 +162,7 @@ private void InitLocalization()
+             }
+ 
+             lblDesc.Text = Strings.ItemEditor.description;
++            lblTag.Text = Strings.ItemEditor.tag;
+             lblPic.Text = Strings.ItemEditor.picture;
+             lblPrice.Text = Strings.ItemEditor.price;
+             lblAnim.Text = Strings.ItemEditor.animation;
+@@ -273,6 +274,7 @@ private void UpdateEditor()
+                 txtName.Text = mEditorItem.Name;
+                 cmbFolder.Text = mEditorItem.Folder;
+                 txtDesc.Text = mEditorItem.Description;
++                txtTag.Text = String.Join(";", mEditorItem.Tags);
+                 cmbType.SelectedIndex = (int) mEditorItem.ItemType;
+                 cmbPic.SelectedIndex = cmbPic.FindString(TextUtils.NullToNone(mEditorItem.Icon));
+                 cmbEquipmentAnimation.SelectedIndex = AnimationBase.ListIndex(mEditorItem.EquipmentAnimationId) + 1;
+@@ -494,6 +496,20 @@ private void txtDesc_TextChanged(object sender, EventArgs e)
+             mEditorItem.Description = txtDesc.Text;
+         }
+ 
++        private void txtTag_TextChanged(object sender, EventArgs e)
++        {
++            try
++            {
++                mEditorItem.Tags.Clear();
++                mEditorItem.Tags.AddRange(txtTag.Text.Split(';'));
++            }
++            catch
++            {
++                MessageBox.Show(Strings.ItemEditor.tagparseerror, Strings.ItemEditor.tagparseerrortitle, MessageBoxButtons.OK, MessageBoxIcon.Warning);
++                return;
++            }
++        }
++
+         private void cmbEquipmentSlot_SelectedIndexChanged(object sender, EventArgs e)
+         {
+             mEditorItem.EquipmentSlot = cmbEquipmentSlot.SelectedIndex;
+@@ -1114,7 +1130,6 @@ private void txtSearch_Click(object sender, EventArgs e)
+         }
+ 
+         #endregion
+-
+     }
+ 
+ }
+diff --git a/Intersect.Editor/Forms/Editors/frmItem.resx b/Intersect.Editor/Forms/Editors/frmItem.resx
+index 4c97d54d..36777ad0 100644
+--- a/Intersect.Editor/Forms/Editors/frmItem.resx
++++ b/Intersect.Editor/Forms/Editors/frmItem.resx
+@@ -125,51 +125,51 @@
+         AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
+         LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
+         ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAY
+-        CwAAAk1TRnQBSQFMAgEBAgEAAbABAQGwAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
++        CwAAAk1TRnQBSQFMAgEBAgEAAdABAQHQAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
+         AwABEAMAAQEBAAEgBgABEFoAA/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2
+         Af8D9gH/A/YB/4wAAyEBMAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFA
+-        AyoBQAMqAUAIAAP2Af8DMgH/AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wP2
++        AyoBQAMqAUAIAAP2Af8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wP2
+         Af+IAAMMARAB7gHyAfQB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/
+-        A/YB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
+-        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzIB/wP2Af+IAANAAXAByAHeAewB/wFEAbYB3AH/
+-        AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2
+-        AdwB/wFEAbYB3AH/AbYB0wHmAf8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHx
+-        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMyAf8D9gH/
+-        iAADXAHfAZEBwgHhAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHc
+-        Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/
+-        AzIB/wHxAe8B8AH/AdsB2QHaAf8BaQJoAf8BmgKZAf8DMgH/AZoCmQH/AWkCaAH/AdsB2QHaAf8B8QHv
+-        AfAB/wMyAf8D9gH/hAADKgFAAd8B6gHxAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFE
+-        AbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wHTAeEB6wH/AfEB7wHw
+-        Af8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8DMgH/AdsB2QHaAf8B8QHvAfAB/wMyAf8B8QHv
+-        AfAB/wHbAdkB2gH/AzIB/wHxAe8B8AH/AzIB/wP2Af+EAANRAZ8BqQHOAeYB/wFEAbYB3AH/AUQBtgHc
+-        Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wGf
+-        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFEAbYB3AH/A/YB/wgAA/YB/wMyAf8B8QHvAfAB/wMyAf8B8QHv
+-        AfAB/wHxAe8B8AH/AzIB/wHxAe8B8AH/AfEB7wHwAf8DMgH/AfEB7wHwAf8DMgH/A/YB/4QAA/YB/wGC
+-        AboB3gH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHc
+-        Af8BRAG2AdwB/wFEAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/
+-        AzIB/wHxAe8B8AH/AzIB/wHFAcQBxQH/AV4BXQFeAf8BmgKZAf8BXgFdAV4B/wHFAcQBxQH/AzIB/wHx
+-        Ae8B8AH/AzIB/wP2Af+EAAP2Af8D9gH/AUQBtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
++        A/YB/wP2Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
++        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay4B/wP2Af+IAANAAXAByAHeAewB/wFAAbYB3AH/
++        AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2
++        AdwB/wFAAbYB3AH/AbYB0wHmAf8BQAG2AdwB/wP2Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHx
++        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMuAf8D9gH/
++        iAADXAHfAZEBwgHhAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHc
++        Af8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUABtgHcAf8D9gH/CAAD9gH/
++        Ay4B/wHxAe8B8AH/AdsB2QHaAf8BZQJkAf8BmgKZAf8DLgH/AZoCmQH/AWUCZAH/AdsB2QHaAf8B8QHv
++        AfAB/wMuAf8D9gH/hAADKgFAAd8B6gHxAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFA
++        AbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wHTAeEB6wH/AfEB7wHw
++        Af8BQAG2AdwB/wP2Af8IAAP2Af8DLgH/AfEB7wHwAf8DLgH/AdsB2QHaAf8B8QHvAfAB/wMuAf8B8QHv
++        AfAB/wHbAdkB2gH/Ay4B/wHxAe8B8AH/Ay4B/wP2Af+EAANRAZ8BqQHOAeYB/wFAAbYB3AH/AUABtgHc
++        Af8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wGf
++        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFAAbYB3AH/A/YB/wgAA/YB/wMuAf8B8QHvAfAB/wMuAf8B8QHv
++        AfAB/wHxAe8B8AH/Ay4B/wHxAe8B8AH/AfEB7wHwAf8DLgH/AfEB7wHwAf8DLgH/A/YB/4QAA/YB/wGC
++        AboB3gH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHc
++        Af8BQAG2AdwB/wFAAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUABtgHcAf8D9gH/CAAD9gH/
++        Ay4B/wHxAe8B8AH/Ay4B/wHFAcQBxQH/AVoBWQFaAf8BmgKZAf8BWgFZAVoB/wHFAcQBxQH/Ay4B/wHx
++        Ae8B8AH/Ay4B/wP2Af+EAAP2Af8D9gH/AUABtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+         AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AUQBtgHcAf8D9gH/CAAD9gH/AzIB/wHxAe8B8AH/AzIB/wFpAmgB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
+-        AeUB/wFpAmgB/wMyAf8B8QHvAfAB/wMyAf8D9gH/iAAD9gH/AUQBtgHcAf8B8QHvAfAB/wHxAe8B8AH/
++        AUABtgHcAf8D9gH/CAAD9gH/Ay4B/wHxAe8B8AH/Ay4B/wFlAmQB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
++        AeUB/wFlAmQB/wMuAf8B8QHvAfAB/wMuAf8D9gH/iAAD9gH/AUABtgHcAf8B8QHvAfAB/wHxAe8B8AH/
+         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+-        AfAB/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/AzIB/wHxAe8B8AH/AdsB2QHaAf8BaQJoAf8BmgKZ
+-        Af8B2wHZAdoB/wGaApkB/wFpAmgB/wHbAdkB2gH/AfEB7wHwAf8DMgH/A/YB/4gAA/YB/wFEAbYB3AH/
++        AfAB/wHxAe8B8AH/AUABtgHcAf8D9gH/CAAD9gH/Ay4B/wHxAe8B8AH/AdsB2QHaAf8BZQJkAf8BmgKZ
++        Af8B2wHZAdoB/wGaApkB/wFlAmQB/wHbAdkB2gH/AfEB7wHwAf8DLgH/A/YB/4gAA/YB/wFAAbYB3AH/
+         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+-        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFEAbYB3AH/A/YB/wgAA/YB/wMyAf8B8QHvAfAB/wHx
++        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFAAbYB3AH/A/YB/wgAA/YB/wMuAf8B8QHvAfAB/wHx
+         Ae8B8AH/AfEB7wHwAf8BxQHEAcUB/wGEAoMB/wHFAcQBxQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AzIB/wP2Af+IAAP2Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wHiAegB7gH/AfEB7wHw
+-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BRAG2AdwB/wP2
+-        Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AzIB/wMyAf8DMgH/A4YB/wNwAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
+-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BRAG2AdwB/wP2
+-        Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AzIB/wMyAf8DhgH/A3AB7wMhATCUAANcAd8ByAHeAewB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFE
+-        AbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/
+-        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzIB/wOGAf8DcAHv
++        Ay4B/wP2Af+IAAP2Af8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wHiAegB7gH/AfEB7wHw
++        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQAG2AdwB/wP2
++        Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
++        Ay4B/wMuAf8DLgH/A4YB/wNmAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
++        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQAG2AdwB/wP2
++        Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
++        Ay4B/wMuAf8DhgH/A2YB7wMhATCUAANcAd8ByAHeAewB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFA
++        AbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wP2Af8IAAP2Af8DLgH/
++        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay4B/wOGAf8DZgHv
+         AyEBMJgAAzoBYAP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/CAAD9gH/
+-        AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wOGAf8DcAHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
+-        Af8D9gH/A/YB/wP2Af8DcAHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
++        Ay4B/wMuAf8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wOGAf8DZgHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
++        Af8D9gH/A/YB/wP2Af8DZgHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
+         A/8BAAL/AcABAQQAAcABAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEGAAHAAQEGAAHA
+         AQEGAAHAAQEGAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEEAAGAAQABwAEBBAAB8AEA
+         AcABAwQAAfABAAHAAQcEAAL/AcABDwQACw==
+diff --git a/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs b/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs
+index 3ffdf8c1..70ce3446 100644
+--- a/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs
++++ b/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs
+@@ -38,6 +38,8 @@ private void InitializeComponent()
+             this.lstNpcs = new System.Windows.Forms.TreeView();
+             this.imageList = new System.Windows.Forms.ImageList(this.components);
+             this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
++            this.lblTag = new System.Windows.Forms.Label();
++            this.txtTag = new DarkUI.Controls.DarkTextBox();
+             this.btnAddFolder = new DarkUI.Controls.DarkButton();
+             this.lblFolder = new System.Windows.Forms.Label();
+             this.cmbFolder = new DarkUI.Controls.DarkComboBox();
+@@ -71,6 +73,11 @@ private void InitializeComponent()
+             this.lblExp = new System.Windows.Forms.Label();
+             this.pnlContainer = new System.Windows.Forms.Panel();
+             this.grpCombat = new DarkUI.Controls.DarkGroupBox();
++            this.grpAttackSpeed = new DarkUI.Controls.DarkGroupBox();
++            this.nudAttackSpeedValue = new DarkUI.Controls.DarkNumericUpDown();
++            this.lblAttackSpeedValue = new System.Windows.Forms.Label();
++            this.cmbAttackSpeedModifier = new DarkUI.Controls.DarkComboBox();
++            this.lblAttackSpeedModifier = new System.Windows.Forms.Label();
+             this.nudCritMultiplier = new DarkUI.Controls.DarkNumericUpDown();
+             this.lblCritMultiplier = new System.Windows.Forms.Label();
+             this.nudScaling = new DarkUI.Controls.DarkNumericUpDown();
+@@ -151,11 +158,6 @@ private void InitializeComponent()
+             this.toolStripSeparator3 = new System.Windows.Forms.ToolStripSeparator();
+             this.toolStripItemUndo = new System.Windows.Forms.ToolStripButton();
+             this.searchableDarkTreeView1 = new Intersect.Editor.Forms.Controls.SearchableDarkTreeView();
+-            this.grpAttackSpeed = new DarkUI.Controls.DarkGroupBox();
+-            this.nudAttackSpeedValue = new DarkUI.Controls.DarkNumericUpDown();
+-            this.lblAttackSpeedValue = new System.Windows.Forms.Label();
+-            this.cmbAttackSpeedModifier = new DarkUI.Controls.DarkComboBox();
+-            this.lblAttackSpeedModifier = new System.Windows.Forms.Label();
+             this.grpNpcs.SuspendLayout();
+             this.grpGeneral.SuspendLayout();
+             ((System.ComponentModel.ISupportInitialize)(this.nudLevel)).BeginInit();
+@@ -173,6 +175,8 @@ private void InitializeComponent()
+             ((System.ComponentModel.ISupportInitialize)(this.nudStr)).BeginInit();
+             this.pnlContainer.SuspendLayout();
+             this.grpCombat.SuspendLayout();
++            this.grpAttackSpeed.SuspendLayout();
++            ((System.ComponentModel.ISupportInitialize)(this.nudAttackSpeedValue)).BeginInit();
+             ((System.ComponentModel.ISupportInitialize)(this.nudCritMultiplier)).BeginInit();
+             ((System.ComponentModel.ISupportInitialize)(this.nudScaling)).BeginInit();
+             ((System.ComponentModel.ISupportInitialize)(this.nudDamage)).BeginInit();
+@@ -190,8 +194,6 @@ private void InitializeComponent()
+             this.grpNpcVsNpc.SuspendLayout();
+             this.grpSpells.SuspendLayout();
+             this.toolStrip.SuspendLayout();
+-            this.grpAttackSpeed.SuspendLayout();
+-            ((System.ComponentModel.ISupportInitialize)(this.nudAttackSpeedValue)).BeginInit();
+             this.SuspendLayout();
+             // 
+             // grpNpcs
+@@ -263,6 +265,8 @@ private void InitializeComponent()
+             // 
+             this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpGeneral.Controls.Add(this.lblTag);
++            this.grpGeneral.Controls.Add(this.txtTag);
+             this.grpGeneral.Controls.Add(this.btnAddFolder);
+             this.grpGeneral.Controls.Add(this.lblFolder);
+             this.grpGeneral.Controls.Add(this.cmbFolder);
+@@ -281,6 +285,26 @@ private void InitializeComponent()
+             this.grpGeneral.TabStop = false;
+             this.grpGeneral.Text = "General";
+             // 
++            // lblTag
++            //
++            this.lblTag.AutoSize = true;
++            this.lblTag.Location = new System.Drawing.Point(72, 110);
++            this.lblTag.Name = "lblTag";
++            this.lblTag.Size = new System.Drawing.Size(29, 13);
++            this.lblTag.TabIndex = 69;
++            this.lblTag.Text = "Tag:";
++            //
++            // txtTag
++            //
++            this.txtTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.txtTag.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
++            this.txtTag.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
++            this.txtTag.Location = new System.Drawing.Point(106, 108);
++            this.txtTag.Name = "txtTag";
++            this.txtTag.Size = new System.Drawing.Size(89, 20);
++            this.txtTag.TabIndex = 68;
++            this.txtTag.TextChanged += new System.EventHandler(this.txtTag_TextChanged);
++            //
+             // btnAddFolder
+             // 
+             this.btnAddFolder.Location = new System.Drawing.Point(177, 45);
+@@ -367,7 +391,7 @@ private void InitializeComponent()
+             this.cmbSprite.FormattingEnabled = true;
+             this.cmbSprite.Items.AddRange(new object[] {
+             "None"});
+-            this.cmbSprite.Location = new System.Drawing.Point(75, 132);
++            this.cmbSprite.Location = new System.Drawing.Point(75, 150);
+             this.cmbSprite.Name = "cmbSprite";
+             this.cmbSprite.Size = new System.Drawing.Size(120, 21);
+             this.cmbSprite.TabIndex = 11;
+@@ -378,7 +402,7 @@ private void InitializeComponent()
+             // lblPic
+             // 
+             this.lblPic.AutoSize = true;
+-            this.lblPic.Location = new System.Drawing.Point(72, 116);
++            this.lblPic.Location = new System.Drawing.Point(72, 134);
+             this.lblPic.Name = "lblPic";
+             this.lblPic.Size = new System.Drawing.Size(37, 13);
+             this.lblPic.TabIndex = 6;
+@@ -780,6 +804,82 @@ private void InitializeComponent()
+             this.grpCombat.TabStop = false;
+             this.grpCombat.Text = "Combat";
+             // 
++            // grpAttackSpeed
++            //
++            this.grpAttackSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
++            this.grpAttackSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpAttackSpeed.Controls.Add(this.nudAttackSpeedValue);
++            this.grpAttackSpeed.Controls.Add(this.lblAttackSpeedValue);
++            this.grpAttackSpeed.Controls.Add(this.cmbAttackSpeedModifier);
++            this.grpAttackSpeed.Controls.Add(this.lblAttackSpeedModifier);
++            this.grpAttackSpeed.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpAttackSpeed.Location = new System.Drawing.Point(12, 310);
++            this.grpAttackSpeed.Name = "grpAttackSpeed";
++            this.grpAttackSpeed.Size = new System.Drawing.Size(192, 86);
++            this.grpAttackSpeed.TabIndex = 64;
++            this.grpAttackSpeed.TabStop = false;
++            this.grpAttackSpeed.Text = "Attack Speed";
++            //
++            // nudAttackSpeedValue
++            //
++            this.nudAttackSpeedValue.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.nudAttackSpeedValue.ForeColor = System.Drawing.Color.Gainsboro;
++            this.nudAttackSpeedValue.Location = new System.Drawing.Point(60, 58);
++            this.nudAttackSpeedValue.Maximum = new decimal(new int[] {
++            10000,
++            0,
++            0,
++            0});
++            this.nudAttackSpeedValue.Name = "nudAttackSpeedValue";
++            this.nudAttackSpeedValue.Size = new System.Drawing.Size(114, 20);
++            this.nudAttackSpeedValue.TabIndex = 56;
++            this.nudAttackSpeedValue.Value = new decimal(new int[] {
++            0,
++            0,
++            0,
++            0});
++            this.nudAttackSpeedValue.ValueChanged += new System.EventHandler(this.nudAttackSpeedValue_ValueChanged);
++            //
++            // lblAttackSpeedValue
++            //
++            this.lblAttackSpeedValue.AutoSize = true;
++            this.lblAttackSpeedValue.Location = new System.Drawing.Point(9, 60);
++            this.lblAttackSpeedValue.Name = "lblAttackSpeedValue";
++            this.lblAttackSpeedValue.Size = new System.Drawing.Size(37, 13);
++            this.lblAttackSpeedValue.TabIndex = 29;
++            this.lblAttackSpeedValue.Text = "Value:";
++            //
++            // cmbAttackSpeedModifier
++            //
++            this.cmbAttackSpeedModifier.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbAttackSpeedModifier.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbAttackSpeedModifier.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbAttackSpeedModifier.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbAttackSpeedModifier.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAttackSpeedModifier.ButtonIcon")));
++            this.cmbAttackSpeedModifier.DrawDropdownHoverOutline = false;
++            this.cmbAttackSpeedModifier.DrawFocusRectangle = false;
++            this.cmbAttackSpeedModifier.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbAttackSpeedModifier.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbAttackSpeedModifier.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbAttackSpeedModifier.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbAttackSpeedModifier.FormattingEnabled = true;
++            this.cmbAttackSpeedModifier.Location = new System.Drawing.Point(60, 24);
++            this.cmbAttackSpeedModifier.Name = "cmbAttackSpeedModifier";
++            this.cmbAttackSpeedModifier.Size = new System.Drawing.Size(114, 21);
++            this.cmbAttackSpeedModifier.TabIndex = 28;
++            this.cmbAttackSpeedModifier.Text = null;
++            this.cmbAttackSpeedModifier.TextPadding = new System.Windows.Forms.Padding(2);
++            this.cmbAttackSpeedModifier.SelectedIndexChanged += new System.EventHandler(this.cmbAttackSpeedModifier_SelectedIndexChanged);
++            //
++            // lblAttackSpeedModifier
++            //
++            this.lblAttackSpeedModifier.AutoSize = true;
++            this.lblAttackSpeedModifier.Location = new System.Drawing.Point(9, 27);
++            this.lblAttackSpeedModifier.Name = "lblAttackSpeedModifier";
++            this.lblAttackSpeedModifier.Size = new System.Drawing.Size(47, 13);
++            this.lblAttackSpeedModifier.TabIndex = 0;
++            this.lblAttackSpeedModifier.Text = "Modifier:";
++            //
+             // nudCritMultiplier
+             // 
+             this.nudCritMultiplier.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+@@ -1859,82 +1959,6 @@ private void InitializeComponent()
+             this.searchableDarkTreeView1.TabIndex = 46;
+             this.searchableDarkTreeView1.Visible = false;
+             // 
+-            // grpAttackSpeed
+-            // 
+-            this.grpAttackSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-            this.grpAttackSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-            this.grpAttackSpeed.Controls.Add(this.nudAttackSpeedValue);
+-            this.grpAttackSpeed.Controls.Add(this.lblAttackSpeedValue);
+-            this.grpAttackSpeed.Controls.Add(this.cmbAttackSpeedModifier);
+-            this.grpAttackSpeed.Controls.Add(this.lblAttackSpeedModifier);
+-            this.grpAttackSpeed.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.grpAttackSpeed.Location = new System.Drawing.Point(12, 310);
+-            this.grpAttackSpeed.Name = "grpAttackSpeed";
+-            this.grpAttackSpeed.Size = new System.Drawing.Size(192, 86);
+-            this.grpAttackSpeed.TabIndex = 64;
+-            this.grpAttackSpeed.TabStop = false;
+-            this.grpAttackSpeed.Text = "Attack Speed";
+-            // 
+-            // nudAttackSpeedValue
+-            // 
+-            this.nudAttackSpeedValue.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-            this.nudAttackSpeedValue.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.nudAttackSpeedValue.Location = new System.Drawing.Point(60, 58);
+-            this.nudAttackSpeedValue.Maximum = new decimal(new int[] {
+-            10000,
+-            0,
+-            0,
+-            0});
+-            this.nudAttackSpeedValue.Name = "nudAttackSpeedValue";
+-            this.nudAttackSpeedValue.Size = new System.Drawing.Size(114, 20);
+-            this.nudAttackSpeedValue.TabIndex = 56;
+-            this.nudAttackSpeedValue.Value = new decimal(new int[] {
+-            0,
+-            0,
+-            0,
+-            0});
+-            this.nudAttackSpeedValue.ValueChanged += new System.EventHandler(this.nudAttackSpeedValue_ValueChanged);
+-            // 
+-            // lblAttackSpeedValue
+-            // 
+-            this.lblAttackSpeedValue.AutoSize = true;
+-            this.lblAttackSpeedValue.Location = new System.Drawing.Point(9, 60);
+-            this.lblAttackSpeedValue.Name = "lblAttackSpeedValue";
+-            this.lblAttackSpeedValue.Size = new System.Drawing.Size(37, 13);
+-            this.lblAttackSpeedValue.TabIndex = 29;
+-            this.lblAttackSpeedValue.Text = "Value:";
+-            // 
+-            // cmbAttackSpeedModifier
+-            // 
+-            this.cmbAttackSpeedModifier.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+-            this.cmbAttackSpeedModifier.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-            this.cmbAttackSpeedModifier.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+-            this.cmbAttackSpeedModifier.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+-            this.cmbAttackSpeedModifier.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAttackSpeedModifier.ButtonIcon")));
+-            this.cmbAttackSpeedModifier.DrawDropdownHoverOutline = false;
+-            this.cmbAttackSpeedModifier.DrawFocusRectangle = false;
+-            this.cmbAttackSpeedModifier.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+-            this.cmbAttackSpeedModifier.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+-            this.cmbAttackSpeedModifier.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+-            this.cmbAttackSpeedModifier.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.cmbAttackSpeedModifier.FormattingEnabled = true;
+-            this.cmbAttackSpeedModifier.Location = new System.Drawing.Point(60, 24);
+-            this.cmbAttackSpeedModifier.Name = "cmbAttackSpeedModifier";
+-            this.cmbAttackSpeedModifier.Size = new System.Drawing.Size(114, 21);
+-            this.cmbAttackSpeedModifier.TabIndex = 28;
+-            this.cmbAttackSpeedModifier.Text = null;
+-            this.cmbAttackSpeedModifier.TextPadding = new System.Windows.Forms.Padding(2);
+-            this.cmbAttackSpeedModifier.SelectedIndexChanged += new System.EventHandler(this.cmbAttackSpeedModifier_SelectedIndexChanged);
+-            // 
+-            // lblAttackSpeedModifier
+-            // 
+-            this.lblAttackSpeedModifier.AutoSize = true;
+-            this.lblAttackSpeedModifier.Location = new System.Drawing.Point(9, 27);
+-            this.lblAttackSpeedModifier.Name = "lblAttackSpeedModifier";
+-            this.lblAttackSpeedModifier.Size = new System.Drawing.Size(47, 13);
+-            this.lblAttackSpeedModifier.TabIndex = 0;
+-            this.lblAttackSpeedModifier.Text = "Modifier:";
+-            // 
+             // FrmNpc
+             // 
+             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+@@ -1980,6 +2004,9 @@ private void InitializeComponent()
+             this.pnlContainer.ResumeLayout(false);
+             this.grpCombat.ResumeLayout(false);
+             this.grpCombat.PerformLayout();
++            this.grpAttackSpeed.ResumeLayout(false);
++            this.grpAttackSpeed.PerformLayout();
++            ((System.ComponentModel.ISupportInitialize)(this.nudAttackSpeedValue)).EndInit();
+             ((System.ComponentModel.ISupportInitialize)(this.nudCritMultiplier)).EndInit();
+             ((System.ComponentModel.ISupportInitialize)(this.nudScaling)).EndInit();
+             ((System.ComponentModel.ISupportInitialize)(this.nudDamage)).EndInit();
+@@ -2004,9 +2031,6 @@ private void InitializeComponent()
+             this.grpSpells.PerformLayout();
+             this.toolStrip.ResumeLayout(false);
+             this.toolStrip.PerformLayout();
+-            this.grpAttackSpeed.ResumeLayout(false);
+-            this.grpAttackSpeed.PerformLayout();
+-            ((System.ComponentModel.ISupportInitialize)(this.nudAttackSpeedValue)).EndInit();
+             this.ResumeLayout(false);
+ 
+         }
+@@ -2136,5 +2160,7 @@ private void InitializeComponent()
+         private System.Windows.Forms.Label lblAttackSpeedValue;
+         private DarkComboBox cmbAttackSpeedModifier;
+         private System.Windows.Forms.Label lblAttackSpeedModifier;
++        private System.Windows.Forms.Label lblTag;
++        private DarkTextBox txtTag;
+     }
+ }
+\ No newline at end of file
+diff --git a/Intersect.Editor/Forms/Editors/frmNpc.cs b/Intersect.Editor/Forms/Editors/frmNpc.cs
+index a290031d..315abb60 100644
+--- a/Intersect.Editor/Forms/Editors/frmNpc.cs
++++ b/Intersect.Editor/Forms/Editors/frmNpc.cs
+@@ -132,6 +132,8 @@ private void InitLocalization()
+             lblName.Text = Strings.NpcEditor.name;
+             grpBehavior.Text = Strings.NpcEditor.behavior;
+ 
++            lblTag.Text = Strings.EventConditional.tag;
++
+             lblPic.Text = Strings.NpcEditor.sprite;
+             lblSpawnDuration.Text = Strings.NpcEditor.spawnduration;
+ 
+@@ -237,6 +239,7 @@ private void UpdateEditor()
+                 pnlContainer.Show();
+ 
+                 txtName.Text = mEditorItem.Name;
++                txtTag.Text = String.Join(";", mEditorItem.Tags);
+                 cmbFolder.Text = mEditorItem.Folder;
+                 cmbSprite.SelectedIndex = cmbSprite.FindString(TextUtils.NullToNone(mEditorItem.Sprite));
+                 nudLevel.Value = mEditorItem.Level;
+@@ -354,6 +357,21 @@ private void txtName_TextChanged(object sender, EventArgs e)
+             mChangingName = false;
+         }
+ 
++        private void txtTag_TextChanged(object sender, EventArgs e)
++        {
++            try
++            {
++                mEditorItem.Tags.Clear();
++                mEditorItem.Tags.AddRange(txtTag.Text.Split(';'));
++            }
++            catch
++            {
++                MessageBox.Show(Strings.NpcEditor.tagparseerror, Strings.NpcEditor.tagparseerrortitle, MessageBoxButtons.OK, MessageBoxIcon.Warning);
++                return;
++            }
++
++        }
++
+         private void cmbSprite_SelectedIndexChanged(object sender, EventArgs e)
+         {
+             mEditorItem.Sprite = TextUtils.SanitizeNone(cmbSprite.Text);
+@@ -1108,7 +1126,6 @@ private void txtSearch_Click(object sender, EventArgs e)
+         }
+ 
+         #endregion
+-
+     }
+ 
+ }
+diff --git a/Intersect.Editor/Forms/Editors/frmNpc.resx b/Intersect.Editor/Forms/Editors/frmNpc.resx
+index 3beb1913..aa4cf569 100644
+--- a/Intersect.Editor/Forms/Editors/frmNpc.resx
++++ b/Intersect.Editor/Forms/Editors/frmNpc.resx
+@@ -125,51 +125,51 @@
+         AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
+         LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
+         ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAY
+-        CwAAAk1TRnQBSQFMAgEBAgEAAbABAQGwAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
++        CwAAAk1TRnQBSQFMAgEBAgEAAcgBAQHIAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
+         AwABEAMAAQEBAAEgBgABEFoAA/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2
+         Af8D9gH/A/YB/4wAAyEBMAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFA
+-        AyoBQAMqAUAIAAP2Af8DMgH/AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wP2
++        AyoBQAMqAUAIAAP2Af8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wP2
+         Af+IAAMMARAB7gHyAfQB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/
+-        A/YB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
+-        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzIB/wP2Af+IAANAAXAByAHeAewB/wFEAbYB3AH/
+-        AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2
+-        AdwB/wFEAbYB3AH/AbYB0wHmAf8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHx
+-        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMyAf8D9gH/
+-        iAADXAHfAZEBwgHhAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHc
+-        Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/
+-        AzIB/wHxAe8B8AH/AdsB2QHaAf8BaQJoAf8BmgKZAf8DMgH/AZoCmQH/AWkCaAH/AdsB2QHaAf8B8QHv
+-        AfAB/wMyAf8D9gH/hAADKgFAAd8B6gHxAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFE
+-        AbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wHTAeEB6wH/AfEB7wHw
+-        Af8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8DMgH/AdsB2QHaAf8B8QHvAfAB/wMyAf8B8QHv
+-        AfAB/wHbAdkB2gH/AzIB/wHxAe8B8AH/AzIB/wP2Af+EAANRAZ8BqQHOAeYB/wFEAbYB3AH/AUQBtgHc
+-        Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wGf
+-        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFEAbYB3AH/A/YB/wgAA/YB/wMyAf8B8QHvAfAB/wMyAf8B8QHv
+-        AfAB/wHxAe8B8AH/AzIB/wHxAe8B8AH/AfEB7wHwAf8DMgH/AfEB7wHwAf8DMgH/A/YB/4QAA/YB/wGC
+-        AboB3gH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHc
+-        Af8BRAG2AdwB/wFEAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/
+-        AzIB/wHxAe8B8AH/AzIB/wHFAcQBxQH/AV4BXQFeAf8BmgKZAf8BXgFdAV4B/wHFAcQBxQH/AzIB/wHx
+-        Ae8B8AH/AzIB/wP2Af+EAAP2Af8D9gH/AUQBtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
++        A/YB/wP2Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
++        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay8B/wP2Af+IAANAAXAByAHeAewB/wFBAbYB3AH/
++        AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2
++        AdwB/wFBAbYB3AH/AbYB0wHmAf8BQQG2AdwB/wP2Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHx
++        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMvAf8D9gH/
++        iAADXAHfAZEBwgHhAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHc
++        Af8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUEBtgHcAf8D9gH/CAAD9gH/
++        Ay8B/wHxAe8B8AH/AdsB2QHaAf8BZgJlAf8BmgKZAf8DLwH/AZoCmQH/AWYCZQH/AdsB2QHaAf8B8QHv
++        AfAB/wMvAf8D9gH/hAADKgFAAd8B6gHxAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFB
++        AbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wHTAeEB6wH/AfEB7wHw
++        Af8BQQG2AdwB/wP2Af8IAAP2Af8DLwH/AfEB7wHwAf8DLwH/AdsB2QHaAf8B8QHvAfAB/wMvAf8B8QHv
++        AfAB/wHbAdkB2gH/Ay8B/wHxAe8B8AH/Ay8B/wP2Af+EAANRAZ8BqQHOAeYB/wFBAbYB3AH/AUEBtgHc
++        Af8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wGf
++        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFBAbYB3AH/A/YB/wgAA/YB/wMvAf8B8QHvAfAB/wMvAf8B8QHv
++        AfAB/wHxAe8B8AH/Ay8B/wHxAe8B8AH/AfEB7wHwAf8DLwH/AfEB7wHwAf8DLwH/A/YB/4QAA/YB/wGC
++        AboB3gH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHc
++        Af8BQQG2AdwB/wFBAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUEBtgHcAf8D9gH/CAAD9gH/
++        Ay8B/wHxAe8B8AH/Ay8B/wHFAcQBxQH/AVsBWgFbAf8BmgKZAf8BWwFaAVsB/wHFAcQBxQH/Ay8B/wHx
++        Ae8B8AH/Ay8B/wP2Af+EAAP2Af8D9gH/AUEBtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+         AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AUQBtgHcAf8D9gH/CAAD9gH/AzIB/wHxAe8B8AH/AzIB/wFpAmgB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
+-        AeUB/wFpAmgB/wMyAf8B8QHvAfAB/wMyAf8D9gH/iAAD9gH/AUQBtgHcAf8B8QHvAfAB/wHxAe8B8AH/
++        AUEBtgHcAf8D9gH/CAAD9gH/Ay8B/wHxAe8B8AH/Ay8B/wFmAmUB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
++        AeUB/wFmAmUB/wMvAf8B8QHvAfAB/wMvAf8D9gH/iAAD9gH/AUEBtgHcAf8B8QHvAfAB/wHxAe8B8AH/
+         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+-        AfAB/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/AzIB/wHxAe8B8AH/AdsB2QHaAf8BaQJoAf8BmgKZ
+-        Af8B2wHZAdoB/wGaApkB/wFpAmgB/wHbAdkB2gH/AfEB7wHwAf8DMgH/A/YB/4gAA/YB/wFEAbYB3AH/
++        AfAB/wHxAe8B8AH/AUEBtgHcAf8D9gH/CAAD9gH/Ay8B/wHxAe8B8AH/AdsB2QHaAf8BZgJlAf8BmgKZ
++        Af8B2wHZAdoB/wGaApkB/wFmAmUB/wHbAdkB2gH/AfEB7wHwAf8DLwH/A/YB/4gAA/YB/wFBAbYB3AH/
+         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+-        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFEAbYB3AH/A/YB/wgAA/YB/wMyAf8B8QHvAfAB/wHx
++        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFBAbYB3AH/A/YB/wgAA/YB/wMvAf8B8QHvAfAB/wHx
+         Ae8B8AH/AfEB7wHwAf8BxQHEAcUB/wGEAoMB/wHFAcQBxQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AzIB/wP2Af+IAAP2Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wHiAegB7gH/AfEB7wHw
+-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BRAG2AdwB/wP2
+-        Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AzIB/wMyAf8DMgH/A4YB/wNwAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
+-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BRAG2AdwB/wP2
+-        Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+-        AzIB/wMyAf8DhgH/A3AB7wMhATCUAANcAd8ByAHeAewB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFE
+-        AbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/
+-        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzIB/wOGAf8DcAHv
++        Ay8B/wP2Af+IAAP2Af8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wHiAegB7gH/AfEB7wHw
++        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQQG2AdwB/wP2
++        Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
++        Ay8B/wMvAf8DLwH/A4YB/wNoAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
++        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQQG2AdwB/wP2
++        Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
++        Ay8B/wMvAf8DhgH/A2gB7wMhATCUAANcAd8ByAHeAewB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFB
++        AbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wP2Af8IAAP2Af8DLwH/
++        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay8B/wOGAf8DaAHv
+         AyEBMJgAAzoBYAP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/CAAD9gH/
+-        AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wOGAf8DcAHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
+-        Af8D9gH/A/YB/wP2Af8DcAHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
++        Ay8B/wMvAf8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wOGAf8DaAHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
++        Af8D9gH/A/YB/wP2Af8DaAHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
+         A/8BAAL/AcABAQQAAcABAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEGAAHAAQEGAAHA
+         AQEGAAHAAQEGAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEEAAGAAQABwAEBBAAB8AEA
+         AcABAwQAAfABAAHAAQcEAAL/AcABDwQACw==
+diff --git a/Intersect.Editor/Forms/frmMain.resx b/Intersect.Editor/Forms/frmMain.resx
+index 9369b71e..55982554 100644
+--- a/Intersect.Editor/Forms/frmMain.resx
++++ b/Intersect.Editor/Forms/frmMain.resx
+@@ -179,15 +179,15 @@
+   <data name="toolStripBtnRedo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+     <value>
+         iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
+-        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHASURBVDhPjVJNLwNhEF4qEiIkEhec8AOE+g/i6iMREgkO
+-        4toSn3FwcJJeSBxU0fg4qfQgItrQQ1N1WVKk0Q0lot3URtrd9lAyZl5vaxvN8iSTfXfnmWdmnncFPQCg
+-        Kp1OT2OEZFnOYnzg+RpjStO0BnyCqqoRPDfykh9kMpkWTIY3Tm+hfcIFZX12MPXawTzpgi3vHSSTycfX
+-        xDtYHP7fItSZikdXz0HoXi8aAzYPRGMKO+dEeLkg4Ggz1JmSpT12WNi7BOnlDSIvCZjbCbJJKNdqOcgL
+-        0jq8nAmE2qzfSSrG8TzUgUgU7gsJqge38sW/BOJxOUs7U+LhVQH0o4l2JJGxNV9BYS7+FKDvOZFi3hQI
+-        IPGmA92mBF/hBI2t5DkmQjegjwIBfJl16ExcOw4RIYBXV8cpxqBuqVRK0o86vxukq7rHdZo5zRj0I2HH
+-        qHXTnxcZXjmDlKrJuIaZ04yBxHocXbS5RbYKiXQuHkHiPanhNF2cZgxFUWrIxH1fGCr6HUyEfudb6fkT
+-        pxzhNGOgJ+Uosu29eoLaIScTWT4UmbGYM3GaMZBYgiJLohSDaWeAGfrvW9EDRcaxc6z4bQjCFyc+2ILy
+-        tHXhAAAAAElFTkSuQmCC
++        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHASURBVDhPjVJNSwJhEN4ygiIKgi7VqfoBUfYfomsfEAVB
++        dYiuWmQfdOjQKbwUeMjMpI9ThoeISCkPYnax0EJSSkFcwxZRVw8W08zbq60kWw8M++7OM8/MPO8KSgBA
++        Uz6fN2AEkslkEeMDzw8YS7Isd+ATcrlcGM+dvOQHhUKhB5OhvatH6F+wQ92YGTSjZtAu2sHqeoJMJvOa
++        SKVBZ/H8FqHOVDy7cwPC8G7VmDA6ISpK7FwS4eWCgKMtU2dK1o6YYf34DiLxdwjHU7B66GOTUK5Xd1oW
++        pHV4ORMI9Om/k1SM4zmpA5EoHLcRaJ60lot/CYhiskg7U+IlIQH60UU7ksicyV1RWIo/Beh7SaSaNxUC
++        SAwOoNuU4CtcorGNPMdE6AaUUSGALysWhYmmiwARvHh1bZyiDuqWzWYjylHXjnx0Vc+4TjenqYN+JOwY
++        1e97yiLT29eQzclvuIaW09SBxHYc3W90+NkqJDK4cQ6pdEbGaYY4TR2SJLWQiSfuEDSMW5gI/c7BcOwT
++        p5zhNHWgJ/UocuC6j0HrlI2JbJ35mbGY03CaOpBYgyKb/ogIBpuXGfrvW1ECReaxs1j9NgThC/0O2HOk
++        ZCupAAAAAElFTkSuQmCC
+ </value>
+   </data>
+   <data name="toolStripBtnPen.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+diff --git a/Intersect.Editor/Intersect.Editor.csproj b/Intersect.Editor/Intersect.Editor.csproj
+index 04efdc14..d681756b 100644
+--- a/Intersect.Editor/Intersect.Editor.csproj
++++ b/Intersect.Editor/Intersect.Editor.csproj
+@@ -86,6 +86,12 @@
+     <Compile Include="Core\Preferences.cs" />
+     <Compile Include="Core\Program.cs" />
+     <Compile Include="Entities\Animation.cs" />
++    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_TakeItemsByTag.cs">
++      <SubType>UserControl</SubType>
++    </Compile>
++    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_TakeItemsByTag.Designer.cs">
++      <DependentUpon>EventCommand_TakeItemsByTag.cs</DependentUpon>
++    </Compile>
+     <Compile Include="Forms\frmUpdate.cs">
+       <SubType>Form</SubType>
+     </Compile>
+@@ -654,6 +660,9 @@
+     <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeGender.resx">
+       <DependentUpon>EventCommand_ChangeGender.cs</DependentUpon>
+     </EmbeddedResource>
++    <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_TakeItemsByTag.resx">
++      <DependentUpon>EventCommand_TakeItemsByTag.cs</DependentUpon>
++    </EmbeddedResource>
+     <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeVital.resx">
+       <DependentUpon>EventCommand_ChangeVital.cs</DependentUpon>
+     </EmbeddedResource>
+diff --git a/Intersect.Editor/Localization/Strings.cs b/Intersect.Editor/Localization/Strings.cs
+index ddb7b964..059d7679 100644
+--- a/Intersect.Editor/Localization/Strings.cs
++++ b/Intersect.Editor/Localization/Strings.cs
+@@ -49,6 +49,16 @@ public static string GetEventConditionalDesc(IsItemEquippedCondition condition)
+             return Strings.EventConditionDesc.hasitemequipped.ToString(ItemBase.GetName(condition.ItemId));
+         }
+ 
++        public static string GetEventConditionalDesc(EquippedItemTagIsCondition condition)
++        {
++            return Strings.EventConditionDesc.itemequippedtagis.ToString(condition.Tag ?? ItemBase.Deleted);
++        }
++
++        public static string GetEventConditionalDesc(HasItemWTagCondition condition)
++        {
++            return Strings.EventConditionDesc.hasitemwithtag.ToString(condition.Tag ?? ItemBase.Deleted);
++        }
++
+         public static string GetEventConditionalDesc(ClassIsCondition condition)
+         {
+             return Strings.EventConditionDesc.Class.ToString(ClassBase.GetName(condition.ClassId));
+@@ -222,6 +232,16 @@ public static string GetEventConditionalDesc(NoNpcsOnMapCondition condition)
+             return Strings.EventConditionDesc.nonpcsonmap;
+         }
+ 
++        public static string GetEventConditionalDesc(MapHasNPCWTag condition)
++        {
++            return Strings.EventConditionDesc.maphasnpcwithtag.ToString(condition.Tag ?? ItemBase.Deleted);
++        }
++
++        public static string GetEventConditionalDesc(MapHasTag condition)
++        {
++            return Strings.EventConditionDesc.maphastag.ToString(condition.Tag ?? ItemBase.Deleted);
++        }
++
+         public static string GetEventConditionalDesc(GenderIsCondition condition)
+         {
+             return Strings.EventConditionDesc.gender.ToString(
+@@ -1231,6 +1251,21 @@ public struct EventChangeItems
+ 
+         }
+ 
++        public struct EventTakeItemByTag
++        {
++
++            public static LocalizedString tag = @"Tag:";
++
++            public static LocalizedString amount = @"Amount:";
++
++            public static LocalizedString cancel = @"Cancel";
++
++            public static LocalizedString okay = @"Ok";
++
++            public static LocalizedString title = @"Take Items By Tag";
++
++        }
++
+         public struct EventEquipItems
+         {
+ 
+@@ -1455,6 +1490,8 @@ public struct EventCommandList
+ 
+             public static LocalizedString enditemchange = @"End Item Change";
+ 
++            public static LocalizedString endtakeitemsbytag = @"End Take Items by Tag";
++
+             public static LocalizedString endoptions = @"End Options";
+ 
+             public static LocalizedString endquest = @"End Quest [{00}, {01}]";
+@@ -1495,8 +1532,12 @@ public struct EventCommandList
+ 
+             public static LocalizedString itemnotchanged = @"Item(s) Not Given/Taken (Doesn't have/Inventory full)";
+ 
++            public static LocalizedString itemsnottakenbytag = @"Item(s) Not Taken (Doesn't have)";
++
+             public static LocalizedString itemschanged = @"Item(s) Given/Taken Successfully";
+ 
++            public static LocalizedString itemstakenbytag = @"Item(s) Taken Successfully";
++
+             public static LocalizedString label = @"Label: {00}";
+ 
+             public static LocalizedString leftshiftvariable = @"Left Bit Shift {00}";
+@@ -1629,6 +1670,8 @@ public struct EventCommandList
+ 
+             public static LocalizedString take = @"Take: Item {00}";
+ 
++            public static LocalizedString takeitemsbytag = @"Take Items by Tag: {00}";
++
+             public static LocalizedString taskundefined = @"Undefined";
+ 
+             public static LocalizedString teach = @"Teach: Spell {00}";
+@@ -1712,6 +1755,7 @@ public struct EventCommands
+                 {"changenamecolor", @"Change Name Color"},
+                 {"inputvariable", @"Input Variable"},
+                 {"changeplayerlabel", @"Change Player Label"},
++                {"takeitemsbytag", "Take Items By Tag" },
+             };
+ 
+         }
+@@ -1791,6 +1835,10 @@ public struct EventConditional
+                 {15, @"Gender is..."},
+                 {16, @"Map is..."},
+                 {17, @"Item Equipped is..."},
++                {18, @"Item Equipped Has Tag..."},
++                {19, @"Has Item With Tag..."},
++                {20, @"Map has Npc With Tag..."},
++                {21, @"Map has Tag..." },
+             };
+ 
+             public static LocalizedString endrange = @"End Range:";
+@@ -1815,10 +1863,18 @@ public struct EventConditional
+ 
+             public static LocalizedString hasitemequipped = @"Has Equipped Item";
+ 
++            public static LocalizedString itemequippedhastag = @"Item Equipped Has Tag";
++
++            public static LocalizedString hasitemwithtag = @"Has Item With Tag";
++
++            public static LocalizedString maphasnpcwithtag = @"Map Has NPCs With Tag";
++
+             public static LocalizedString ignorestatbuffs = @"Ignore equipment & spell buffs.";
+ 
+             public static LocalizedString item = @"Item:";
+ 
++            public static LocalizedString tag = @"Tag:";
++
+             public static LocalizedString knowsspell = @"Knows Spell";
+ 
+             public static LocalizedString level = @"Level";
+@@ -1833,6 +1889,8 @@ public struct EventConditional
+ 
+             public static LocalizedString mapis = @"Map Is...";
+ 
++            public static LocalizedString maphastag = @"Map Has Tag...";
++
+             public static LocalizedString negated = @"Negated";
+ 
+             public static LocalizedString numericvariable = @"Numeric Variable:";
+@@ -1944,6 +2002,10 @@ public struct EventConditionDesc
+ 
+             public static LocalizedString hasitemequipped = @"Player has Item {00} equipped";
+ 
++            public static LocalizedString itemequippedtagis = @"Player equipped Item tag is {00} ";
++
++            public static LocalizedString hasitemwithtag = @"Player has Item with tag {00}";
++
+             public static LocalizedString knowsspell = @"Player knows Spell {00}";
+ 
+             public static LocalizedString lessthan = @"is less than {00}";
+@@ -1966,6 +2028,10 @@ public struct EventConditionDesc
+ 
+             public static LocalizedString nonpcsonmap = @"No NPCs on the map";
+ 
++            public static LocalizedString maphasnpcwithtag = @"Map has NPCs with tag {00}";
++
++            public static LocalizedString maphastag = @"Map has tag {00}";
++
+             public static LocalizedString notequal = @"does not equal {00}";
+ 
+             public static LocalizedString onanytask = @", On Any Task";
+@@ -2786,6 +2852,8 @@ public struct ItemEditor
+ 
+             public static LocalizedString deletetitle = @"Delete Item";
+ 
++            public static LocalizedString tag = @"Tag:";
++
+             public static LocalizedString description = @"Desc:";
+ 
+             public static LocalizedString equipment = @"Equipment";
+@@ -2905,6 +2973,10 @@ public struct ItemEditor
+ 
+             public static LocalizedString weaponproperties = @"Weapon Properties";
+ 
++            public static LocalizedString tagparseerrortitle = @"Tag Parse Error";
++
++            public static LocalizedString tagparseerror = @"There was an issue with your Tags, they could not the split properly on ';'.\b\nPlease check your formatting!";
++
+         }
+ 
+         public struct LightEditor
+@@ -3281,6 +3353,7 @@ public struct MapProperties
+                 {"weatherxspeed", @"Weather X Speed"},
+                 {"weatheryspeed", @"Weather Y Speed"},
+                 {"weatherintensity", @"Weather Intensity"},
++                {"tags", @"Tags" },
+             };
+ 
+             public static Dictionary<string, string> descriptions = new Dictionary<string, string>()
+@@ -3321,6 +3394,7 @@ public struct MapProperties
+                 },
+                 {"weatheryspeeddesc", @"How fast vertically weather particles move across the screen. (Range -5 to 5)"},
+                 {"weatherintensitydesc", @"How intence the weather is (number of particles). (Range 0 to 100)"},
++                {"tagsdesc", @"The tags that apply to this map. (Semi-Colon ( ; ) separated)" },
+             };
+ 
+             public static LocalizedString title = @"Map Properties";
+@@ -3521,6 +3595,10 @@ public struct NpcEditor
+ 
+             public static LocalizedString undotitle = @"Undo Changes";
+ 
++            public static LocalizedString tagparseerrortitle = @"Tag Parse Error";
++
++            public static LocalizedString tagparseerror = @"There was an issue with your Tags, they could not the split properly on ';'.\b\nPlease check your formatting!";
++
+         }
+ 
+         public struct NpcSpawns
+diff --git a/Intersect.Editor/Maps/MapProperties.cs b/Intersect.Editor/Maps/MapProperties.cs
+index 67d9a671..9d2e98a8 100644
+--- a/Intersect.Editor/Maps/MapProperties.cs
++++ b/Intersect.Editor/Maps/MapProperties.cs
+@@ -98,6 +98,22 @@ public string ZoneType
+             }
+         }
+ 
++        [CustomCategory("general"), CustomDescription("tagsdesc"), CustomDisplayName("tags"), DefaultValue("")]
++        public string Tags
++        {
++            get => String.Join(";", mMyMap.Tags);
++            set
++            {
++                if (String.Join(";", mMyMap.Tags) != value)
++                {
++                    Globals.MapEditorWindow.PrepUndoState();
++                    mMyMap.Tags.Clear();
++                    mMyMap.Tags.AddRange(value.Split(';'));
++                    Globals.MapEditorWindow.AddUndoState();
++                }
++            }
++        }
++
+         [CustomCategory("audio"), CustomDescription("musicdesc"), CustomDisplayName("music"), DefaultValue("None"),
+          TypeConverter(typeof(MapMusicProperty)), Browsable(true)]
+         public string Music
+diff --git a/Intersect.Server/Entities/Events/CommandProcessing.cs b/Intersect.Server/Entities/Events/CommandProcessing.cs
+index 2e264108..6f1e1377 100644
+--- a/Intersect.Server/Entities/Events/CommandProcessing.cs
++++ b/Intersect.Server/Entities/Events/CommandProcessing.cs
+@@ -448,6 +448,99 @@ Stack<CommandInstance> callStack
+             callStack.Push(tmpStack);
+         }
+ 
++        //Take Items By tag Command
++        private static void ProcessCommand(
++            TakeItemsByTag command,
++            Player player,
++            Event instance,
++            CommandInstance stackInfo,
++            Stack<CommandInstance> callStack
++        )
++        {
++            var success = false;
++
++            // Retrieve all items that have the tag we're looking for so we can see if the user has these item(s).
++            var potentialItems = new List<Guid>();
++            foreach (var dbObject in ItemBase.Lookup.Values)
++            {
++                var item = (ItemBase)dbObject;
++                if (item.Tags.Contains(command.Tag))
++                {
++                    potentialItems.Add(item.Id);
++                }
++            }
++
++            // Find all inventory slots that has the items we've looked up above.
++            var inventorySlots = new List<int>();
++            for (var slot = 0; slot < Options.MaxInvItems; slot++)
++            {
++                if (potentialItems.Contains(player.Items[slot].ItemId))
++                {
++                    inventorySlots.Add(slot);
++                }
++            }
++
++            // Create a backup of our inventory in case we end up not being able to remove all required items and want to revert.
++            var invBackup = player.Items.Select(item => item?.Clone()).ToList();
++
++            // Keep track of how many items we have to remove still.
++            var toRemove = command.Quantity;
++
++            // Go through each inventory slot we've retrieved before and attempt to remove as many items as we need.
++            foreach(var slot in inventorySlots)
++            {
++                if (toRemove > 0)
++                {
++                    var removed = 0;
++                    for (var attempt = 0; attempt < toRemove; attempt++)
++                    {
++                        if (player.TakeItemsBySlot(slot, 1))
++                        {
++                            removed += 1;
++                        }
++                    }
++
++                    toRemove -= removed;
++                }
++            }
++
++            // Do we still have items left to remove or did we finish?
++            if (toRemove == 0)
++            {
++                success = true;
++            }
++            else
++            {
++                // We've failed to take all the required items. Time to restore our inventory!
++                for (var i = 0; i < invBackup.Count; i++)
++                {
++                    player.Items[i].Set(invBackup[i]);
++                }
++
++                PacketSender.SendInventory(player);
++            }
++
++
++            // Process other events.
++            List<EventCommand> newCommandList = null;
++            if (success && stackInfo.Page.CommandLists.ContainsKey(command.BranchIds[0]))
++            {
++                newCommandList = stackInfo.Page.CommandLists[command.BranchIds[0]];
++            }
++
++            if (!success && stackInfo.Page.CommandLists.ContainsKey(command.BranchIds[1]))
++            {
++                newCommandList = stackInfo.Page.CommandLists[command.BranchIds[1]];
++            }
++
++            var tmpStack = new CommandInstance(stackInfo.Page) {
++                CommandList = newCommandList,
++                CommandIndex = 0,
++            };
++
++            callStack.Push(tmpStack);
++        }
++
+         //Equip Items Command
+         private static void ProcessCommand(
+             EquipItemCommand command,
+diff --git a/Intersect.Server/Entities/Events/Conditions.cs b/Intersect.Server/Entities/Events/Conditions.cs
+index 6683673f..db0624ee 100644
+--- a/Intersect.Server/Entities/Events/Conditions.cs
++++ b/Intersect.Server/Entities/Events/Conditions.cs
+@@ -130,6 +130,65 @@ QuestBase questBase
+             return false;
+         }
+ 
++        public static bool MeetsCondition(
++            HasItemWTagCondition condition,
++            Player player,
++            Event eventInstance,
++            QuestBase questBase
++        )
++        {
++            // Get a list of all unique items the player has, filtering out the non-existant ones.
++            var playerItems = player.Items.Select(i => ItemBase.Get(i.ItemId))
++                .Where(item => item != null)
++                .Distinct().ToArray();
++
++            // Go through every unique item the player has, and see if we have enough tagged with our condition tag.
++            var tagItemCount = 0;
++            foreach (var item in playerItems)
++            {
++                // Does this item have the tag we are looking for?
++                if (item.Tags.Contains(condition.Tag))
++                {
++                    // Check if we can find an inventory slot the player has this item in.
++                    if (player.FindItem(item.Id) > -1)
++                    {
++                        // Increase our total item count by the actual amount of this item the player has.
++                        tagItemCount += player.CountItems(item.Id);
++
++                        // We've just increased our count, are we at the requirement?
++                        if (tagItemCount >= condition.Quantity)
++                        {
++                            return true;
++                        }
++                    }
++                }
++            }
++
++            return false;
++        }
++
++        public static bool MeetsCondition(
++            EquippedItemTagIsCondition condition,
++            Player player,
++            Event eventInstance,
++            QuestBase questBase
++        )
++        {
++            // Go through each equipment slot we have and check if the item equipped has a tag matching our condition.
++            for (var i = 0; i < Options.EquipmentSlots.Count; i++)
++            {
++                if (player.Equipment[i] >= 0)
++                {
++                    if (ItemBase.Get(player.Items[player.Equipment[i]].ItemId).Tags.Contains(condition.Tag))
++                    {
++                        return true;
++                    }
++                }
++            }
++
++            return false;
++        }
++
+         public static bool MeetsCondition(
+             ClassIsCondition condition,
+             Player player,
+@@ -382,6 +441,41 @@ QuestBase questBase
+             return false;
+         }
+ 
++        public static bool MeetsCondition(
++            MapHasNPCWTag condition,
++            Player player,
++            Event eventInstance,
++            QuestBase questBase
++        )
++        {
++            // Get the map our event is handled on, or if that fails the one our player is on.
++            var map = MapInstance.Get(eventInstance?.MapId ?? Guid.Empty);
++            if (map == null)
++            {
++                map = MapInstance.Get(player.MapId);
++            }
++
++            // if we have a map, actually process the condition.
++            if (map != null)
++            {
++                // Go through all our map entities and loook for any NPCs, if we have one check to see if they have a matching tag.
++                foreach (var en in map.GetEntities())
++                {
++                    if (en.GetType() == typeof(Npc))
++                    {
++                        var npc = (Npc)en;
++                        if (npc.Base.Tags.Contains(condition.Tag))
++                        {
++                            return true;
++                        }
++                    }
++
++                }
++            }
++
++            return false;
++        }
++
+         public static bool MeetsCondition(
+             GenderIsCondition condition,
+             Player player,
+@@ -402,6 +496,16 @@ QuestBase questBase
+             return player.MapId == condition.MapId;
+         }
+ 
++        public static bool MeetsCondition(
++            MapHasTag condition,
++            Player player,
++            Event eventInstance,
++            QuestBase questBase
++        )
++        {
++            return player.Map.Tags.Contains(condition.Tag);
++        }
++
+         public static bool MeetsCondition(
+             IsItemEquippedCondition condition,
+             Player player,
+diff --git a/Intersect.Server/Intersect.Server.csproj b/Intersect.Server/Intersect.Server.csproj
+index 1bbee3dc..6c5bfcda 100644
+--- a/Intersect.Server/Intersect.Server.csproj
++++ b/Intersect.Server/Intersect.Server.csproj
+@@ -480,6 +480,14 @@
+     <Compile Include="Entities\Pathfinding\SpatialAStar.cs" />
+     <Compile Include="Entities\Pathfinding\PathfinderTarget.cs" />
+     <Compile Include="Entities\Pathfinding\PriorityQueue.cs" />
++    <Compile Include="Migrations\Game\20200423004850_AddingTagSystem.cs" />
++    <Compile Include="Migrations\Game\20200423004850_AddingTagSystem.designer.cs">
++      <DependentUpon>20200423004850_AddingTagSystem.cs</DependentUpon>
++    </Compile>
++    <Compile Include="Migrations\Game\20200424140012_MapTags.cs" />
++    <Compile Include="Migrations\Game\20200424140012_MapTags.designer.cs">
++      <DependentUpon>20200424140012_MapTags.cs</DependentUpon>
++    </Compile>
+     <Compile Include="Networking\Client.cs" />
+     <Compile Include="Entities\Npc.cs" />
+     <Compile Include="Networking\Helpers\NetDebug.cs" />
+diff --git a/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs
+new file mode 100644
+index 00000000..93b6cf81
+--- /dev/null
++++ b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs
+@@ -0,0 +1,1040 @@
++// <auto-generated />
++using System;
++using Intersect.Server.Database.GameData;
++using Microsoft.EntityFrameworkCore;
++using Microsoft.EntityFrameworkCore.Infrastructure;
++using Microsoft.EntityFrameworkCore.Migrations;
++using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
++
++namespace Intersect.Server.Migrations.Game
++{
++    [DbContext(typeof(GameContext))]
++    [Migration("20200423004850_AddingTagSystem")]
++    partial class AddingTagSystem
++    {
++        protected override void BuildTargetModel(ModelBuilder modelBuilder)
++        {
++#pragma warning disable 612, 618
++            modelBuilder
++                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");
++
++            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("CompleteSound");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("Sound");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Animations");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AttackAnimationId")
++                        .HasColumnName("AttackAnimation");
++
++                    b.Property<int>("AttackSpeedModifier");
++
++                    b.Property<int>("AttackSpeedValue");
++
++                    b.Property<long>("BaseExp");
++
++                    b.Property<int>("BasePoints");
++
++                    b.Property<int>("CritChance");
++
++                    b.Property<double>("CritMultiplier");
++
++                    b.Property<int>("Damage");
++
++                    b.Property<int>("DamageType");
++
++                    b.Property<long>("ExpIncrease");
++
++                    b.Property<string>("ExpOverridesJson")
++                        .HasColumnName("ExperienceOverrides");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<bool>("IncreasePercentage");
++
++                    b.Property<string>("JsonBaseStats")
++                        .HasColumnName("BaseStats");
++
++                    b.Property<string>("JsonBaseVitals")
++                        .HasColumnName("BaseVitals");
++
++                    b.Property<string>("JsonItems")
++                        .HasColumnName("Items");
++
++                    b.Property<string>("JsonSpells")
++                        .HasColumnName("Spells");
++
++                    b.Property<string>("JsonSprites")
++                        .HasColumnName("Sprites");
++
++                    b.Property<bool>("Locked");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("PointIncrease");
++
++                    b.Property<string>("RegenJson")
++                        .HasColumnName("VitalRegen");
++
++                    b.Property<int>("Scaling");
++
++                    b.Property<int>("ScalingStat");
++
++                    b.Property<int>("SpawnDir");
++
++                    b.Property<Guid>("SpawnMapId")
++                        .HasColumnName("SpawnMap");
++
++                    b.Property<int>("SpawnX");
++
++                    b.Property<int>("SpawnY");
++
++                    b.Property<string>("StatIncreaseJson")
++                        .HasColumnName("StatIncreases");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<string>("VitalIncreaseJson")
++                        .HasColumnName("VitalIncreases");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Classes");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("IngredientsJson")
++                        .HasColumnName("Ingredients");
++
++                    b.Property<Guid>("ItemId");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("Quantity");
++
++                    b.Property<int>("Time");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Crafts");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("CraftsJson")
++                        .HasColumnName("Crafts");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Name");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("CraftingTables");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("CommonEvent");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<bool>("Global");
++
++                    b.Property<Guid>("MapId");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("PagesJson")
++                        .HasColumnName("Pages");
++
++                    b.Property<int>("SpawnX");
++
++                    b.Property<int>("SpawnY");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Events");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AnimationId")
++                        .HasColumnName("Animation");
++
++                    b.Property<Guid>("AttackAnimationId")
++                        .HasColumnName("AttackAnimation");
++
++                    b.Property<int>("AttackSpeedModifier");
++
++                    b.Property<int>("AttackSpeedValue");
++
++                    b.Property<bool>("Bound");
++
++                    b.Property<int>("Cooldown");
++
++                    b.Property<int>("CritChance");
++
++                    b.Property<double>("CritMultiplier");
++
++                    b.Property<int>("Damage");
++
++                    b.Property<int>("DamageType");
++
++                    b.Property<string>("Description");
++
++                    b.Property<bool>("DestroySpell");
++
++                    b.Property<Guid>("EquipmentAnimationId")
++                        .HasColumnName("EquipmentAnimation");
++
++                    b.Property<int>("EquipmentSlot");
++
++                    b.Property<Guid>("EventId")
++                        .HasColumnName("Event");
++
++                    b.Property<string>("FemalePaperdoll");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Icon");
++
++                    b.Property<int>("ItemType");
++
++                    b.Property<string>("JsonUsageRequirements")
++                        .HasColumnName("UsageRequirements");
++
++                    b.Property<string>("MalePaperdoll");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("PercentageStatsJson")
++                        .HasColumnName("PercentageStatsGiven");
++
++                    b.Property<string>("PercentageVitalsJson")
++                        .HasColumnName("PercentageVitalsGiven");
++
++                    b.Property<int>("Price");
++
++                    b.Property<Guid>("ProjectileId")
++                        .HasColumnName("Projectile");
++
++                    b.Property<bool>("QuickCast");
++
++                    b.Property<int>("Rarity");
++
++                    b.Property<int>("Scaling");
++
++                    b.Property<int>("ScalingStat");
++
++                    b.Property<int>("SlotCount");
++
++                    b.Property<int>("Speed");
++
++                    b.Property<Guid>("SpellId")
++                        .HasColumnName("Spell");
++
++                    b.Property<bool>("Stackable");
++
++                    b.Property<int>("StatGrowth");
++
++                    b.Property<string>("StatsJson")
++                        .HasColumnName("StatsGiven");
++
++                    b.Property<string>("Tag");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<int>("Tool");
++
++                    b.Property<bool>("TwoHanded");
++
++                    b.Property<string>("VitalsJson")
++                        .HasColumnName("VitalsGiven");
++
++                    b.Property<string>("VitalsRegenJson")
++                        .HasColumnName("VitalsRegen");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Items");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("JsonData")
++                        .HasColumnName("JsonData");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("MapFolders");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("Aggressive");
++
++                    b.Property<bool>("AttackAllies");
++
++                    b.Property<Guid>("AttackAnimationId")
++                        .HasColumnName("AttackAnimation");
++
++                    b.Property<string>("AttackOnSightConditionsJson")
++                        .HasColumnName("AttackOnSightConditions");
++
++                    b.Property<int>("AttackSpeedModifier");
++
++                    b.Property<int>("AttackSpeedValue");
++
++                    b.Property<string>("CraftsJson")
++                        .HasColumnName("Spells");
++
++                    b.Property<int>("CritChance");
++
++                    b.Property<double>("CritMultiplier");
++
++                    b.Property<int>("Damage");
++
++                    b.Property<int>("DamageType");
++
++                    b.Property<long>("Experience");
++
++                    b.Property<byte>("FleeHealthPercentage");
++
++                    b.Property<bool>("FocusHighestDamageDealer");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("JsonAggroList")
++                        .HasColumnName("AggroList");
++
++                    b.Property<string>("JsonDrops")
++                        .HasColumnName("Drops");
++
++                    b.Property<string>("JsonMaxVital")
++                        .HasColumnName("MaxVital");
++
++                    b.Property<string>("JsonStat")
++                        .HasColumnName("Stats");
++
++                    b.Property<int>("Level");
++
++                    b.Property<byte>("Movement");
++
++                    b.Property<string>("Name");
++
++                    b.Property<bool>("NpcVsNpcEnabled");
++
++                    b.Property<Guid>("OnDeathEventId")
++                        .HasColumnName("OnDeathEvent");
++
++                    b.Property<Guid>("OnDeathPartyEventId")
++                        .HasColumnName("OnDeathPartyEvent");
++
++                    b.Property<string>("PlayerCanAttackConditionsJson")
++                        .HasColumnName("PlayerCanAttackConditions");
++
++                    b.Property<string>("PlayerFriendConditionsJson")
++                        .HasColumnName("PlayerFriendConditions");
++
++                    b.Property<string>("RegenJson")
++                        .HasColumnName("VitalRegen");
++
++                    b.Property<int>("Scaling");
++
++                    b.Property<int>("ScalingStat");
++
++                    b.Property<int>("SightRange");
++
++                    b.Property<int>("SpawnDuration");
++
++                    b.Property<int>("SpellFrequency");
++
++                    b.Property<string>("Sprite");
++
++                    b.Property<bool>("Swarm");
++
++                    b.Property<string>("Tag");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Npcs");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("TextId");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<byte>("Type");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("PlayerVariables");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AmmoItemId")
++                        .HasColumnName("Ammo");
++
++                    b.Property<int>("AmmoRequired");
++
++                    b.Property<string>("AnimationsJson")
++                        .HasColumnName("Animations");
++
++                    b.Property<int>("Delay");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<bool>("GrappleHook");
++
++                    b.Property<bool>("IgnoreActiveResources");
++
++                    b.Property<bool>("IgnoreExhaustedResources");
++
++                    b.Property<bool>("IgnoreMapBlocks");
++
++                    b.Property<bool>("IgnoreZDimension");
++
++                    b.Property<int>("Knockback");
++
++                    b.Property<string>("Name");
++
++                    b.Property<bool>("PierceTarget");
++
++                    b.Property<int>("Quantity");
++
++                    b.Property<int>("Range");
++
++                    b.Property<string>("SpawnsJson")
++                        .HasColumnName("SpawnLocations");
++
++                    b.Property<int>("Speed");
++
++                    b.Property<Guid>("SpellId")
++                        .HasColumnName("Spell");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Projectiles");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("BeforeDescription");
++
++                    b.Property<string>("EndDescription");
++
++                    b.Property<Guid>("EndEventId")
++                        .HasColumnName("EndEvent");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("InProgressDescription");
++
++                    b.Property<string>("JsonRequirements")
++                        .HasColumnName("Requirements");
++
++                    b.Property<bool>("LogAfterComplete");
++
++                    b.Property<bool>("LogBeforeOffer");
++
++                    b.Property<string>("Name");
++
++                    b.Property<bool>("Quitable");
++
++                    b.Property<bool>("Repeatable");
++
++                    b.Property<string>("StartDescription");
++
++                    b.Property<Guid>("StartEventId")
++                        .HasColumnName("StartEvent");
++
++                    b.Property<string>("TasksJson")
++                        .HasColumnName("Tasks");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Quests");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AnimationId")
++                        .HasColumnName("Animation");
++
++                    b.Property<Guid>("EventId")
++                        .HasColumnName("Event");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("JsonDrops")
++                        .HasColumnName("Drops");
++
++                    b.Property<string>("JsonHarvestingRequirements")
++                        .HasColumnName("HarvestingRequirements");
++
++                    b.Property<int>("MaxHp");
++
++                    b.Property<int>("MinHp");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("SpawnDuration");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<int>("Tool");
++
++                    b.Property<int>("VitalRegen");
++
++                    b.Property<bool>("WalkableAfter");
++
++                    b.Property<bool>("WalkableBefore");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Resources");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Json")
++                        .HasColumnName("Value");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("TextId");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<byte>("Type");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("ServerVariables");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("BuyingWhitelist");
++
++                    b.Property<Guid>("DefaultCurrencyId")
++                        .HasColumnName("DefaultCurrency");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("JsonBuyingItems")
++                        .HasColumnName("BuyingItems");
++
++                    b.Property<string>("JsonSellingItems")
++                        .HasColumnName("SellingItems");
++
++                    b.Property<string>("Name");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Shops");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("Bound");
++
++                    b.Property<Guid>("CastAnimationId")
++                        .HasColumnName("CastAnimation");
++
++                    b.Property<int>("CastDuration");
++
++                    b.Property<int>("CooldownDuration");
++
++                    b.Property<string>("Description");
++
++                    b.Property<Guid>("EventId")
++                        .HasColumnName("Event");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<Guid>("HitAnimationId")
++                        .HasColumnName("HitAnimation");
++
++                    b.Property<string>("Icon");
++
++                    b.Property<string>("JsonCastRequirements")
++                        .HasColumnName("CastRequirements");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("SpellType");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<string>("VitalCostJson")
++                        .HasColumnName("VitalCost");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Spells");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Name");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Tilesets");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("DaylightHuesJson")
++                        .HasColumnName("DaylightHues");
++
++                    b.Property<int>("RangeInterval");
++
++                    b.Property<float>("Rate");
++
++                    b.Property<bool>("SyncTime");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Time");
++                });
++
++            modelBuilder.Entity("Intersect.Server.Maps.MapInstance", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<int>("AHue");
++
++                    b.Property<byte[]>("AttributeData")
++                        .HasColumnName("Attributes");
++
++                    b.Property<int>("BHue");
++
++                    b.Property<int>("Brightness");
++
++                    b.Property<Guid>("Down");
++
++                    b.Property<string>("EventIdsJson")
++                        .HasColumnName("Events");
++
++                    b.Property<string>("Fog");
++
++                    b.Property<int>("FogTransparency");
++
++                    b.Property<int>("FogXSpeed");
++
++                    b.Property<int>("FogYSpeed");
++
++                    b.Property<int>("GHue");
++
++                    b.Property<bool>("IsIndoors");
++
++                    b.Property<Guid>("Left");
++
++                    b.Property<string>("LightsJson")
++                        .HasColumnName("Lights");
++
++                    b.Property<string>("Music");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("NpcSpawnsJson")
++                        .HasColumnName("NpcSpawns");
++
++                    b.Property<string>("OverlayGraphic");
++
++                    b.Property<string>("Panorama");
++
++                    b.Property<string>("PlayerLightColorJson")
++                        .HasColumnName("PlayerLightColor");
++
++                    b.Property<float>("PlayerLightExpand");
++
++                    b.Property<byte>("PlayerLightIntensity");
++
++                    b.Property<int>("PlayerLightSize");
++
++                    b.Property<int>("RHue");
++
++                    b.Property<int>("Revision");
++
++                    b.Property<Guid>("Right");
++
++                    b.Property<string>("Sound");
++
++                    b.Property<byte[]>("TileData");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<Guid>("Up");
++
++                    b.Property<Guid>("WeatherAnimationId")
++                        .HasColumnName("WeatherAnimation");
++
++                    b.Property<int>("WeatherIntensity");
++
++                    b.Property<int>("WeatherXSpeed");
++
++                    b.Property<int>("WeatherYSpeed");
++
++                    b.Property<int>("ZoneType");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Maps");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
++                        {
++                            b1.Property<Guid>("AnimationBaseId");
++
++                            b1.Property<bool>("AlternateRenderLayer");
++
++                            b1.Property<bool>("DisableRotations");
++
++                            b1.Property<int>("FrameCount");
++
++                            b1.Property<int>("FrameSpeed");
++
++                            b1.Property<string>("Light");
++
++                            b1.Property<int>("LoopCount");
++
++                            b1.Property<string>("Sprite");
++
++                            b1.Property<int>("XFrames");
++
++                            b1.Property<int>("YFrames");
++
++                            b1.ToTable("Animations");
++
++                            b1.HasOne("Intersect.GameObjects.AnimationBase")
++                                .WithOne("Lower")
++                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
++                        {
++                            b1.Property<Guid>("AnimationBaseId");
++
++                            b1.Property<bool>("AlternateRenderLayer");
++
++                            b1.Property<bool>("DisableRotations");
++
++                            b1.Property<int>("FrameCount");
++
++                            b1.Property<int>("FrameSpeed");
++
++                            b1.Property<string>("Light");
++
++                            b1.Property<int>("LoopCount");
++
++                            b1.Property<string>("Sprite");
++
++                            b1.Property<int>("XFrames");
++
++                            b1.Property<int>("YFrames");
++
++                            b1.ToTable("Animations");
++
++                            b1.HasOne("Intersect.GameObjects.AnimationBase")
++                                .WithOne("Upper")
++                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
++                        {
++                            b1.Property<Guid>("ItemBaseId");
++
++                            b1.Property<int>("Percentage");
++
++                            b1.Property<byte>("Type");
++
++                            b1.Property<int>("Value");
++
++                            b1.ToTable("Items");
++
++                            b1.HasOne("Intersect.GameObjects.ItemBase")
++                                .WithOne("Consumable")
++                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.EffectData", "Effect", b1 =>
++                        {
++                            b1.Property<Guid>("ItemBaseId");
++
++                            b1.Property<int>("Percentage");
++
++                            b1.Property<byte>("Type");
++
++                            b1.ToTable("Items");
++
++                            b1.HasOne("Intersect.GameObjects.ItemBase")
++                                .WithOne("Effect")
++                                .HasForeignKey("Intersect.GameObjects.EffectData", "ItemBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
++                        {
++                            b1.Property<Guid>("ResourceBaseId");
++
++                            b1.Property<string>("Graphic");
++
++                            b1.Property<bool>("GraphicFromTileset");
++
++                            b1.Property<int>("Height");
++
++                            b1.Property<bool>("RenderBelowEntities");
++
++                            b1.Property<int>("Width");
++
++                            b1.Property<int>("X");
++
++                            b1.Property<int>("Y");
++
++                            b1.ToTable("Resources");
++
++                            b1.HasOne("Intersect.GameObjects.ResourceBase")
++                                .WithOne("Exhausted")
++                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
++                        {
++                            b1.Property<Guid>("ResourceBaseId");
++
++                            b1.Property<string>("Graphic");
++
++                            b1.Property<bool>("GraphicFromTileset");
++
++                            b1.Property<int>("Height");
++
++                            b1.Property<bool>("RenderBelowEntities");
++
++                            b1.Property<int>("Width");
++
++                            b1.Property<int>("X");
++
++                            b1.Property<int>("Y");
++
++                            b1.ToTable("Resources");
++
++                            b1.HasOne("Intersect.GameObjects.ResourceBase")
++                                .WithOne("Initial")
++                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
++                        {
++                            b1.Property<Guid>("SpellBaseId");
++
++                            b1.Property<int>("CastRange");
++
++                            b1.Property<int>("CritChance");
++
++                            b1.Property<double>("CritMultiplier");
++
++                            b1.Property<int>("DamageType");
++
++                            b1.Property<int>("Duration");
++
++                            b1.Property<int>("Effect");
++
++                            b1.Property<bool>("Friendly");
++
++                            b1.Property<int>("HitRadius");
++
++                            b1.Property<bool>("HoTDoT");
++
++                            b1.Property<int>("HotDotInterval");
++
++                            b1.Property<int>("OnHitDuration")
++                                .HasColumnName("OnHit");
++
++                            b1.Property<string>("PercentageStatDiffJson")
++                                .HasColumnName("PercentageStatDiff");
++
++                            b1.Property<Guid>("ProjectileId")
++                                .HasColumnName("Projectile");
++
++                            b1.Property<int>("Scaling");
++
++                            b1.Property<int>("ScalingStat");
++
++                            b1.Property<string>("StatDiffJson")
++                                .HasColumnName("StatDiff");
++
++                            b1.Property<int>("TargetType");
++
++                            b1.Property<string>("TransformSprite");
++
++                            b1.Property<int>("TrapDuration")
++                                .HasColumnName("Trap");
++
++                            b1.Property<string>("VitalDiffJson")
++                                .HasColumnName("VitalDiff");
++
++                            b1.ToTable("Spells");
++
++                            b1.HasOne("Intersect.GameObjects.SpellBase")
++                                .WithOne("Combat")
++                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
++                        {
++                            b1.Property<Guid>("SpellBaseId");
++
++                            b1.Property<bool>("IgnoreActiveResources");
++
++                            b1.Property<bool>("IgnoreInactiveResources");
++
++                            b1.Property<bool>("IgnoreMapBlocks");
++
++                            b1.Property<bool>("IgnoreZDimensionAttributes");
++
++                            b1.ToTable("Spells");
++
++                            b1.HasOne("Intersect.GameObjects.SpellBase")
++                                .WithOne("Dash")
++                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
++                        {
++                            b1.Property<Guid>("SpellBaseId");
++
++                            b1.Property<int>("Dir");
++
++                            b1.Property<Guid>("MapId");
++
++                            b1.Property<int>("X");
++
++                            b1.Property<int>("Y");
++
++                            b1.ToTable("Spells");
++
++                            b1.HasOne("Intersect.GameObjects.SpellBase")
++                                .WithOne("Warp")
++                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++#pragma warning restore 612, 618
++        }
++    }
++}
+diff --git a/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs
+new file mode 100644
+index 00000000..32d0d58c
+--- /dev/null
++++ b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs
+@@ -0,0 +1,31 @@
++using Microsoft.EntityFrameworkCore.Migrations;
++
++namespace Intersect.Server.Migrations.Game
++{
++    public partial class AddingTagSystem : Migration
++    {
++        protected override void Up(MigrationBuilder migrationBuilder)
++        {
++            migrationBuilder.AddColumn<string>(
++                name: "Tag",
++                table: "Npcs",
++                nullable: true);
++
++            migrationBuilder.AddColumn<string>(
++                name: "Tag",
++                table: "Items",
++                nullable: true);
++        }
++
++        protected override void Down(MigrationBuilder migrationBuilder)
++        {
++            migrationBuilder.DropColumn(
++                name: "Tag",
++                table: "Npcs");
++
++            migrationBuilder.DropColumn(
++                name: "Tag",
++                table: "Items");
++        }
++    }
++}
+diff --git a/Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs b/Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs
+new file mode 100644
+index 00000000..b9167146
+--- /dev/null
++++ b/Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs
+@@ -0,0 +1,1045 @@
++// <auto-generated />
++using System;
++using Intersect.Server.Database.GameData;
++using Microsoft.EntityFrameworkCore;
++using Microsoft.EntityFrameworkCore.Infrastructure;
++using Microsoft.EntityFrameworkCore.Migrations;
++using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
++
++namespace Intersect.Server.Migrations.Game
++{
++    [DbContext(typeof(GameContext))]
++    [Migration("20200424140012_MapTags")]
++    partial class MapTags
++    {
++        protected override void BuildTargetModel(ModelBuilder modelBuilder)
++        {
++#pragma warning disable 612, 618
++            modelBuilder
++                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");
++
++            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("CompleteSound");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("Sound");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Animations");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AttackAnimationId")
++                        .HasColumnName("AttackAnimation");
++
++                    b.Property<int>("AttackSpeedModifier");
++
++                    b.Property<int>("AttackSpeedValue");
++
++                    b.Property<long>("BaseExp");
++
++                    b.Property<int>("BasePoints");
++
++                    b.Property<int>("CritChance");
++
++                    b.Property<double>("CritMultiplier");
++
++                    b.Property<int>("Damage");
++
++                    b.Property<int>("DamageType");
++
++                    b.Property<long>("ExpIncrease");
++
++                    b.Property<string>("ExpOverridesJson")
++                        .HasColumnName("ExperienceOverrides");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<bool>("IncreasePercentage");
++
++                    b.Property<string>("JsonBaseStats")
++                        .HasColumnName("BaseStats");
++
++                    b.Property<string>("JsonBaseVitals")
++                        .HasColumnName("BaseVitals");
++
++                    b.Property<string>("JsonItems")
++                        .HasColumnName("Items");
++
++                    b.Property<string>("JsonSpells")
++                        .HasColumnName("Spells");
++
++                    b.Property<string>("JsonSprites")
++                        .HasColumnName("Sprites");
++
++                    b.Property<bool>("Locked");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("PointIncrease");
++
++                    b.Property<string>("RegenJson")
++                        .HasColumnName("VitalRegen");
++
++                    b.Property<int>("Scaling");
++
++                    b.Property<int>("ScalingStat");
++
++                    b.Property<int>("SpawnDir");
++
++                    b.Property<Guid>("SpawnMapId")
++                        .HasColumnName("SpawnMap");
++
++                    b.Property<int>("SpawnX");
++
++                    b.Property<int>("SpawnY");
++
++                    b.Property<string>("StatIncreaseJson")
++                        .HasColumnName("StatIncreases");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<string>("VitalIncreaseJson")
++                        .HasColumnName("VitalIncreases");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Classes");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("IngredientsJson")
++                        .HasColumnName("Ingredients");
++
++                    b.Property<Guid>("ItemId");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("Quantity");
++
++                    b.Property<int>("Time");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Crafts");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("CraftsJson")
++                        .HasColumnName("Crafts");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Name");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("CraftingTables");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("CommonEvent");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<bool>("Global");
++
++                    b.Property<Guid>("MapId");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("PagesJson")
++                        .HasColumnName("Pages");
++
++                    b.Property<int>("SpawnX");
++
++                    b.Property<int>("SpawnY");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Events");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AnimationId")
++                        .HasColumnName("Animation");
++
++                    b.Property<Guid>("AttackAnimationId")
++                        .HasColumnName("AttackAnimation");
++
++                    b.Property<int>("AttackSpeedModifier");
++
++                    b.Property<int>("AttackSpeedValue");
++
++                    b.Property<bool>("Bound");
++
++                    b.Property<int>("Cooldown");
++
++                    b.Property<int>("CritChance");
++
++                    b.Property<double>("CritMultiplier");
++
++                    b.Property<int>("Damage");
++
++                    b.Property<int>("DamageType");
++
++                    b.Property<string>("Description");
++
++                    b.Property<bool>("DestroySpell");
++
++                    b.Property<Guid>("EquipmentAnimationId")
++                        .HasColumnName("EquipmentAnimation");
++
++                    b.Property<int>("EquipmentSlot");
++
++                    b.Property<Guid>("EventId")
++                        .HasColumnName("Event");
++
++                    b.Property<string>("FemalePaperdoll");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Icon");
++
++                    b.Property<int>("ItemType");
++
++                    b.Property<string>("JsonTags")
++                        .HasColumnName("Tag");
++
++                    b.Property<string>("JsonUsageRequirements")
++                        .HasColumnName("UsageRequirements");
++
++                    b.Property<string>("MalePaperdoll");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("PercentageStatsJson")
++                        .HasColumnName("PercentageStatsGiven");
++
++                    b.Property<string>("PercentageVitalsJson")
++                        .HasColumnName("PercentageVitalsGiven");
++
++                    b.Property<int>("Price");
++
++                    b.Property<Guid>("ProjectileId")
++                        .HasColumnName("Projectile");
++
++                    b.Property<bool>("QuickCast");
++
++                    b.Property<int>("Rarity");
++
++                    b.Property<int>("Scaling");
++
++                    b.Property<int>("ScalingStat");
++
++                    b.Property<int>("SlotCount");
++
++                    b.Property<int>("Speed");
++
++                    b.Property<Guid>("SpellId")
++                        .HasColumnName("Spell");
++
++                    b.Property<bool>("Stackable");
++
++                    b.Property<int>("StatGrowth");
++
++                    b.Property<string>("StatsJson")
++                        .HasColumnName("StatsGiven");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<int>("Tool");
++
++                    b.Property<bool>("TwoHanded");
++
++                    b.Property<string>("VitalsJson")
++                        .HasColumnName("VitalsGiven");
++
++                    b.Property<string>("VitalsRegenJson")
++                        .HasColumnName("VitalsRegen");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Items");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("JsonData")
++                        .HasColumnName("JsonData");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("MapFolders");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("Aggressive");
++
++                    b.Property<bool>("AttackAllies");
++
++                    b.Property<Guid>("AttackAnimationId")
++                        .HasColumnName("AttackAnimation");
++
++                    b.Property<string>("AttackOnSightConditionsJson")
++                        .HasColumnName("AttackOnSightConditions");
++
++                    b.Property<int>("AttackSpeedModifier");
++
++                    b.Property<int>("AttackSpeedValue");
++
++                    b.Property<string>("CraftsJson")
++                        .HasColumnName("Spells");
++
++                    b.Property<int>("CritChance");
++
++                    b.Property<double>("CritMultiplier");
++
++                    b.Property<int>("Damage");
++
++                    b.Property<int>("DamageType");
++
++                    b.Property<long>("Experience");
++
++                    b.Property<byte>("FleeHealthPercentage");
++
++                    b.Property<bool>("FocusHighestDamageDealer");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("JsonAggroList")
++                        .HasColumnName("AggroList");
++
++                    b.Property<string>("JsonDrops")
++                        .HasColumnName("Drops");
++
++                    b.Property<string>("JsonMaxVital")
++                        .HasColumnName("MaxVital");
++
++                    b.Property<string>("JsonStat")
++                        .HasColumnName("Stats");
++
++                    b.Property<string>("JsonTags")
++                        .HasColumnName("Tag");
++
++                    b.Property<int>("Level");
++
++                    b.Property<byte>("Movement");
++
++                    b.Property<string>("Name");
++
++                    b.Property<bool>("NpcVsNpcEnabled");
++
++                    b.Property<Guid>("OnDeathEventId")
++                        .HasColumnName("OnDeathEvent");
++
++                    b.Property<Guid>("OnDeathPartyEventId")
++                        .HasColumnName("OnDeathPartyEvent");
++
++                    b.Property<string>("PlayerCanAttackConditionsJson")
++                        .HasColumnName("PlayerCanAttackConditions");
++
++                    b.Property<string>("PlayerFriendConditionsJson")
++                        .HasColumnName("PlayerFriendConditions");
++
++                    b.Property<string>("RegenJson")
++                        .HasColumnName("VitalRegen");
++
++                    b.Property<int>("Scaling");
++
++                    b.Property<int>("ScalingStat");
++
++                    b.Property<int>("SightRange");
++
++                    b.Property<int>("SpawnDuration");
++
++                    b.Property<int>("SpellFrequency");
++
++                    b.Property<string>("Sprite");
++
++                    b.Property<bool>("Swarm");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Npcs");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("TextId");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<byte>("Type");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("PlayerVariables");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AmmoItemId")
++                        .HasColumnName("Ammo");
++
++                    b.Property<int>("AmmoRequired");
++
++                    b.Property<string>("AnimationsJson")
++                        .HasColumnName("Animations");
++
++                    b.Property<int>("Delay");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<bool>("GrappleHook");
++
++                    b.Property<bool>("IgnoreActiveResources");
++
++                    b.Property<bool>("IgnoreExhaustedResources");
++
++                    b.Property<bool>("IgnoreMapBlocks");
++
++                    b.Property<bool>("IgnoreZDimension");
++
++                    b.Property<int>("Knockback");
++
++                    b.Property<string>("Name");
++
++                    b.Property<bool>("PierceTarget");
++
++                    b.Property<int>("Quantity");
++
++                    b.Property<int>("Range");
++
++                    b.Property<string>("SpawnsJson")
++                        .HasColumnName("SpawnLocations");
++
++                    b.Property<int>("Speed");
++
++                    b.Property<Guid>("SpellId")
++                        .HasColumnName("Spell");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Projectiles");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("BeforeDescription");
++
++                    b.Property<string>("EndDescription");
++
++                    b.Property<Guid>("EndEventId")
++                        .HasColumnName("EndEvent");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("InProgressDescription");
++
++                    b.Property<string>("JsonRequirements")
++                        .HasColumnName("Requirements");
++
++                    b.Property<bool>("LogAfterComplete");
++
++                    b.Property<bool>("LogBeforeOffer");
++
++                    b.Property<string>("Name");
++
++                    b.Property<bool>("Quitable");
++
++                    b.Property<bool>("Repeatable");
++
++                    b.Property<string>("StartDescription");
++
++                    b.Property<Guid>("StartEventId")
++                        .HasColumnName("StartEvent");
++
++                    b.Property<string>("TasksJson")
++                        .HasColumnName("Tasks");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Quests");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<Guid>("AnimationId")
++                        .HasColumnName("Animation");
++
++                    b.Property<Guid>("EventId")
++                        .HasColumnName("Event");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("JsonDrops")
++                        .HasColumnName("Drops");
++
++                    b.Property<string>("JsonHarvestingRequirements")
++                        .HasColumnName("HarvestingRequirements");
++
++                    b.Property<int>("MaxHp");
++
++                    b.Property<int>("MinHp");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("SpawnDuration");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<int>("Tool");
++
++                    b.Property<int>("VitalRegen");
++
++                    b.Property<bool>("WalkableAfter");
++
++                    b.Property<bool>("WalkableBefore");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Resources");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("Json")
++                        .HasColumnName("Value");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("TextId");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<byte>("Type");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("ServerVariables");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("BuyingWhitelist");
++
++                    b.Property<Guid>("DefaultCurrencyId")
++                        .HasColumnName("DefaultCurrency");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<string>("JsonBuyingItems")
++                        .HasColumnName("BuyingItems");
++
++                    b.Property<string>("JsonSellingItems")
++                        .HasColumnName("SellingItems");
++
++                    b.Property<string>("Name");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Shops");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<bool>("Bound");
++
++                    b.Property<Guid>("CastAnimationId")
++                        .HasColumnName("CastAnimation");
++
++                    b.Property<int>("CastDuration");
++
++                    b.Property<int>("CooldownDuration");
++
++                    b.Property<string>("Description");
++
++                    b.Property<Guid>("EventId")
++                        .HasColumnName("Event");
++
++                    b.Property<string>("Folder");
++
++                    b.Property<Guid>("HitAnimationId")
++                        .HasColumnName("HitAnimation");
++
++                    b.Property<string>("Icon");
++
++                    b.Property<string>("JsonCastRequirements")
++                        .HasColumnName("CastRequirements");
++
++                    b.Property<string>("Name");
++
++                    b.Property<int>("SpellType");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<string>("VitalCostJson")
++                        .HasColumnName("VitalCost");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Spells");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("Name");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Tilesets");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<string>("DaylightHuesJson")
++                        .HasColumnName("DaylightHues");
++
++                    b.Property<int>("RangeInterval");
++
++                    b.Property<float>("Rate");
++
++                    b.Property<bool>("SyncTime");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Time");
++                });
++
++            modelBuilder.Entity("Intersect.Server.Maps.MapInstance", b =>
++                {
++                    b.Property<Guid>("Id")
++                        .ValueGeneratedOnAdd();
++
++                    b.Property<int>("AHue");
++
++                    b.Property<byte[]>("AttributeData")
++                        .HasColumnName("Attributes");
++
++                    b.Property<int>("BHue");
++
++                    b.Property<int>("Brightness");
++
++                    b.Property<Guid>("Down");
++
++                    b.Property<string>("EventIdsJson")
++                        .HasColumnName("Events");
++
++                    b.Property<string>("Fog");
++
++                    b.Property<int>("FogTransparency");
++
++                    b.Property<int>("FogXSpeed");
++
++                    b.Property<int>("FogYSpeed");
++
++                    b.Property<int>("GHue");
++
++                    b.Property<bool>("IsIndoors");
++
++                    b.Property<string>("JsonTags")
++                        .HasColumnName("Tag");
++
++                    b.Property<Guid>("Left");
++
++                    b.Property<string>("LightsJson")
++                        .HasColumnName("Lights");
++
++                    b.Property<string>("Music");
++
++                    b.Property<string>("Name");
++
++                    b.Property<string>("NpcSpawnsJson")
++                        .HasColumnName("NpcSpawns");
++
++                    b.Property<string>("OverlayGraphic");
++
++                    b.Property<string>("Panorama");
++
++                    b.Property<string>("PlayerLightColorJson")
++                        .HasColumnName("PlayerLightColor");
++
++                    b.Property<float>("PlayerLightExpand");
++
++                    b.Property<byte>("PlayerLightIntensity");
++
++                    b.Property<int>("PlayerLightSize");
++
++                    b.Property<int>("RHue");
++
++                    b.Property<int>("Revision");
++
++                    b.Property<Guid>("Right");
++
++                    b.Property<string>("Sound");
++
++                    b.Property<byte[]>("TileData");
++
++                    b.Property<long>("TimeCreated");
++
++                    b.Property<Guid>("Up");
++
++                    b.Property<Guid>("WeatherAnimationId")
++                        .HasColumnName("WeatherAnimation");
++
++                    b.Property<int>("WeatherIntensity");
++
++                    b.Property<int>("WeatherXSpeed");
++
++                    b.Property<int>("WeatherYSpeed");
++
++                    b.Property<int>("ZoneType");
++
++                    b.HasKey("Id");
++
++                    b.ToTable("Maps");
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
++                        {
++                            b1.Property<Guid>("AnimationBaseId");
++
++                            b1.Property<bool>("AlternateRenderLayer");
++
++                            b1.Property<bool>("DisableRotations");
++
++                            b1.Property<int>("FrameCount");
++
++                            b1.Property<int>("FrameSpeed");
++
++                            b1.Property<string>("Light");
++
++                            b1.Property<int>("LoopCount");
++
++                            b1.Property<string>("Sprite");
++
++                            b1.Property<int>("XFrames");
++
++                            b1.Property<int>("YFrames");
++
++                            b1.ToTable("Animations");
++
++                            b1.HasOne("Intersect.GameObjects.AnimationBase")
++                                .WithOne("Lower")
++                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
++                        {
++                            b1.Property<Guid>("AnimationBaseId");
++
++                            b1.Property<bool>("AlternateRenderLayer");
++
++                            b1.Property<bool>("DisableRotations");
++
++                            b1.Property<int>("FrameCount");
++
++                            b1.Property<int>("FrameSpeed");
++
++                            b1.Property<string>("Light");
++
++                            b1.Property<int>("LoopCount");
++
++                            b1.Property<string>("Sprite");
++
++                            b1.Property<int>("XFrames");
++
++                            b1.Property<int>("YFrames");
++
++                            b1.ToTable("Animations");
++
++                            b1.HasOne("Intersect.GameObjects.AnimationBase")
++                                .WithOne("Upper")
++                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
++                        {
++                            b1.Property<Guid>("ItemBaseId");
++
++                            b1.Property<int>("Percentage");
++
++                            b1.Property<byte>("Type");
++
++                            b1.Property<int>("Value");
++
++                            b1.ToTable("Items");
++
++                            b1.HasOne("Intersect.GameObjects.ItemBase")
++                                .WithOne("Consumable")
++                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.EffectData", "Effect", b1 =>
++                        {
++                            b1.Property<Guid>("ItemBaseId");
++
++                            b1.Property<int>("Percentage");
++
++                            b1.Property<byte>("Type");
++
++                            b1.ToTable("Items");
++
++                            b1.HasOne("Intersect.GameObjects.ItemBase")
++                                .WithOne("Effect")
++                                .HasForeignKey("Intersect.GameObjects.EffectData", "ItemBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
++                        {
++                            b1.Property<Guid>("ResourceBaseId");
++
++                            b1.Property<string>("Graphic");
++
++                            b1.Property<bool>("GraphicFromTileset");
++
++                            b1.Property<int>("Height");
++
++                            b1.Property<bool>("RenderBelowEntities");
++
++                            b1.Property<int>("Width");
++
++                            b1.Property<int>("X");
++
++                            b1.Property<int>("Y");
++
++                            b1.ToTable("Resources");
++
++                            b1.HasOne("Intersect.GameObjects.ResourceBase")
++                                .WithOne("Exhausted")
++                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
++                        {
++                            b1.Property<Guid>("ResourceBaseId");
++
++                            b1.Property<string>("Graphic");
++
++                            b1.Property<bool>("GraphicFromTileset");
++
++                            b1.Property<int>("Height");
++
++                            b1.Property<bool>("RenderBelowEntities");
++
++                            b1.Property<int>("Width");
++
++                            b1.Property<int>("X");
++
++                            b1.Property<int>("Y");
++
++                            b1.ToTable("Resources");
++
++                            b1.HasOne("Intersect.GameObjects.ResourceBase")
++                                .WithOne("Initial")
++                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++
++            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
++                {
++                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
++                        {
++                            b1.Property<Guid>("SpellBaseId");
++
++                            b1.Property<int>("CastRange");
++
++                            b1.Property<int>("CritChance");
++
++                            b1.Property<double>("CritMultiplier");
++
++                            b1.Property<int>("DamageType");
++
++                            b1.Property<int>("Duration");
++
++                            b1.Property<int>("Effect");
++
++                            b1.Property<bool>("Friendly");
++
++                            b1.Property<int>("HitRadius");
++
++                            b1.Property<bool>("HoTDoT");
++
++                            b1.Property<int>("HotDotInterval");
++
++                            b1.Property<int>("OnHitDuration")
++                                .HasColumnName("OnHit");
++
++                            b1.Property<string>("PercentageStatDiffJson")
++                                .HasColumnName("PercentageStatDiff");
++
++                            b1.Property<Guid>("ProjectileId")
++                                .HasColumnName("Projectile");
++
++                            b1.Property<int>("Scaling");
++
++                            b1.Property<int>("ScalingStat");
++
++                            b1.Property<string>("StatDiffJson")
++                                .HasColumnName("StatDiff");
++
++                            b1.Property<int>("TargetType");
++
++                            b1.Property<string>("TransformSprite");
++
++                            b1.Property<int>("TrapDuration")
++                                .HasColumnName("Trap");
++
++                            b1.Property<string>("VitalDiffJson")
++                                .HasColumnName("VitalDiff");
++
++                            b1.ToTable("Spells");
++
++                            b1.HasOne("Intersect.GameObjects.SpellBase")
++                                .WithOne("Combat")
++                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
++                        {
++                            b1.Property<Guid>("SpellBaseId");
++
++                            b1.Property<bool>("IgnoreActiveResources");
++
++                            b1.Property<bool>("IgnoreInactiveResources");
++
++                            b1.Property<bool>("IgnoreMapBlocks");
++
++                            b1.Property<bool>("IgnoreZDimensionAttributes");
++
++                            b1.ToTable("Spells");
++
++                            b1.HasOne("Intersect.GameObjects.SpellBase")
++                                .WithOne("Dash")
++                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++
++                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
++                        {
++                            b1.Property<Guid>("SpellBaseId");
++
++                            b1.Property<int>("Dir");
++
++                            b1.Property<Guid>("MapId");
++
++                            b1.Property<int>("X");
++
++                            b1.Property<int>("Y");
++
++                            b1.ToTable("Spells");
++
++                            b1.HasOne("Intersect.GameObjects.SpellBase")
++                                .WithOne("Warp")
++                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
++                                .OnDelete(DeleteBehavior.Cascade);
++                        });
++                });
++#pragma warning restore 612, 618
++        }
++    }
++}
+diff --git a/Intersect.Server/Migrations/Game/20200424140012_MapTags.cs b/Intersect.Server/Migrations/Game/20200424140012_MapTags.cs
+new file mode 100644
+index 00000000..273d3818
+--- /dev/null
++++ b/Intersect.Server/Migrations/Game/20200424140012_MapTags.cs
+@@ -0,0 +1,22 @@
++using Microsoft.EntityFrameworkCore.Migrations;
++
++namespace Intersect.Server.Migrations.Game
++{
++    public partial class MapTags : Migration
++    {
++        protected override void Up(MigrationBuilder migrationBuilder)
++        {
++            migrationBuilder.AddColumn<string>(
++                name: "Tag",
++                table: "Maps",
++                nullable: true);
++        }
++
++        protected override void Down(MigrationBuilder migrationBuilder)
++        {
++            migrationBuilder.DropColumn(
++                name: "Tag",
++                table: "Maps");
++        }
++    }
++}
+diff --git a/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs b/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
+index fbfd65a8..5a4b8cb5 100644
+--- a/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
++++ b/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
+@@ -239,6 +239,9 @@ protected override void BuildModel(ModelBuilder modelBuilder)
+ 
+                     b.Property<int>("ItemType");
+ 
++                    b.Property<string>("JsonTags")
++                        .HasColumnName("Tag");
++
+                     b.Property<string>("JsonUsageRequirements")
+                         .HasColumnName("UsageRequirements");
+ 
+@@ -359,6 +362,9 @@ protected override void BuildModel(ModelBuilder modelBuilder)
+                     b.Property<string>("JsonStat")
+                         .HasColumnName("Stats");
+ 
++                    b.Property<string>("JsonTags")
++                        .HasColumnName("Tag");
++
+                     b.Property<int>("Level");
+ 
+                     b.Property<byte>("Movement");
+@@ -718,6 +724,9 @@ protected override void BuildModel(ModelBuilder modelBuilder)
+ 
+                     b.Property<bool>("IsIndoors");
+ 
++                    b.Property<string>("JsonTags")
++                        .HasColumnName("Tag");
++
+                     b.Property<Guid>("Left");
+ 
+                     b.Property<string>("LightsJson")
diff --git a/2.patch b/2.patch
new file mode 100644
index 00000000..4f3ed34e
--- /dev/null
+++ b/2.patch
@@ -0,0 +1,1591 @@
+From 4284f757389db649e2fb9eb31f2261ab2f563537 Mon Sep 17 00:00:00 2001
+From: Joyce <azurebeats@hotmail.nl>
+Date: Sun, 26 Apr 2020 10:12:54 +0200
+Subject: [PATCH] Modified the Take Items option to instead be Change Items,
+ like I should have done in the first place.
+
+---
+ .../Events/Commands/EventCommands.cs          |  10 +-
+ Intersect (Core)/GameObjects/Events/Enums.cs  |   2 +-
+ .../Forms/Editors/Events/CommandPrinter.cs    |  14 +-
+ ...EventCommand_ChangeItemsByTag.Designer.cs} | 132 ++++++---
+ ...ag.cs => EventCommand_ChangeItemsByTag.cs} |  23 +-
+ ...esx => EventCommand_ChangeItemsByTag.resx} |  61 ++--
+ .../Forms/Editors/Events/frmEvent.Designer.cs | 274 +++++++++---------
+ .../Forms/Editors/Events/frmEvent.cs          |   8 +-
+ Intersect.Editor/Intersect.Editor.csproj      |  10 +-
+ Intersect.Editor/Localization/Strings.cs      |  20 +-
+ .../Entities/Events/CommandProcessing.cs      |  69 +++--
+ Intersect.Server/Entities/Player.cs           |   7 +-
+ 12 files changed, 356 insertions(+), 274 deletions(-)
+ rename Intersect.Editor/Forms/Editors/Events/Event Commands/{EventCommand_TakeItemsByTag.Designer.cs => EventCommand_ChangeItemsByTag.Designer.cs} (57%)
+ rename Intersect.Editor/Forms/Editors/Events/Event Commands/{EventCommand_TakeItemsByTag.cs => EventCommand_ChangeItemsByTag.cs} (61%)
+ rename Intersect.Editor/Forms/Editors/Events/Event Commands/{EventCommand_TakeItemsByTag.resx => EventCommand_ChangeItemsByTag.resx} (87%)
+
+diff --git a/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs b/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs
+index 9b3214e3..135e7a7e 100644
+--- a/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs	
++++ b/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs	
+@@ -464,15 +464,15 @@ public override void FixBranchIds(Dictionary<Guid, Guid> idDict)
+ 
+     }
+ 
+-    public class TakeItemsByTag : EventCommand
++    public class ChangeItemsByTag : EventCommand
+     {
+ 
+         //For Json Deserialization
+-        public TakeItemsByTag()
++        public ChangeItemsByTag()
+         {
+         }
+ 
+-        public TakeItemsByTag(Dictionary<Guid, List<EventCommand>> commandLists)
++        public ChangeItemsByTag(Dictionary<Guid, List<EventCommand>> commandLists)
+         {
+             for (var i = 0; i < BranchIds.Length; i++)
+             {
+@@ -481,10 +481,12 @@ public TakeItemsByTag(Dictionary<Guid, List<EventCommand>> commandLists)
+             }
+         }
+ 
+-        public override EventCommandType Type { get; } = EventCommandType.TakeItemsByTag;
++        public override EventCommandType Type { get; } = EventCommandType.ChangeItemsByTag;
+ 
+         public string Tag { get; set; }
+ 
++        public bool Add { get; set; } //If !Add then Remove
++
+         public int Quantity { get; set; }
+ 
+         public Guid[] BranchIds { get; set; } =
+diff --git a/Intersect (Core)/GameObjects/Events/Enums.cs b/Intersect (Core)/GameObjects/Events/Enums.cs
+index 3f49f859..e305fdd2 100644
+--- a/Intersect (Core)/GameObjects/Events/Enums.cs	
++++ b/Intersect (Core)/GameObjects/Events/Enums.cs	
+@@ -216,7 +216,7 @@ public enum EventCommandType
+         PlayerLabel,
+ 
+         // Take Items By tag
+-        TakeItemsByTag,
++        ChangeItemsByTag,
+ 
+     }
+ 
+diff --git a/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs b/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
+index f433e77f..3edbe037 100644
+--- a/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
++++ b/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
+@@ -349,8 +349,8 @@ MapInstance map
+                             mCommandProperties.Add(clp);
+ 
+                             break;
+-                        case EventCommandType.TakeItemsByTag:
+-                            var titm = (TakeItemsByTag)commandList[i];
++                        case EventCommandType.ChangeItemsByTag:
++                            var titm = (ChangeItemsByTag)commandList[i];
+                             lstEventCommands.Items.Add(
+                                 indent +
+                                 Strings.EventCommandList.linestart +
+@@ -368,7 +368,7 @@ MapInstance map
+                             mCommandProperties.Add(clp);
+ 
+                             //When the item(s) were successfully taken:
+-                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemstakenbytag);
++                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemchangedbytag);
+                             clp = new CommandListProperties {
+                                 Editable = false,
+                                 MyIndex = i,
+@@ -384,7 +384,7 @@ MapInstance map
+                             );
+ 
+                             //When the items failed to be given/taken:
+-                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemsnottakenbytag);
++                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemnotchangedbytag);
+                             clp = new CommandListProperties {
+                                 Editable = false,
+                                 MyIndex = i,
+@@ -399,7 +399,7 @@ MapInstance map
+                                 mCommandProperties, map
+                             );
+ 
+-                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.endtakeitemsbytag);
++                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.endchangeitemsbytag);
+                             clp = new CommandListProperties {
+                                 Editable = false,
+                                 MyIndex = i,
+@@ -681,10 +681,10 @@ private static string GetCommandText(ChangeItemsCommand command, MapInstance map
+             );
+         }
+ 
+-        private static string GetCommandText(TakeItemsByTag command, MapInstance map)
++        private static string GetCommandText(ChangeItemsByTag command, MapInstance map)
+         {
+ 
+-            return Strings.EventCommandList.takeitemsbytag.ToString(command.Tag);
++            return Strings.EventCommandList.changeitemsbytag.ToString(command.Tag);
+         }
+ 
+         private static string GetCommandText(EquipItemCommand command, MapInstance map)
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs
+similarity index 57%
+rename from Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs
+rename to Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs
+index 2e756720..2bbda1b7 100644
+--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.Designer.cs	
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs	
+@@ -2,7 +2,7 @@
+ 
+ namespace Intersect.Editor.Forms.Editors.Events.Event_Commands
+ {
+-    partial class EventCommandTakeItemsBytag
++    partial class EventCommandChangeItemsBytag
+     {
+         /// <summary>
+         /// Required designer variable.
+@@ -30,41 +30,78 @@ protected override void Dispose(bool disposing)
+         /// </summary>
+         private void InitializeComponent()
+         {
+-            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventCommandTakeItemsBytag));
+-            this.grpTakeItemBytag = new DarkUI.Controls.DarkGroupBox();
++            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventCommandChangeItemsBytag));
++            this.grpChangeItemsBytag = new DarkUI.Controls.DarkGroupBox();
++            this.cmbAction = new DarkUI.Controls.DarkComboBox();
++            this.lblAction = new System.Windows.Forms.Label();
+             this.nudGiveTakeAmount = new DarkUI.Controls.DarkNumericUpDown();
+             this.lblAmount = new System.Windows.Forms.Label();
+             this.cmbTags = new DarkUI.Controls.DarkComboBox();
+             this.lblTag = new System.Windows.Forms.Label();
+             this.btnCancel = new DarkUI.Controls.DarkButton();
+             this.btnSave = new DarkUI.Controls.DarkButton();
+-            this.grpTakeItemBytag.SuspendLayout();
++            this.grpChangeItemsBytag.SuspendLayout();
+             ((System.ComponentModel.ISupportInitialize)(this.nudGiveTakeAmount)).BeginInit();
+             this.SuspendLayout();
+-            //
+-            // grpTakeItemBytag
+-            //
+-            this.grpTakeItemBytag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+-            this.grpTakeItemBytag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+-            this.grpTakeItemBytag.Controls.Add(this.nudGiveTakeAmount);
+-            this.grpTakeItemBytag.Controls.Add(this.lblAmount);
+-            this.grpTakeItemBytag.Controls.Add(this.cmbTags);
+-            this.grpTakeItemBytag.Controls.Add(this.lblTag);
+-            this.grpTakeItemBytag.Controls.Add(this.btnCancel);
+-            this.grpTakeItemBytag.Controls.Add(this.btnSave);
+-            this.grpTakeItemBytag.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.grpTakeItemBytag.Location = new System.Drawing.Point(3, 3);
+-            this.grpTakeItemBytag.Name = "grpTakeItemBytag";
+-            this.grpTakeItemBytag.Size = new System.Drawing.Size(193, 133);
+-            this.grpTakeItemBytag.TabIndex = 17;
+-            this.grpTakeItemBytag.TabStop = false;
+-            this.grpTakeItemBytag.Text = "Take Item By Tag:";
+-            //
++            // 
++            // grpChangeItemsBytag
++            // 
++            this.grpChangeItemsBytag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
++            this.grpChangeItemsBytag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.grpChangeItemsBytag.Controls.Add(this.cmbAction);
++            this.grpChangeItemsBytag.Controls.Add(this.lblAction);
++            this.grpChangeItemsBytag.Controls.Add(this.nudGiveTakeAmount);
++            this.grpChangeItemsBytag.Controls.Add(this.lblAmount);
++            this.grpChangeItemsBytag.Controls.Add(this.cmbTags);
++            this.grpChangeItemsBytag.Controls.Add(this.lblTag);
++            this.grpChangeItemsBytag.Controls.Add(this.btnCancel);
++            this.grpChangeItemsBytag.Controls.Add(this.btnSave);
++            this.grpChangeItemsBytag.ForeColor = System.Drawing.Color.Gainsboro;
++            this.grpChangeItemsBytag.Location = new System.Drawing.Point(3, 3);
++            this.grpChangeItemsBytag.Name = "grpChangeItemsBytag";
++            this.grpChangeItemsBytag.Size = new System.Drawing.Size(193, 133);
++            this.grpChangeItemsBytag.TabIndex = 17;
++            this.grpChangeItemsBytag.TabStop = false;
++            this.grpChangeItemsBytag.Text = "Change Items By Tag:";
++            // 
++            // cmbAction
++            // 
++            this.cmbAction.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
++            this.cmbAction.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
++            this.cmbAction.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
++            this.cmbAction.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
++            this.cmbAction.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAction.ButtonIcon")));
++            this.cmbAction.DrawDropdownHoverOutline = false;
++            this.cmbAction.DrawFocusRectangle = false;
++            this.cmbAction.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
++            this.cmbAction.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
++            this.cmbAction.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
++            this.cmbAction.ForeColor = System.Drawing.Color.Gainsboro;
++            this.cmbAction.FormattingEnabled = true;
++            this.cmbAction.Items.AddRange(new object[] {
++            "Give",
++            "Take"});
++            this.cmbAction.Location = new System.Drawing.Point(64, 15);
++            this.cmbAction.Name = "cmbAction";
++            this.cmbAction.Size = new System.Drawing.Size(115, 21);
++            this.cmbAction.TabIndex = 28;
++            this.cmbAction.Text = "Give";
++            this.cmbAction.TextPadding = new System.Windows.Forms.Padding(2);
++            // 
++            // lblAction
++            // 
++            this.lblAction.AutoSize = true;
++            this.lblAction.Location = new System.Drawing.Point(5, 17);
++            this.lblAction.Name = "lblAction";
++            this.lblAction.Size = new System.Drawing.Size(40, 13);
++            this.lblAction.TabIndex = 27;
++            this.lblAction.Text = "Action:";
++            // 
+             // nudGiveTakeAmount
+-            //
++            // 
+             this.nudGiveTakeAmount.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.nudGiveTakeAmount.ForeColor = System.Drawing.Color.Gainsboro;
+-            this.nudGiveTakeAmount.Location = new System.Drawing.Point(64, 46);
++            this.nudGiveTakeAmount.Location = new System.Drawing.Point(64, 69);
+             this.nudGiveTakeAmount.Maximum = new decimal(new int[] {
+             100000,
+             0,
+@@ -83,18 +120,18 @@ private void InitializeComponent()
+             0,
+             0,
+             0});
+-            //
++            // 
+             // lblAmount
+-            //
++            // 
+             this.lblAmount.AutoSize = true;
+-            this.lblAmount.Location = new System.Drawing.Point(6, 48);
++            this.lblAmount.Location = new System.Drawing.Point(5, 71);
+             this.lblAmount.Name = "lblAmount";
+             this.lblAmount.Size = new System.Drawing.Size(46, 13);
+             this.lblAmount.TabIndex = 25;
+             this.lblAmount.Text = "Amount:";
+-            //
++            // 
+             // cmbTags
+-            //
++            // 
+             this.cmbTags.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbTags.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbTags.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -107,23 +144,24 @@ private void InitializeComponent()
+             this.cmbTags.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+             this.cmbTags.ForeColor = System.Drawing.Color.Gainsboro;
+             this.cmbTags.FormattingEnabled = true;
+-            this.cmbTags.Location = new System.Drawing.Point(64, 19);
++            this.cmbTags.Location = new System.Drawing.Point(64, 42);
+             this.cmbTags.Name = "cmbTags";
+             this.cmbTags.Size = new System.Drawing.Size(115, 21);
+             this.cmbTags.TabIndex = 22;
++            this.cmbTags.Text = null;
+             this.cmbTags.TextPadding = new System.Windows.Forms.Padding(2);
+-            //
++            // 
+             // lblTag
+-            //
++            // 
+             this.lblTag.AutoSize = true;
+-            this.lblTag.Location = new System.Drawing.Point(5, 21);
++            this.lblTag.Location = new System.Drawing.Point(5, 45);
+             this.lblTag.Name = "lblTag";
+             this.lblTag.Size = new System.Drawing.Size(29, 13);
+             this.lblTag.TabIndex = 21;
+             this.lblTag.Text = "Tag:";
+-            //
++            // 
+             // btnCancel
+-            //
++            // 
+             this.btnCancel.Location = new System.Drawing.Point(89, 104);
+             this.btnCancel.Name = "btnCancel";
+             this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+@@ -131,9 +169,9 @@ private void InitializeComponent()
+             this.btnCancel.TabIndex = 20;
+             this.btnCancel.Text = "Cancel";
+             this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+-            //
++            // 
+             // btnSave
+-            //
++            // 
+             this.btnSave.Location = new System.Drawing.Point(8, 104);
+             this.btnSave.Name = "btnSave";
+             this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+@@ -141,18 +179,18 @@ private void InitializeComponent()
+             this.btnSave.TabIndex = 19;
+             this.btnSave.Text = "Ok";
+             this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+-            //
+-            // EventCommandTakeItemsBytag
+-            //
++            // 
++            // EventCommandChangeItemsBytag
++            // 
+             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+             this.AutoSize = true;
+             this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+-            this.Controls.Add(this.grpTakeItemBytag);
+-            this.Name = "EventCommandTakeItemsBytag";
++            this.Controls.Add(this.grpChangeItemsBytag);
++            this.Name = "EventCommandChangeItemsBytag";
+             this.Size = new System.Drawing.Size(205, 139);
+-            this.grpTakeItemBytag.ResumeLayout(false);
+-            this.grpTakeItemBytag.PerformLayout();
++            this.grpChangeItemsBytag.ResumeLayout(false);
++            this.grpChangeItemsBytag.PerformLayout();
+             ((System.ComponentModel.ISupportInitialize)(this.nudGiveTakeAmount)).EndInit();
+             this.ResumeLayout(false);
+ 
+@@ -160,12 +198,14 @@ private void InitializeComponent()
+ 
+         #endregion
+ 
+-        private DarkGroupBox grpTakeItemBytag;
++        private DarkGroupBox grpChangeItemsBytag;
+         private DarkButton btnCancel;
+         private DarkButton btnSave;
+         private DarkComboBox cmbTags;
+         private System.Windows.Forms.Label lblTag;
+         private System.Windows.Forms.Label lblAmount;
+         private DarkNumericUpDown nudGiveTakeAmount;
++        private DarkComboBox cmbAction;
++        private System.Windows.Forms.Label lblAction;
+     }
+ }
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs
+similarity index 61%
+rename from Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs
+rename to Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs
+index 3ae45b28..72c82e10 100644
+--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.cs	
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs	
+@@ -10,16 +10,16 @@
+ namespace Intersect.Editor.Forms.Editors.Events.Event_Commands
+ {
+ 
+-    public partial class EventCommandTakeItemsBytag : UserControl
++    public partial class EventCommandChangeItemsBytag : UserControl
+     {
+ 
+         private readonly FrmEvent mEventEditor;
+ 
+         private EventPage mCurrentPage;
+ 
+-        private TakeItemsByTag mMyCommand;
++        private ChangeItemsByTag mMyCommand;
+ 
+-        public EventCommandTakeItemsBytag(TakeItemsByTag refCommand, EventPage refPage, FrmEvent editor)
++        public EventCommandChangeItemsBytag(ChangeItemsByTag refCommand, EventPage refPage, FrmEvent editor)
+         {
+             InitializeComponent();
+             mMyCommand = refCommand;
+@@ -29,6 +29,7 @@ public EventCommandTakeItemsBytag(TakeItemsByTag refCommand, EventPage refPage,
+             cmbTags.Items.Clear();
+             cmbTags.Items.AddRange(ItemBase.AllTags.OrderBy(x => x).ToArray());
+             cmbTags.SelectedIndex = cmbTags.Items.IndexOf(mMyCommand.Tag ?? "");
++            cmbAction.SelectedIndex = mMyCommand.Add ? 0 : 1;
+             if (mMyCommand.Quantity < 1)
+             {
+                 nudGiveTakeAmount.Value = 1;
+@@ -43,16 +44,22 @@ public EventCommandTakeItemsBytag(TakeItemsByTag refCommand, EventPage refPage,
+ 
+         private void InitLocalization()
+         {
+-            lblAmount.Text = Strings.EventTakeItemByTag.amount;
+-            grpTakeItemBytag.Text = Strings.EventTakeItemByTag.title;
+-            lblTag.Text = Strings.EventTakeItemByTag.tag;
+-            btnSave.Text = Strings.EventTakeItemByTag.okay;
+-            btnCancel.Text = Strings.EventTakeItemByTag.cancel;
++            lblAmount.Text = Strings.EventChangeItemsByTag.amount;
++            grpChangeItemsBytag.Text = Strings.EventChangeItemsByTag.title;
++            lblTag.Text = Strings.EventChangeItemsByTag.tag;
++            btnSave.Text = Strings.EventChangeItemsByTag.okay;
++            btnCancel.Text = Strings.EventChangeItemsByTag.cancel;
++            cmbAction.Items.Clear();
++            for (var i = 0; i < Strings.EventChangeItemsByTag.actions.Count; i++)
++            {
++                cmbAction.Items.Add(Strings.EventChangeItemsByTag.actions[i]);
++            }
+         }
+ 
+         private void btnSave_Click(object sender, EventArgs e)
+         {
+             mMyCommand.Tag = cmbTags.GetItemText(cmbTags.SelectedItem);
++            mMyCommand.Add = !Convert.ToBoolean(cmbAction.SelectedIndex);
+             mMyCommand.Quantity = (int) nudGiveTakeAmount.Value;
+             mEventEditor.FinishCommandEdit();
+         }
+diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx
+similarity index 87%
+rename from Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx
+rename to Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx
+index 2f34d5e1..3d2650f4 100644
+--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_TakeItemsByTag.resx	
++++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx	
+@@ -1,17 +1,17 @@
+ <?xml version="1.0" encoding="utf-8"?>
+ <root>
+-  <!--
+-    Microsoft ResX Schema
+-
++  <!-- 
++    Microsoft ResX Schema 
++    
+     Version 2.0
+-
+-    The primary goals of this format is to allow a simple XML format
+-    that is mostly human readable. The generation and parsing of the
+-    various data types are done through the TypeConverter classes
++    
++    The primary goals of this format is to allow a simple XML format 
++    that is mostly human readable. The generation and parsing of the 
++    various data types are done through the TypeConverter classes 
+     associated with the data types.
+-
++    
+     Example:
+-
++    
+     ... ado.net/XML headers & schema ...
+     <resheader name="resmimetype">text/microsoft-resx</resheader>
+     <resheader name="version">2.0</resheader>
+@@ -26,36 +26,36 @@
+         <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+         <comment>This is a comment</comment>
+     </data>
+-
+-    There are any number of "resheader" rows that contain simple
++                
++    There are any number of "resheader" rows that contain simple 
+     name/value pairs.
+-
+-    Each data row contains a name, and value. The row also contains a
+-    type or mimetype. Type corresponds to a .NET class that support
+-    text/value conversion through the TypeConverter architecture.
+-    Classes that don't support this are serialized and stored with the
++    
++    Each data row contains a name, and value. The row also contains a 
++    type or mimetype. Type corresponds to a .NET class that support 
++    text/value conversion through the TypeConverter architecture. 
++    Classes that don't support this are serialized and stored with the 
+     mimetype set.
+-
+-    The mimetype is used for serialized objects, and tells the
+-    ResXResourceReader how to depersist the object. This is currently not
++    
++    The mimetype is used for serialized objects, and tells the 
++    ResXResourceReader how to depersist the object. This is currently not 
+     extensible. For a given mimetype the value must be set accordingly:
+-
+-    Note - application/x-microsoft.net.object.binary.base64 is the format
+-    that the ResXResourceWriter will generate, however the reader can
++    
++    Note - application/x-microsoft.net.object.binary.base64 is the format 
++    that the ResXResourceWriter will generate, however the reader can 
+     read any of the formats listed below.
+-
++    
+     mimetype: application/x-microsoft.net.object.binary.base64
+-    value   : The object must be serialized with
++    value   : The object must be serialized with 
+             : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+             : and then encoded with base64 encoding.
+-
++    
+     mimetype: application/x-microsoft.net.object.soap.base64
+-    value   : The object must be serialized with
++    value   : The object must be serialized with 
+             : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+             : and then encoded with base64 encoding.
+ 
+     mimetype: application/x-microsoft.net.object.bytearray.base64
+-    value   : The object must be serialized into a byte array
++    value   : The object must be serialized into a byte array 
+             : using a System.ComponentModel.TypeConverter
+             : and then encoded with base64 encoding.
+     -->
+@@ -118,6 +118,13 @@
+     <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+   </resheader>
+   <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
++  <data name="cmbAction.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
++    <value>
++        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
++        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
++        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
++</value>
++  </data>
+   <data name="cmbTags.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+     <value>
+         iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+diff --git a/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs b/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
+index 2450fa0d..ede71d24 100644
+--- a/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
++++ b/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
+@@ -65,7 +65,7 @@ private void InitializeComponent()
+             System.Windows.Forms.TreeNode treeNode18 = new System.Windows.Forms.TreeNode("Change Level");
+             System.Windows.Forms.TreeNode treeNode19 = new System.Windows.Forms.TreeNode("Change Spells");
+             System.Windows.Forms.TreeNode treeNode20 = new System.Windows.Forms.TreeNode("Change Items");
+-            System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode("Take Items By Tag");
++            System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode("Change Items By Tag");
+             System.Windows.Forms.TreeNode treeNode22 = new System.Windows.Forms.TreeNode("Change Sprite");
+             System.Windows.Forms.TreeNode treeNode23 = new System.Windows.Forms.TreeNode("Change Face");
+             System.Windows.Forms.TreeNode treeNode24 = new System.Windows.Forms.TreeNode("Change Gender");
+@@ -222,18 +222,18 @@ private void InitializeComponent()
+             this.grpGeneral.SuspendLayout();
+             this.pnlTabsContainer.SuspendLayout();
+             this.SuspendLayout();
+-            //
++            // 
+             // lblName
+-            //
++            // 
+             this.lblName.AutoSize = true;
+             this.lblName.Location = new System.Drawing.Point(6, 22);
+             this.lblName.Name = "lblName";
+             this.lblName.Size = new System.Drawing.Size(38, 13);
+             this.lblName.TabIndex = 1;
+             this.lblName.Text = "Name:";
+-            //
++            // 
+             // txtEventname
+-            //
++            // 
+             this.txtEventname.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.txtEventname.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.txtEventname.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+@@ -242,9 +242,9 @@ private void InitializeComponent()
+             this.txtEventname.Size = new System.Drawing.Size(124, 20);
+             this.txtEventname.TabIndex = 2;
+             this.txtEventname.TextChanged += new System.EventHandler(this.txtEventname_TextChanged);
+-            //
++            // 
+             // grpEntityOptions
+-            //
++            // 
+             this.grpEntityOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpEntityOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpEntityOptions.Controls.Add(this.grpExtra);
+@@ -258,9 +258,9 @@ private void InitializeComponent()
+             this.grpEntityOptions.TabIndex = 12;
+             this.grpEntityOptions.TabStop = false;
+             this.grpEntityOptions.Text = "Entity Options";
+-            //
++            // 
+             // grpExtra
+-            //
++            // 
+             this.grpExtra.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpExtra.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpExtra.Controls.Add(this.chkInteractionFreeze);
+@@ -275,9 +275,9 @@ private void InitializeComponent()
+             this.grpExtra.TabIndex = 9;
+             this.grpExtra.TabStop = false;
+             this.grpExtra.Text = "Extra";
+-            //
++            // 
+             // chkInteractionFreeze
+-            //
++            // 
+             this.chkInteractionFreeze.AutoSize = true;
+             this.chkInteractionFreeze.Location = new System.Drawing.Point(6, 41);
+             this.chkInteractionFreeze.Name = "chkInteractionFreeze";
+@@ -285,9 +285,9 @@ private void InitializeComponent()
+             this.chkInteractionFreeze.TabIndex = 6;
+             this.chkInteractionFreeze.Text = "Interaction Freeze";
+             this.chkInteractionFreeze.CheckedChanged += new System.EventHandler(this.chkInteractionFreeze_CheckedChanged);
+-            //
++            // 
+             // chkWalkingAnimation
+-            //
++            // 
+             this.chkWalkingAnimation.AutoSize = true;
+             this.chkWalkingAnimation.Location = new System.Drawing.Point(214, 19);
+             this.chkWalkingAnimation.Name = "chkWalkingAnimation";
+@@ -295,9 +295,9 @@ private void InitializeComponent()
+             this.chkWalkingAnimation.TabIndex = 5;
+             this.chkWalkingAnimation.Text = "Walking Anim";
+             this.chkWalkingAnimation.CheckedChanged += new System.EventHandler(this.chkWalkingAnimation_CheckedChanged);
+-            //
++            // 
+             // chkDirectionFix
+-            //
++            // 
+             this.chkDirectionFix.AutoSize = true;
+             this.chkDirectionFix.Location = new System.Drawing.Point(156, 19);
+             this.chkDirectionFix.Name = "chkDirectionFix";
+@@ -305,9 +305,9 @@ private void InitializeComponent()
+             this.chkDirectionFix.TabIndex = 4;
+             this.chkDirectionFix.Text = "Dir Fix";
+             this.chkDirectionFix.CheckedChanged += new System.EventHandler(this.chkDirectionFix_CheckedChanged);
+-            //
++            // 
+             // chkHideName
+-            //
++            // 
+             this.chkHideName.AutoSize = true;
+             this.chkHideName.Location = new System.Drawing.Point(75, 19);
+             this.chkHideName.Name = "chkHideName";
+@@ -315,9 +315,9 @@ private void InitializeComponent()
+             this.chkHideName.TabIndex = 3;
+             this.chkHideName.Text = "Hide Name";
+             this.chkHideName.CheckedChanged += new System.EventHandler(this.chkHideName_CheckedChanged);
+-            //
++            // 
+             // chkWalkThrough
+-            //
++            // 
+             this.chkWalkThrough.AutoSize = true;
+             this.chkWalkThrough.Location = new System.Drawing.Point(6, 19);
+             this.chkWalkThrough.Name = "chkWalkThrough";
+@@ -325,9 +325,9 @@ private void InitializeComponent()
+             this.chkWalkThrough.TabIndex = 2;
+             this.chkWalkThrough.Text = "Passable";
+             this.chkWalkThrough.CheckedChanged += new System.EventHandler(this.chkWalkThrough_CheckedChanged);
+-            //
++            // 
+             // grpInspector
+-            //
++            // 
+             this.grpInspector.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpInspector.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpInspector.Controls.Add(this.pnlFacePreview);
+@@ -343,25 +343,25 @@ private void InitializeComponent()
+             this.grpInspector.TabIndex = 7;
+             this.grpInspector.TabStop = false;
+             this.grpInspector.Text = "Entity Inspector Options";
+-            //
++            // 
+             // pnlFacePreview
+-            //
++            // 
+             this.pnlFacePreview.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
+             this.pnlFacePreview.Location = new System.Drawing.Point(9, 46);
+             this.pnlFacePreview.Name = "pnlFacePreview";
+             this.pnlFacePreview.Size = new System.Drawing.Size(64, 64);
+             this.pnlFacePreview.TabIndex = 12;
+-            //
++            // 
+             // lblInspectorDesc
+-            //
++            // 
+             this.lblInspectorDesc.Location = new System.Drawing.Point(79, 42);
+             this.lblInspectorDesc.Name = "lblInspectorDesc";
+             this.lblInspectorDesc.Size = new System.Drawing.Size(112, 19);
+             this.lblInspectorDesc.TabIndex = 11;
+             this.lblInspectorDesc.Text = "Inspector Description:";
+-            //
++            // 
+             // txtDesc
+-            //
++            // 
+             this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+@@ -371,18 +371,18 @@ private void InitializeComponent()
+             this.txtDesc.Size = new System.Drawing.Size(231, 50);
+             this.txtDesc.TabIndex = 0;
+             this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
+-            //
++            // 
+             // chkDisableInspector
+-            //
++            // 
+             this.chkDisableInspector.Location = new System.Drawing.Point(204, 15);
+             this.chkDisableInspector.Name = "chkDisableInspector";
+             this.chkDisableInspector.Size = new System.Drawing.Size(107, 21);
+             this.chkDisableInspector.TabIndex = 4;
+             this.chkDisableInspector.Text = "Disable Inspector";
+             this.chkDisableInspector.CheckedChanged += new System.EventHandler(this.chkDisablePreview_CheckedChanged);
+-            //
++            // 
+             // cmbPreviewFace
+-            //
++            // 
+             this.cmbPreviewFace.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbPreviewFace.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbPreviewFace.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -402,18 +402,18 @@ private void InitializeComponent()
+             this.cmbPreviewFace.Text = null;
+             this.cmbPreviewFace.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbPreviewFace.SelectedIndexChanged += new System.EventHandler(this.cmbPreviewFace_SelectedIndexChanged);
+-            //
++            // 
+             // lblFace
+-            //
++            // 
+             this.lblFace.AutoSize = true;
+             this.lblFace.Location = new System.Drawing.Point(6, 18);
+             this.lblFace.Name = "lblFace";
+             this.lblFace.Size = new System.Drawing.Size(34, 13);
+             this.lblFace.TabIndex = 9;
+             this.lblFace.Text = "Face:";
+-            //
++            // 
+             // grpPreview
+-            //
++            // 
+             this.grpPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpPreview.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpPreview.Controls.Add(this.lblAnimation);
+@@ -426,18 +426,18 @@ private void InitializeComponent()
+             this.grpPreview.TabIndex = 10;
+             this.grpPreview.TabStop = false;
+             this.grpPreview.Text = "Preview";
+-            //
++            // 
+             // lblAnimation
+-            //
++            // 
+             this.lblAnimation.AutoSize = true;
+             this.lblAnimation.Location = new System.Drawing.Point(4, 116);
+             this.lblAnimation.Name = "lblAnimation";
+             this.lblAnimation.Size = new System.Drawing.Size(56, 13);
+             this.lblAnimation.TabIndex = 2;
+             this.lblAnimation.Text = "Animation:";
+-            //
++            // 
+             // cmbAnimation
+-            //
++            // 
+             this.cmbAnimation.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbAnimation.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbAnimation.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -457,9 +457,9 @@ private void InitializeComponent()
+             this.cmbAnimation.Text = null;
+             this.cmbAnimation.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbAnimation.SelectedIndexChanged += new System.EventHandler(this.cmbAnimation_SelectedIndexChanged);
+-            //
++            // 
+             // pnlPreview
+-            //
++            // 
+             this.pnlPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+             this.pnlPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.pnlPreview.Location = new System.Drawing.Point(33, 14);
+@@ -467,9 +467,9 @@ private void InitializeComponent()
+             this.pnlPreview.Size = new System.Drawing.Size(96, 96);
+             this.pnlPreview.TabIndex = 0;
+             this.pnlPreview.DoubleClick += new System.EventHandler(this.pnlPreview_DoubleClick);
+-            //
++            // 
+             // grpMovement
+-            //
++            // 
+             this.grpMovement.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpMovement.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpMovement.Controls.Add(this.lblLayer);
+@@ -488,18 +488,18 @@ private void InitializeComponent()
+             this.grpMovement.TabIndex = 8;
+             this.grpMovement.TabStop = false;
+             this.grpMovement.Text = "Movement";
+-            //
++            // 
+             // lblLayer
+-            //
++            // 
+             this.lblLayer.AutoSize = true;
+             this.lblLayer.Location = new System.Drawing.Point(6, 134);
+             this.lblLayer.Name = "lblLayer";
+             this.lblLayer.Size = new System.Drawing.Size(36, 13);
+             this.lblLayer.TabIndex = 7;
+             this.lblLayer.Text = "Layer:";
+-            //
++            // 
+             // cmbLayering
+-            //
++            // 
+             this.cmbLayering.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbLayering.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbLayering.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -523,9 +523,9 @@ private void InitializeComponent()
+             this.cmbLayering.Text = "Below Player";
+             this.cmbLayering.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbLayering.SelectedIndexChanged += new System.EventHandler(this.cmbLayering_SelectedIndexChanged);
+-            //
++            // 
+             // cmbEventFreq
+-            //
++            // 
+             this.cmbEventFreq.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbEventFreq.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbEventFreq.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -551,9 +551,9 @@ private void InitializeComponent()
+             this.cmbEventFreq.Text = "Not Very Often";
+             this.cmbEventFreq.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbEventFreq.SelectedIndexChanged += new System.EventHandler(this.cmbEventFreq_SelectedIndexChanged);
+-            //
++            // 
+             // cmbEventSpeed
+-            //
++            // 
+             this.cmbEventSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbEventSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbEventSpeed.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -579,27 +579,27 @@ private void InitializeComponent()
+             this.cmbEventSpeed.Text = "Slowest";
+             this.cmbEventSpeed.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbEventSpeed.SelectedIndexChanged += new System.EventHandler(this.cmbEventSpeed_SelectedIndexChanged);
+-            //
++            // 
+             // lblFreq
+-            //
++            // 
+             this.lblFreq.AutoSize = true;
+             this.lblFreq.Location = new System.Drawing.Point(6, 107);
+             this.lblFreq.Name = "lblFreq";
+             this.lblFreq.Size = new System.Drawing.Size(31, 13);
+             this.lblFreq.TabIndex = 4;
+             this.lblFreq.Text = "Freq:";
+-            //
++            // 
+             // lblSpeed
+-            //
++            // 
+             this.lblSpeed.AutoSize = true;
+             this.lblSpeed.Location = new System.Drawing.Point(6, 80);
+             this.lblSpeed.Name = "lblSpeed";
+             this.lblSpeed.Size = new System.Drawing.Size(41, 13);
+             this.lblSpeed.TabIndex = 3;
+             this.lblSpeed.Text = "Speed:";
+-            //
++            // 
+             // btnSetRoute
+-            //
++            // 
+             this.btnSetRoute.Enabled = false;
+             this.btnSetRoute.Location = new System.Drawing.Point(73, 43);
+             this.btnSetRoute.Name = "btnSetRoute";
+@@ -608,18 +608,18 @@ private void InitializeComponent()
+             this.btnSetRoute.TabIndex = 2;
+             this.btnSetRoute.Text = "Set Route....";
+             this.btnSetRoute.Click += new System.EventHandler(this.btnSetRoute_Click);
+-            //
++            // 
+             // lblType
+-            //
++            // 
+             this.lblType.AutoSize = true;
+             this.lblType.Location = new System.Drawing.Point(6, 22);
+             this.lblType.Name = "lblType";
+             this.lblType.Size = new System.Drawing.Size(34, 13);
+             this.lblType.TabIndex = 1;
+             this.lblType.Text = "Type:";
+-            //
++            // 
+             // cmbMoveType
+-            //
++            // 
+             this.cmbMoveType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbMoveType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbMoveType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -643,9 +643,9 @@ private void InitializeComponent()
+             this.cmbMoveType.Text = "None";
+             this.cmbMoveType.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbMoveType.SelectedIndexChanged += new System.EventHandler(this.cmbMoveType_SelectedIndexChanged);
+-            //
++            // 
+             // grpTriggers
+-            //
++            // 
+             this.grpTriggers.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpTriggers.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpTriggers.Controls.Add(this.txtCommand);
+@@ -660,9 +660,9 @@ private void InitializeComponent()
+             this.grpTriggers.TabIndex = 21;
+             this.grpTriggers.TabStop = false;
+             this.grpTriggers.Text = "Trigger";
+-            //
++            // 
+             // txtCommand
+-            //
++            // 
+             this.txtCommand.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.txtCommand.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.txtCommand.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+@@ -672,9 +672,9 @@ private void InitializeComponent()
+             this.txtCommand.TabIndex = 12;
+             this.txtCommand.Visible = false;
+             this.txtCommand.TextChanged += new System.EventHandler(this.txtCommand_TextChanged);
+-            //
++            // 
+             // lblCommand
+-            //
++            // 
+             this.lblCommand.AutoSize = true;
+             this.lblCommand.Location = new System.Drawing.Point(113, 17);
+             this.lblCommand.Name = "lblCommand";
+@@ -682,9 +682,9 @@ private void InitializeComponent()
+             this.lblCommand.TabIndex = 11;
+             this.lblCommand.Text = "/Command: /";
+             this.lblCommand.Visible = false;
+-            //
++            // 
+             // lblTriggerVal
+-            //
++            // 
+             this.lblTriggerVal.AutoSize = true;
+             this.lblTriggerVal.Location = new System.Drawing.Point(113, 17);
+             this.lblTriggerVal.Name = "lblTriggerVal";
+@@ -692,9 +692,9 @@ private void InitializeComponent()
+             this.lblTriggerVal.TabIndex = 10;
+             this.lblTriggerVal.Text = "Projectile:";
+             this.lblTriggerVal.Visible = false;
+-            //
++            // 
+             // cmbTriggerVal
+-            //
++            // 
+             this.cmbTriggerVal.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbTriggerVal.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbTriggerVal.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -716,9 +716,9 @@ private void InitializeComponent()
+             this.cmbTriggerVal.Text = "None";
+             this.cmbTriggerVal.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbTriggerVal.Visible = false;
+-            //
++            // 
+             // cmbTrigger
+-            //
++            // 
+             this.cmbTrigger.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+             this.cmbTrigger.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.cmbTrigger.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+@@ -743,9 +743,9 @@ private void InitializeComponent()
+             this.cmbTrigger.Text = "Action Button";
+             this.cmbTrigger.TextPadding = new System.Windows.Forms.Padding(2);
+             this.cmbTrigger.SelectedIndexChanged += new System.EventHandler(this.cmbTrigger_SelectedIndexChanged);
+-            //
++            // 
+             // grpEventConditions
+-            //
++            // 
+             this.grpEventConditions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpEventConditions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpEventConditions.Controls.Add(this.btnEditConditions);
+@@ -756,9 +756,9 @@ private void InitializeComponent()
+             this.grpEventConditions.TabIndex = 5;
+             this.grpEventConditions.TabStop = false;
+             this.grpEventConditions.Text = "Conditions";
+-            //
++            // 
+             // btnEditConditions
+-            //
++            // 
+             this.btnEditConditions.Location = new System.Drawing.Point(7, 20);
+             this.btnEditConditions.Name = "btnEditConditions";
+             this.btnEditConditions.Padding = new System.Windows.Forms.Padding(5);
+@@ -766,9 +766,9 @@ private void InitializeComponent()
+             this.btnEditConditions.TabIndex = 0;
+             this.btnEditConditions.Text = "Spawn/Execution Conditions";
+             this.btnEditConditions.Click += new System.EventHandler(this.btnEditConditions_Click);
+-            //
++            // 
+             // grpNewCommands
+-            //
++            // 
+             this.grpNewCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpNewCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpNewCommands.Controls.Add(this.lblCloseCommands);
+@@ -781,9 +781,9 @@ private void InitializeComponent()
+             this.grpNewCommands.TabStop = false;
+             this.grpNewCommands.Text = "Add Commands";
+             this.grpNewCommands.Visible = false;
+-            //
++            // 
+             // lblCloseCommands
+-            //
++            // 
+             this.lblCloseCommands.AutoSize = true;
+             this.lblCloseCommands.Location = new System.Drawing.Point(437, 14);
+             this.lblCloseCommands.Name = "lblCloseCommands";
+@@ -791,9 +791,9 @@ private void InitializeComponent()
+             this.lblCloseCommands.TabIndex = 1;
+             this.lblCloseCommands.Text = "X";
+             this.lblCloseCommands.Click += new System.EventHandler(this.lblCloseCommands_Click);
+-            //
++            // 
+             // lstCommands
+-            //
++            // 
+             this.lstCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+             this.lstCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.lstCommands.ForeColor = System.Drawing.Color.Gainsboro;
+@@ -858,9 +858,9 @@ private void InitializeComponent()
+             treeNode20.Name = "changeitems";
+             treeNode20.Tag = "18";
+             treeNode20.Text = "Change Items";
+-            treeNode21.Name = "takeitemsbytag";
++            treeNode21.Name = "changeitemsbytag";
+             treeNode21.Tag = "51";
+-            treeNode21.Text = "Take Items By Tag";
++            treeNode21.Text = "Change Items By Tag";
+             treeNode22.Name = "changesprite";
+             treeNode22.Tag = "19";
+             treeNode22.Text = "Change Sprite";
+@@ -978,9 +978,9 @@ private void InitializeComponent()
+             this.lstCommands.Size = new System.Drawing.Size(445, 440);
+             this.lstCommands.TabIndex = 2;
+             this.lstCommands.NodeMouseDoubleClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.lstCommands_NodeMouseDoubleClick);
+-            //
++            // 
+             // grpEventCommands
+-            //
++            // 
+             this.grpEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpEventCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpEventCommands.Controls.Add(this.lstEventCommands);
+@@ -991,9 +991,9 @@ private void InitializeComponent()
+             this.grpEventCommands.TabIndex = 6;
+             this.grpEventCommands.TabStop = false;
+             this.grpEventCommands.Text = "Commands";
+-            //
++            // 
+             // lstEventCommands
+-            //
++            // 
+             this.lstEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+             this.lstEventCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.lstEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
+@@ -1009,9 +1009,9 @@ private void InitializeComponent()
+             this.lstEventCommands.DoubleClick += new System.EventHandler(this.lstEventCommands_DoubleClick);
+             this.lstEventCommands.KeyDown += new System.Windows.Forms.KeyEventHandler(this.lstEventCommands_KeyDown);
+             this.lstEventCommands.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lstEventCommands_Click);
+-            //
++            // 
+             // grpCreateCommands
+-            //
++            // 
+             this.grpCreateCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpCreateCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpCreateCommands.ForeColor = System.Drawing.Color.Gainsboro;
+@@ -1021,9 +1021,9 @@ private void InitializeComponent()
+             this.grpCreateCommands.TabIndex = 8;
+             this.grpCreateCommands.TabStop = false;
+             this.grpCreateCommands.Visible = false;
+-            //
++            // 
+             // btnSave
+-            //
++            // 
+             this.btnSave.Location = new System.Drawing.Point(628, 586);
+             this.btnSave.Name = "btnSave";
+             this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+@@ -1031,9 +1031,9 @@ private void InitializeComponent()
+             this.btnSave.TabIndex = 6;
+             this.btnSave.Text = "Save";
+             this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+-            //
++            // 
+             // btnCancel
+-            //
++            // 
+             this.btnCancel.Location = new System.Drawing.Point(727, 586);
+             this.btnCancel.Name = "btnCancel";
+             this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+@@ -1041,9 +1041,9 @@ private void InitializeComponent()
+             this.btnCancel.TabIndex = 7;
+             this.btnCancel.Text = "Cancel";
+             this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+-            //
++            // 
+             // commandMenu
+-            //
++            // 
+             this.commandMenu.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+             this.commandMenu.ImageScalingSize = new System.Drawing.Size(24, 24);
+             this.commandMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
+@@ -1056,57 +1056,57 @@ private void InitializeComponent()
+             this.commandMenu.Name = "commandMenu";
+             this.commandMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
+             this.commandMenu.Size = new System.Drawing.Size(108, 136);
+-            //
++            // 
+             // btnInsert
+-            //
++            // 
+             this.btnInsert.ForeColor = System.Drawing.Color.Gainsboro;
+             this.btnInsert.Name = "btnInsert";
+             this.btnInsert.Size = new System.Drawing.Size(107, 22);
+             this.btnInsert.Text = "Insert";
+             this.btnInsert.Click += new System.EventHandler(this.btnInsert_Click);
+-            //
++            // 
+             // btnEdit
+-            //
++            // 
+             this.btnEdit.ForeColor = System.Drawing.Color.Gainsboro;
+             this.btnEdit.Name = "btnEdit";
+             this.btnEdit.Size = new System.Drawing.Size(107, 22);
+             this.btnEdit.Text = "Edit";
+             this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
+-            //
++            // 
+             // btnCut
+-            //
++            // 
+             this.btnCut.ForeColor = System.Drawing.Color.Gainsboro;
+             this.btnCut.Name = "btnCut";
+             this.btnCut.Size = new System.Drawing.Size(107, 22);
+             this.btnCut.Text = "Cut";
+             this.btnCut.Click += new System.EventHandler(this.btnCut_Click);
+-            //
++            // 
+             // btnCopy
+-            //
++            // 
+             this.btnCopy.ForeColor = System.Drawing.Color.Gainsboro;
+             this.btnCopy.Name = "btnCopy";
+             this.btnCopy.Size = new System.Drawing.Size(107, 22);
+             this.btnCopy.Text = "Copy";
+             this.btnCopy.Click += new System.EventHandler(this.btnCopy_Click);
+-            //
++            // 
+             // btnPaste
+-            //
++            // 
+             this.btnPaste.ForeColor = System.Drawing.Color.Gainsboro;
+             this.btnPaste.Name = "btnPaste";
+             this.btnPaste.Size = new System.Drawing.Size(107, 22);
+             this.btnPaste.Text = "Paste";
+             this.btnPaste.Click += new System.EventHandler(this.btnPaste_Click);
+-            //
++            // 
+             // btnDelete
+-            //
++            // 
+             this.btnDelete.ForeColor = System.Drawing.Color.Gainsboro;
+             this.btnDelete.Name = "btnDelete";
+             this.btnDelete.Size = new System.Drawing.Size(107, 22);
+             this.btnDelete.Text = "Delete";
+             this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
+-            //
++            // 
+             // grpPageOptions
+-            //
++            // 
+             this.grpPageOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpPageOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpPageOptions.Controls.Add(this.btnClearPage);
+@@ -1121,9 +1121,9 @@ private void InitializeComponent()
+             this.grpPageOptions.TabIndex = 13;
+             this.grpPageOptions.TabStop = false;
+             this.grpPageOptions.Text = "Page Options";
+-            //
++            // 
+             // btnClearPage
+-            //
++            // 
+             this.btnClearPage.Location = new System.Drawing.Point(402, 16);
+             this.btnClearPage.Name = "btnClearPage";
+             this.btnClearPage.Padding = new System.Windows.Forms.Padding(5);
+@@ -1131,9 +1131,9 @@ private void InitializeComponent()
+             this.btnClearPage.TabIndex = 17;
+             this.btnClearPage.Text = "Clear Page";
+             this.btnClearPage.Click += new System.EventHandler(this.btnClearPage_Click);
+-            //
++            // 
+             // btnDeletePage
+-            //
++            // 
+             this.btnDeletePage.Enabled = false;
+             this.btnDeletePage.Location = new System.Drawing.Point(303, 16);
+             this.btnDeletePage.Name = "btnDeletePage";
+@@ -1142,9 +1142,9 @@ private void InitializeComponent()
+             this.btnDeletePage.TabIndex = 16;
+             this.btnDeletePage.Text = "Delete Page";
+             this.btnDeletePage.Click += new System.EventHandler(this.btnDeletePage_Click);
+-            //
++            // 
+             // btnPastePage
+-            //
++            // 
+             this.btnPastePage.Location = new System.Drawing.Point(204, 16);
+             this.btnPastePage.Name = "btnPastePage";
+             this.btnPastePage.Padding = new System.Windows.Forms.Padding(5);
+@@ -1152,9 +1152,9 @@ private void InitializeComponent()
+             this.btnPastePage.TabIndex = 15;
+             this.btnPastePage.Text = "Paste Page";
+             this.btnPastePage.Click += new System.EventHandler(this.btnPastePage_Click);
+-            //
++            // 
+             // btnCopyPage
+-            //
++            // 
+             this.btnCopyPage.Location = new System.Drawing.Point(105, 16);
+             this.btnCopyPage.Name = "btnCopyPage";
+             this.btnCopyPage.Padding = new System.Windows.Forms.Padding(5);
+@@ -1162,9 +1162,9 @@ private void InitializeComponent()
+             this.btnCopyPage.TabIndex = 14;
+             this.btnCopyPage.Text = "Copy Page";
+             this.btnCopyPage.Click += new System.EventHandler(this.btnCopyPage_Click);
+-            //
++            // 
+             // btnNewPage
+-            //
++            // 
+             this.btnNewPage.Location = new System.Drawing.Point(6, 16);
+             this.btnNewPage.Name = "btnNewPage";
+             this.btnNewPage.Padding = new System.Windows.Forms.Padding(5);
+@@ -1172,9 +1172,9 @@ private void InitializeComponent()
+             this.btnNewPage.TabIndex = 13;
+             this.btnNewPage.Text = "New Page";
+             this.btnNewPage.Click += new System.EventHandler(this.btnNewPage_Click);
+-            //
++            // 
+             // grpGeneral
+-            //
++            // 
+             this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+             this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+             this.grpGeneral.Controls.Add(this.chkIsGlobal);
+@@ -1187,9 +1187,9 @@ private void InitializeComponent()
+             this.grpGeneral.TabIndex = 18;
+             this.grpGeneral.TabStop = false;
+             this.grpGeneral.Text = "General";
+-            //
++            // 
+             // chkIsGlobal
+-            //
++            // 
+             this.chkIsGlobal.AutoSize = true;
+             this.chkIsGlobal.Location = new System.Drawing.Point(202, 22);
+             this.chkIsGlobal.Name = "chkIsGlobal";
+@@ -1197,25 +1197,25 @@ private void InitializeComponent()
+             this.chkIsGlobal.TabIndex = 3;
+             this.chkIsGlobal.Text = "Global Event";
+             this.chkIsGlobal.CheckedChanged += new System.EventHandler(this.chkIsGlobal_CheckedChanged);
+-            //
++            // 
+             // pnlTabsContainer
+-            //
++            // 
+             this.pnlTabsContainer.Controls.Add(this.pnlTabs);
+             this.pnlTabsContainer.Location = new System.Drawing.Point(12, 61);
+             this.pnlTabsContainer.Name = "pnlTabsContainer";
+             this.pnlTabsContainer.Size = new System.Drawing.Size(811, 22);
+             this.pnlTabsContainer.TabIndex = 22;
+-            //
++            // 
+             // pnlTabs
+-            //
++            // 
+             this.pnlTabs.AutoSize = true;
+             this.pnlTabs.Location = new System.Drawing.Point(0, 0);
+             this.pnlTabs.Name = "pnlTabs";
+             this.pnlTabs.Size = new System.Drawing.Size(811, 22);
+             this.pnlTabs.TabIndex = 23;
+-            //
++            // 
+             // btnTabsRight
+-            //
++            // 
+             this.btnTabsRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+             this.btnTabsRight.Location = new System.Drawing.Point(773, 61);
+             this.btnTabsRight.Name = "btnTabsRight";
+@@ -1224,9 +1224,9 @@ private void InitializeComponent()
+             this.btnTabsRight.TabIndex = 1;
+             this.btnTabsRight.Text = ">";
+             this.btnTabsRight.Click += new System.EventHandler(this.btnTabsRight_Click);
+-            //
++            // 
+             // btnTabsLeft
+-            //
++            // 
+             this.btnTabsLeft.Location = new System.Drawing.Point(12, 61);
+             this.btnTabsLeft.Name = "btnTabsLeft";
+             this.btnTabsLeft.Padding = new System.Windows.Forms.Padding(5);
+@@ -1234,17 +1234,17 @@ private void InitializeComponent()
+             this.btnTabsLeft.TabIndex = 0;
+             this.btnTabsLeft.Text = "<";
+             this.btnTabsLeft.Click += new System.EventHandler(this.btnTabsLeft_Click);
+-            //
++            // 
+             // panel1
+-            //
++            // 
+             this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+             this.panel1.Location = new System.Drawing.Point(12, 83);
+             this.panel1.Name = "panel1";
+             this.panel1.Size = new System.Drawing.Size(811, 498);
+             this.panel1.TabIndex = 23;
+-            //
++            // 
+             // FrmEvent
+-            //
++            // 
+             this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+             this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+             this.AutoSize = true;
+diff --git a/Intersect.Editor/Forms/Editors/Events/frmEvent.cs b/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
+index 355a6560..9f5c4e8a 100644
+--- a/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
++++ b/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
+@@ -712,8 +712,8 @@ private void lstCommands_NodeMouseDoubleClick(object sender, TreeNodeMouseClickE
+ 
+                     break;
+ 
+-                case EventCommandType.TakeItemsByTag:
+-                    tmpCommand = new TakeItemsByTag(CurrentPage.CommandLists);
++                case EventCommandType.ChangeItemsByTag:
++                    tmpCommand = new ChangeItemsByTag(CurrentPage.CommandLists);
+ 
+                     break;
+                 default:
+@@ -1284,8 +1284,8 @@ private void OpenEditCommand(EventCommand command)
+                     cmdWindow = new EventCommandEndQuest((EndQuestCommand) command, this);
+ 
+                     break;
+-                case EventCommandType.TakeItemsByTag:
+-                    cmdWindow = new EventCommandTakeItemsBytag((TakeItemsByTag)command, CurrentPage, this);
++                case EventCommandType.ChangeItemsByTag:
++                    cmdWindow = new EventCommandChangeItemsBytag((ChangeItemsByTag)command, CurrentPage, this);
+ 
+                     break;
+                 default:
+diff --git a/Intersect.Editor/Intersect.Editor.csproj b/Intersect.Editor/Intersect.Editor.csproj
+index d681756b..cf0d8abf 100644
+--- a/Intersect.Editor/Intersect.Editor.csproj
++++ b/Intersect.Editor/Intersect.Editor.csproj
+@@ -86,11 +86,11 @@
+     <Compile Include="Core\Preferences.cs" />
+     <Compile Include="Core\Program.cs" />
+     <Compile Include="Entities\Animation.cs" />
+-    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_TakeItemsByTag.cs">
++    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeItemsByTag.cs">
+       <SubType>UserControl</SubType>
+     </Compile>
+-    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_TakeItemsByTag.Designer.cs">
+-      <DependentUpon>EventCommand_TakeItemsByTag.cs</DependentUpon>
++    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeItemsByTag.Designer.cs">
++      <DependentUpon>EventCommand_ChangeItemsByTag.cs</DependentUpon>
+     </Compile>
+     <Compile Include="Forms\frmUpdate.cs">
+       <SubType>Form</SubType>
+@@ -660,8 +660,8 @@
+     <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeGender.resx">
+       <DependentUpon>EventCommand_ChangeGender.cs</DependentUpon>
+     </EmbeddedResource>
+-    <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_TakeItemsByTag.resx">
+-      <DependentUpon>EventCommand_TakeItemsByTag.cs</DependentUpon>
++    <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeItemsByTag.resx">
++      <DependentUpon>EventCommand_ChangeItemsByTag.cs</DependentUpon>
+     </EmbeddedResource>
+     <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeVital.resx">
+       <DependentUpon>EventCommand_ChangeVital.cs</DependentUpon>
+diff --git a/Intersect.Editor/Localization/Strings.cs b/Intersect.Editor/Localization/Strings.cs
+index 059d7679..753abf61 100644
+--- a/Intersect.Editor/Localization/Strings.cs
++++ b/Intersect.Editor/Localization/Strings.cs
+@@ -1251,18 +1251,24 @@ public struct EventChangeItems
+ 
+         }
+ 
+-        public struct EventTakeItemByTag
++        public struct EventChangeItemsByTag
+         {
+ 
+             public static LocalizedString tag = @"Tag:";
+ 
++            public static Dictionary<int, LocalizedString> actions = new Dictionary<int, LocalizedString>
++            {
++                {0, @"Give"},
++                {1, @"Take"},
++            };
++
+             public static LocalizedString amount = @"Amount:";
+ 
+             public static LocalizedString cancel = @"Cancel";
+ 
+             public static LocalizedString okay = @"Ok";
+ 
+-            public static LocalizedString title = @"Take Items By Tag";
++            public static LocalizedString title = @"Change Items By Tag:";
+ 
+         }
+ 
+@@ -1490,7 +1496,7 @@ public struct EventCommandList
+ 
+             public static LocalizedString enditemchange = @"End Item Change";
+ 
+-            public static LocalizedString endtakeitemsbytag = @"End Take Items by Tag";
++            public static LocalizedString endchangeitemsbytag = @"End Change Items by Tag";
+ 
+             public static LocalizedString endoptions = @"End Options";
+ 
+@@ -1532,11 +1538,11 @@ public struct EventCommandList
+ 
+             public static LocalizedString itemnotchanged = @"Item(s) Not Given/Taken (Doesn't have/Inventory full)";
+ 
+-            public static LocalizedString itemsnottakenbytag = @"Item(s) Not Taken (Doesn't have)";
++            public static LocalizedString itemnotchangedbytag = @"Item(s) Not Given/Taken (Doesn't have/Inventory full)";
+ 
+             public static LocalizedString itemschanged = @"Item(s) Given/Taken Successfully";
+ 
+-            public static LocalizedString itemstakenbytag = @"Item(s) Taken Successfully";
++            public static LocalizedString itemchangedbytag = @"Item(s) Given/Taken Successfully";
+ 
+             public static LocalizedString label = @"Label: {00}";
+ 
+@@ -1670,7 +1676,7 @@ public struct EventCommandList
+ 
+             public static LocalizedString take = @"Take: Item {00}";
+ 
+-            public static LocalizedString takeitemsbytag = @"Take Items by Tag: {00}";
++            public static LocalizedString changeitemsbytag = @"Change Items by Tag: {00}";
+ 
+             public static LocalizedString taskundefined = @"Undefined";
+ 
+@@ -1755,7 +1761,7 @@ public struct EventCommands
+                 {"changenamecolor", @"Change Name Color"},
+                 {"inputvariable", @"Input Variable"},
+                 {"changeplayerlabel", @"Change Player Label"},
+-                {"takeitemsbytag", "Take Items By Tag" },
++                {"changeitemsbytag", "Change Items By Tag" },
+             };
+ 
+         }
+diff --git a/Intersect.Server/Entities/Events/CommandProcessing.cs b/Intersect.Server/Entities/Events/CommandProcessing.cs
+index 6f1e1377..490f4969 100644
+--- a/Intersect.Server/Entities/Events/CommandProcessing.cs
++++ b/Intersect.Server/Entities/Events/CommandProcessing.cs
+@@ -450,7 +450,7 @@ Stack<CommandInstance> callStack
+ 
+         //Take Items By tag Command
+         private static void ProcessCommand(
+-            TakeItemsByTag command,
++            ChangeItemsByTag command,
+             Player player,
+             Event instance,
+             CommandInstance stackInfo,
+@@ -459,7 +459,7 @@ Stack<CommandInstance> callStack
+         {
+             var success = false;
+ 
+-            // Retrieve all items that have the tag we're looking for so we can see if the user has these item(s).
++            // Retrieve all items that have the tag we're looking for so we can use this list to check against their inventory, or pick a random item!.
+             var potentialItems = new List<Guid>();
+             foreach (var dbObject in ItemBase.Lookup.Values)
+             {
+@@ -470,44 +470,62 @@ Stack<CommandInstance> callStack
+                 }
+             }
+ 
+-            // Find all inventory slots that has the items we've looked up above.
+-            var inventorySlots = new List<int>();
+-            for (var slot = 0; slot < Options.MaxInvItems; slot++)
+-            {
+-                if (potentialItems.Contains(player.Items[slot].ItemId))
+-                {
+-                    inventorySlots.Add(slot);
+-                }
+-            }
+-
+             // Create a backup of our inventory in case we end up not being able to remove all required items and want to revert.
+             var invBackup = player.Items.Select(item => item?.Clone()).ToList();
+ 
+-            // Keep track of how many items we have to remove still.
+-            var toRemove = command.Quantity;
++            // Going to use this to keep track of how many items we have to change.
++            var changed = 0;
+ 
+-            // Go through each inventory slot we've retrieved before and attempt to remove as many items as we need.
+-            foreach(var slot in inventorySlots)
++            //Check if we're going to be giving or taking items.
++            if (command.Add) // Add Items to the inventory!
++            {
++                // Go through the amout of items we have to give, and pick a random item from our list of potential items to attempt to give to our player.
++                var randomizer = new Random();
++                for (var attempt = 0; attempt < command.Quantity; attempt++) 
++                { 
++                    if (player.TryGiveItem(potentialItems[randomizer.Next(potentialItems.Count)], 1, false, false)) 
++                    {
++                        changed += 1;
++                    }
++                }
++            }
++            else // Remove Items from the inventory!
+             {
+-                if (toRemove > 0)
++                // Find all inventory slots that has the items we've looked up above.
++                var inventorySlots = new List<int>();
++                for (var slot = 0; slot < Options.MaxInvItems; slot++)
+                 {
+-                    var removed = 0;
+-                    for (var attempt = 0; attempt < toRemove; attempt++)
++                    if (potentialItems.Contains(player.Items[slot].ItemId))
+                     {
+-                        if (player.TakeItemsBySlot(slot, 1))
++                        inventorySlots.Add(slot);
++                    }
++                }
++
++                // Go through each inventory slot we've retrieved before and attempt to remove as many items as we need.
++                foreach (var slot in inventorySlots)
++                {
++                    // No point looping further if we are at the correct quantity!
++                    if (changed == command.Quantity) break;
++
++                    for (var attempt = 0; attempt < command.Quantity; attempt++)
++                    {
++                        if (player.TakeItemsBySlot(slot, 1, false))
+                         {
+-                            removed += 1;
++                            changed += 1;
++
++                            // No point looping further if we are at the correct quantity!
++                            if (changed == command.Quantity) break;
+                         }
+                     }
+-
+-                    toRemove -= removed;
+                 }
+             }
+ 
+-            // Do we still have items left to remove or did we finish?
+-            if (toRemove == 0)
++            // Do we still have items left to change or did we finish?
++            if ((command.Quantity - changed) == 0)
+             {
++                // We've succeeded! Let's update the inventory.
+                 success = true;
++                PacketSender.SendInventory(player);
+             }
+             else
+             {
+@@ -520,7 +538,6 @@ Stack<CommandInstance> callStack
+                 PacketSender.SendInventory(player);
+             }
+ 
+-
+             // Process other events.
+             List<EventCommand> newCommandList = null;
+             if (success && stackInfo.Page.CommandLists.ContainsKey(command.BranchIds[0]))
+diff --git a/Intersect.Server/Entities/Player.cs b/Intersect.Server/Entities/Player.cs
+index 2c140f1d..69185b9d 100644
+--- a/Intersect.Server/Entities/Player.cs
++++ b/Intersect.Server/Entities/Player.cs
+@@ -1747,7 +1747,7 @@ public void UseItem(int slot, Entity target = null)
+             }
+         }
+ 
+-        public bool TakeItemsBySlot(int slot, int amount)
++        public bool TakeItemsBySlot(int slot, int amount, bool sendUpdate = true)
+         {
+             var returnVal = false;
+             if (slot < 0)
+@@ -1786,7 +1786,10 @@ public bool TakeItemsBySlot(int slot, int amount)
+                     returnVal = true;
+                 }
+ 
+-                PacketSender.SendInventoryItemUpdate(this, slot);
++                if (sendUpdate)
++                {
++                    PacketSender.SendInventoryItemUpdate(this, slot);
++                }
+             }
+ 
+             if (returnVal)
diff --git a/Intersect (Core)/Enums/TagType.cs b/Intersect (Core)/Enums/TagType.cs
new file mode 100644
index 00000000..31fb5f3a
--- /dev/null
+++ b/Intersect (Core)/Enums/TagType.cs	
@@ -0,0 +1,11 @@
+namespace Intersect.Enums
+{
+    public enum TagType
+    {
+        Item = 0,
+
+        MapNPC,
+
+        Map
+    }
+}
diff --git a/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs b/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs
index 8b9d31df..1ee4cc27 100644
--- a/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs	
+++ b/Intersect (Core)/GameObjects/Events/Commands/EventCommands.cs	
@@ -455,6 +455,69 @@ public ChangeItemsCommand(Dictionary<Guid, List<EventCommand>> commandLists)
             return base.GetCopyData(commandLists, copyLists);
         }
 
+
+        public override void FixBranchIds(Dictionary<Guid, Guid> idDict)
+        {
+            for (var i = 0; i < BranchIds.Length; i++)
+            {
+                if (idDict.ContainsKey(BranchIds[i]))
+                {
+                    BranchIds[i] = idDict[BranchIds[i]];
+                }
+            }
+        }
+
+    }
+
+    public class ChangeItemsByTag : EventCommand
+    {
+
+        //For Json Deserialization
+        public ChangeItemsByTag()
+        {
+        }
+
+        public ChangeItemsByTag(Dictionary<Guid, List<EventCommand>> commandLists)
+        {
+            for (var i = 0; i < BranchIds.Length; i++)
+            {
+                BranchIds[i] = Guid.NewGuid();
+                commandLists.Add(BranchIds[i], new List<EventCommand>());
+            }
+        }
+
+        public override EventCommandType Type { get; } = EventCommandType.ChangeItemsByTag;
+
+        public string Tag { get; set; }
+
+        public int Quantity { get; set; }
+
+        public bool Add { get; set; }
+
+        public Guid[] BranchIds { get; set; } =
+            new Guid[2]; //Branch[0] is the event commands to execute when given/taken successfully, Branch[1] is for when they're not.
+
+        public override string GetCopyData(
+            Dictionary<Guid, List<EventCommand>> commandLists,
+            Dictionary<Guid, List<EventCommand>> copyLists
+        )
+        {
+            foreach (var branch in BranchIds)
+            {
+                if (branch != Guid.Empty && commandLists.ContainsKey(branch))
+                {
+                    copyLists.Add(branch, commandLists[branch]);
+                    foreach (var cmd in commandLists[branch])
+                    {
+                        cmd.GetCopyData(commandLists, copyLists);
+                    }
+                }
+            }
+
+            return base.GetCopyData(commandLists, copyLists);
+        }
+
+
         public override void FixBranchIds(Dictionary<Guid, Guid> idDict)
         {
             for (var i = 0; i < BranchIds.Length; i++)
diff --git a/Intersect (Core)/GameObjects/Events/Condition.cs b/Intersect (Core)/GameObjects/Events/Condition.cs
index 43e70da9..1da9d6d6 100644
--- a/Intersect (Core)/GameObjects/Events/Condition.cs	
+++ b/Intersect (Core)/GameObjects/Events/Condition.cs	
@@ -39,6 +39,14 @@ public enum ConditionTypes
         IsItemEquipped,
 
         HasFreeInventorySlots,
+        
+        EquippedItemTagIs,
+
+        HasItemWTag,
+
+        MapHasNpcWTag,
+
+        MapHasTag,
 
     }
 
@@ -177,6 +185,15 @@ public class NoNpcsOnMapCondition : Condition
 
     }
 
+    public class MapHasNPCWTag : Condition
+    {
+
+        public override ConditionTypes Type { get; } = ConditionTypes.MapHasNpcWTag;
+
+        public string Tag { get; set; }
+
+    }
+
     public class GenderIsCondition : Condition
     {
 
@@ -195,6 +212,15 @@ public class MapIsCondition : Condition
 
     }
 
+    public class MapHasTag : Condition
+    {
+
+        public override ConditionTypes Type { get; } = ConditionTypes.MapHasTag;
+
+        public string Tag { get; set; }
+
+    }
+
     public class IsItemEquippedCondition : Condition
     {
 
@@ -218,6 +244,24 @@ public class HasFreeInventorySlots : Condition
         /// Defines the amount of inventory slots that need to be free to clear this condition.
         /// </summary>
         public int Quantity { get; set; }
+
+    }
+
+    public class EquippedItemTagIsCondition : Condition
+    {
+        public override ConditionTypes Type { get; } = ConditionTypes.EquippedItemTagIs;
+
+        public string Tag { get; set; }
+    }
+
+    public class HasItemWTagCondition : Condition
+    {
+        public override ConditionTypes Type { get; } = ConditionTypes.HasItemWTag;
+
+        public string Tag { get; set; }
+
+        public int Quantity { get; set; }
+
     }
 
     public class VariableCompaison
diff --git a/Intersect (Core)/GameObjects/Events/Enums.cs b/Intersect (Core)/GameObjects/Events/Enums.cs
index a5d59d83..e305fdd2 100644
--- a/Intersect (Core)/GameObjects/Events/Enums.cs	
+++ b/Intersect (Core)/GameObjects/Events/Enums.cs	
@@ -215,6 +215,9 @@ public enum EventCommandType
         //Player Label
         PlayerLabel,
 
+        // Take Items By tag
+        ChangeItemsByTag,
+
     }
 
 }
diff --git a/Intersect (Core)/GameObjects/ItemBase.cs b/Intersect (Core)/GameObjects/ItemBase.cs
index 741a8f1e..a692e463 100644
--- a/Intersect (Core)/GameObjects/ItemBase.cs	
+++ b/Intersect (Core)/GameObjects/ItemBase.cs	
@@ -1,4 +1,6 @@
 ﻿using System;
+using System.Linq;
+using System.Collections.Generic;
 using System.ComponentModel.DataAnnotations.Schema;
 
 using Intersect.Enums;
@@ -120,6 +122,17 @@ public EventBase Event
 
         public string Description { get; set; } = "";
 
+        [NotMapped]
+        public List<String> Tags = new List<String>();
+
+        [Column("Tag")]
+        [JsonIgnore]
+        public string JsonTags
+        {
+            get => JsonConvert.SerializeObject(Tags);
+            set => Tags = JsonConvert.DeserializeObject<List<String>>(value ?? "[]");
+        }
+
         public string FemalePaperdoll { get; set; } = "";
 
         public ItemTypes ItemType { get; set; }
@@ -224,6 +237,11 @@ public string JsonUsageRequirements
                                    ItemType != ItemTypes.Equipment &&
                                    ItemType != ItemTypes.Bag;
 
+        [JsonIgnore, NotMapped]
+        public static string[] AllTags => Lookup
+            .SelectMany(pair => ((ItemBase)pair.Value)?.Tags)
+            .Distinct().OrderBy(t => t).ToArray();
+
         /// <inheritdoc />
         public string Folder { get; set; } = "";
 
diff --git a/Intersect (Core)/GameObjects/Maps/MapBase.cs b/Intersect (Core)/GameObjects/Maps/MapBase.cs
index b0af922f..107fb624 100644
--- a/Intersect (Core)/GameObjects/Maps/MapBase.cs	
+++ b/Intersect (Core)/GameObjects/Maps/MapBase.cs	
@@ -1,4 +1,5 @@
 ﻿using System;
+using System.Linq;
 using System.Collections.Generic;
 using System.ComponentModel.DataAnnotations.Schema;
 
@@ -39,6 +40,22 @@ public class MapBase : DatabaseObject<MapBase>
         //SyncLock
         [JsonIgnore] [NotMapped] protected object mMapLock = new object();
 
+        [NotMapped]
+        public List<String> Tags = new List<String>();
+
+        [Column("Tag")]
+        [JsonIgnore]
+        public string JsonTags
+        {
+            get => JsonConvert.SerializeObject(Tags);
+            set => Tags = JsonConvert.DeserializeObject<List<String>>(value ?? "[]");
+        }
+
+        [JsonIgnore, NotMapped]
+        public static string[] AllTags => Lookup
+            .SelectMany(pair => ((MapBase)pair.Value)?.Tags)
+            .Distinct().OrderBy(t => t).ToArray();
+
         [JsonConstructor]
         public MapBase(Guid id) : base(id)
         {
diff --git a/Intersect (Core)/GameObjects/NpcBase.cs b/Intersect (Core)/GameObjects/NpcBase.cs
index 97c62c85..3e063a96 100644
--- a/Intersect (Core)/GameObjects/NpcBase.cs	
+++ b/Intersect (Core)/GameObjects/NpcBase.cs	
@@ -1,4 +1,5 @@
 ﻿using System;
+using System.Linq;
 using System.Collections.Generic;
 using System.ComponentModel.DataAnnotations.Schema;
 
@@ -190,6 +191,17 @@ public string CraftsJson
 
         public string Sprite { get; set; } = "";
 
+        [NotMapped]
+        public List<String> Tags = new List<String>();
+
+        [Column("Tag")]
+        [JsonIgnore]
+        public string JsonTags
+        {
+            get => JsonConvert.SerializeObject(Tags);
+            set => Tags = JsonConvert.DeserializeObject<List<String>>(value ?? "[]");
+        }
+
         [Column("Stats")]
         [JsonIgnore]
         public string JsonStat
@@ -207,6 +219,11 @@ public string RegenJson
             set => VitalRegen = DatabaseUtils.LoadIntArray(value, (int) Vitals.VitalCount);
         }
 
+        [JsonIgnore, NotMapped]
+        public static string[] AllTags => Lookup
+            .SelectMany(pair => ((NpcBase)pair.Value)?.Tags)
+            .Distinct().OrderBy(t => t).ToArray();
+
         /// <inheritdoc />
         public string Folder { get; set; } = "";
 
diff --git a/Intersect (Core)/Intersect (Core).csproj b/Intersect (Core)/Intersect (Core).csproj
index d427e9af..15592d09 100644
--- a/Intersect (Core)/Intersect (Core).csproj	
+++ b/Intersect (Core)/Intersect (Core).csproj	
@@ -223,6 +223,7 @@
     <Compile Include="Config\SmtpSettings.cs" />
     <Compile Include="CustomColors.cs" />
     <Compile Include="Enums\ItemHandling.cs" />
+    <Compile Include="Enums\TagType.cs" />
     <Compile Include="ErrorHandling\ExceptionInfo.cs" />
     <Compile Include="Extensions\ArrayExtensions.cs" />
     <Compile Include="Extensions\DateTimeExtensions.cs" />
diff --git a/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs b/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
index 61371483..3edbe037 100644
--- a/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
+++ b/Intersect.Editor/Forms/Editors/Events/CommandPrinter.cs
@@ -349,7 +349,68 @@ MapInstance map
                             mCommandProperties.Add(clp);
 
                             break;
+                        case EventCommandType.ChangeItemsByTag:
+                            var titm = (ChangeItemsByTag)commandList[i];
+                            lstEventCommands.Items.Add(
+                                indent +
+                                Strings.EventCommandList.linestart +
+                                GetCommandText((dynamic)commandList[i], map)
+                            );
+
+                            clp = new CommandListProperties {
+                                Editable = true,
+                                MyIndex = i,
+                                MyList = commandList,
+                                Cmd = commandList[i],
+                                Type = commandList[i].Type
+                            };
+
+                            mCommandProperties.Add(clp);
+
+                            //When the item(s) were successfully taken:
+                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemchangedbytag);
+                            clp = new CommandListProperties {
+                                Editable = false,
+                                MyIndex = i,
+                                MyList = commandList,
+                                Type = commandList[i].Type,
+                                Cmd = commandList[i]
+                            };
+
+                            mCommandProperties.Add(clp);
+                            PrintCommandList(
+                                page, page.CommandLists[titm.BranchIds[0]], indent + "          ", lstEventCommands,
+                                mCommandProperties, map
+                            );
+
+                            //When the items failed to be given/taken:
+                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.itemnotchangedbytag);
+                            clp = new CommandListProperties {
+                                Editable = false,
+                                MyIndex = i,
+                                MyList = commandList,
+                                Type = commandList[i].Type,
+                                Cmd = commandList[i]
+                            };
+
+                            mCommandProperties.Add(clp);
+                            PrintCommandList(
+                                page, page.CommandLists[titm.BranchIds[1]], indent + "          ", lstEventCommands,
+                                mCommandProperties, map
+                            );
+
+                            lstEventCommands.Items.Add(indent + "      : " + Strings.EventCommandList.endchangeitemsbytag);
+                            clp = new CommandListProperties {
+                                Editable = false,
+                                MyIndex = i,
+                                MyList = commandList,
+                                Type = commandList[i].Type,
+                                Cmd = commandList[i]
+                            };
 
+                            mCommandProperties.Add(clp);
+
+                            break;
                         case EventCommandType.StartQuest:
                             var qst = (StartQuestCommand) commandList[i];
                             lstEventCommands.Items.Add(
@@ -620,6 +681,12 @@ private static string GetCommandText(ChangeItemsCommand command, MapInstance map
             );
         }
 
+        private static string GetCommandText(ChangeItemsByTag command, MapInstance map)
+        {
+
+            return Strings.EventCommandList.changeitemsbytag.ToString(command.Tag);
+        }
+
         private static string GetCommandText(EquipItemCommand command, MapInstance map)
         {
             return Strings.EventCommandList.equipitem.ToString(ItemBase.GetName(command.ItemId));
diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs
new file mode 100644
index 00000000..e9ff2991
--- /dev/null
+++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.Designer.cs	
@@ -0,0 +1,211 @@
+using DarkUI.Controls;
+
+namespace Intersect.Editor.Forms.Editors.Events.Event_Commands
+{
+    partial class EventCommandChangeItemsBytag
+    {
+        /// <summary>
+        /// Required designer variable.
+        /// </summary>
+        private System.ComponentModel.IContainer components = null;
+
+        /// <summary>
+        /// Clean up any resources being used.
+        /// </summary>
+        /// <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
+        protected override void Dispose(bool disposing)
+        {
+            if (disposing && (components != null))
+            {
+                components.Dispose();
+            }
+            base.Dispose(disposing);
+        }
+
+        #region Component Designer generated code
+
+        /// <summary>
+        /// Required method for Designer support - do not modify
+        /// the contents of this method with the code editor.
+        /// </summary>
+        private void InitializeComponent()
+        {
+            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(EventCommandChangeItemsBytag));
+            this.grpChangeItemsBytag = new DarkUI.Controls.DarkGroupBox();
+            this.nudGiveTakeAmount = new DarkUI.Controls.DarkNumericUpDown();
+            this.lblAmount = new System.Windows.Forms.Label();
+            this.cmbTags = new DarkUI.Controls.DarkComboBox();
+            this.lblTag = new System.Windows.Forms.Label();
+            this.btnCancel = new DarkUI.Controls.DarkButton();
+            this.btnSave = new DarkUI.Controls.DarkButton();
+            this.cmbAction = new DarkUI.Controls.DarkComboBox();
+            this.lblAction = new System.Windows.Forms.Label();
+            this.grpChangeItemsBytag.SuspendLayout();
+            ((System.ComponentModel.ISupportInitialize)(this.nudGiveTakeAmount)).BeginInit();
+            this.SuspendLayout();
+            // 
+            // grpChangeItemsBytag
+            // 
+            this.grpChangeItemsBytag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.grpChangeItemsBytag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpChangeItemsBytag.Controls.Add(this.cmbAction);
+            this.grpChangeItemsBytag.Controls.Add(this.lblAction);
+            this.grpChangeItemsBytag.Controls.Add(this.nudGiveTakeAmount);
+            this.grpChangeItemsBytag.Controls.Add(this.lblAmount);
+            this.grpChangeItemsBytag.Controls.Add(this.cmbTags);
+            this.grpChangeItemsBytag.Controls.Add(this.lblTag);
+            this.grpChangeItemsBytag.Controls.Add(this.btnCancel);
+            this.grpChangeItemsBytag.Controls.Add(this.btnSave);
+            this.grpChangeItemsBytag.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpChangeItemsBytag.Location = new System.Drawing.Point(3, 3);
+            this.grpChangeItemsBytag.Name = "grpChangeItemsBytag";
+            this.grpChangeItemsBytag.Size = new System.Drawing.Size(193, 133);
+            this.grpChangeItemsBytag.TabIndex = 17;
+            this.grpChangeItemsBytag.TabStop = false;
+            this.grpChangeItemsBytag.Text = "Take Item By Tag:";
+            // 
+            // nudGiveTakeAmount
+            // 
+            this.nudGiveTakeAmount.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.nudGiveTakeAmount.ForeColor = System.Drawing.Color.Gainsboro;
+            this.nudGiveTakeAmount.Location = new System.Drawing.Point(64, 73);
+            this.nudGiveTakeAmount.Maximum = new decimal(new int[] {
+            100000,
+            0,
+            0,
+            0});
+            this.nudGiveTakeAmount.Minimum = new decimal(new int[] {
+            1,
+            0,
+            0,
+            0});
+            this.nudGiveTakeAmount.Name = "nudGiveTakeAmount";
+            this.nudGiveTakeAmount.Size = new System.Drawing.Size(115, 20);
+            this.nudGiveTakeAmount.TabIndex = 26;
+            this.nudGiveTakeAmount.Value = new decimal(new int[] {
+            1,
+            0,
+            0,
+            0});
+            // 
+            // lblAmount
+            // 
+            this.lblAmount.AutoSize = true;
+            this.lblAmount.Location = new System.Drawing.Point(5, 75);
+            this.lblAmount.Name = "lblAmount";
+            this.lblAmount.Size = new System.Drawing.Size(46, 13);
+            this.lblAmount.TabIndex = 25;
+            this.lblAmount.Text = "Amount:";
+            // 
+            // cmbTags
+            // 
+            this.cmbTags.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbTags.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbTags.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbTags.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbTags.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTags.ButtonIcon")));
+            this.cmbTags.DrawDropdownHoverOutline = false;
+            this.cmbTags.DrawFocusRectangle = false;
+            this.cmbTags.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbTags.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbTags.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbTags.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbTags.FormattingEnabled = true;
+            this.cmbTags.Location = new System.Drawing.Point(64, 19);
+            this.cmbTags.Name = "cmbTags";
+            this.cmbTags.Size = new System.Drawing.Size(115, 21);
+            this.cmbTags.TabIndex = 22;
+            this.cmbTags.Text = null;
+            this.cmbTags.TextPadding = new System.Windows.Forms.Padding(2);
+            // 
+            // lblTag
+            // 
+            this.lblTag.AutoSize = true;
+            this.lblTag.Location = new System.Drawing.Point(5, 21);
+            this.lblTag.Name = "lblTag";
+            this.lblTag.Size = new System.Drawing.Size(29, 13);
+            this.lblTag.TabIndex = 21;
+            this.lblTag.Text = "Tag:";
+            // 
+            // btnCancel
+            // 
+            this.btnCancel.Location = new System.Drawing.Point(89, 104);
+            this.btnCancel.Name = "btnCancel";
+            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+            this.btnCancel.Size = new System.Drawing.Size(75, 23);
+            this.btnCancel.TabIndex = 20;
+            this.btnCancel.Text = "Cancel";
+            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+            // 
+            // btnSave
+            // 
+            this.btnSave.Location = new System.Drawing.Point(8, 104);
+            this.btnSave.Name = "btnSave";
+            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+            this.btnSave.Size = new System.Drawing.Size(75, 23);
+            this.btnSave.TabIndex = 19;
+            this.btnSave.Text = "Ok";
+            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+            // 
+            // cmbAction
+            // 
+            this.cmbAction.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbAction.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbAction.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbAction.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbAction.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAction.ButtonIcon")));
+            this.cmbAction.DrawDropdownHoverOutline = false;
+            this.cmbAction.DrawFocusRectangle = false;
+            this.cmbAction.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbAction.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbAction.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbAction.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbAction.FormattingEnabled = true;
+            this.cmbAction.Items.AddRange(new object[] {
+            "Give",
+            "Take"});
+            this.cmbAction.Location = new System.Drawing.Point(64, 46);
+            this.cmbAction.Name = "cmbAction";
+            this.cmbAction.Size = new System.Drawing.Size(115, 21);
+            this.cmbAction.TabIndex = 28;
+            this.cmbAction.Text = "Give";
+            this.cmbAction.TextPadding = new System.Windows.Forms.Padding(2);
+            // 
+            // lblAction
+            // 
+            this.lblAction.AutoSize = true;
+            this.lblAction.Location = new System.Drawing.Point(5, 48);
+            this.lblAction.Name = "lblAction";
+            this.lblAction.Size = new System.Drawing.Size(40, 13);
+            this.lblAction.TabIndex = 27;
+            this.lblAction.Text = "Action:";
+            // 
+            // EventCommandChangeItemsBytag
+            // 
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+            this.AutoSize = true;
+            this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.Controls.Add(this.grpChangeItemsBytag);
+            this.Name = "EventCommandChangeItemsBytag";
+            this.Size = new System.Drawing.Size(205, 139);
+            this.grpChangeItemsBytag.ResumeLayout(false);
+            this.grpChangeItemsBytag.PerformLayout();
+            ((System.ComponentModel.ISupportInitialize)(this.nudGiveTakeAmount)).EndInit();
+            this.ResumeLayout(false);
+
+        }
+
+        #endregion
+
+        private DarkGroupBox grpChangeItemsBytag;
+        private DarkButton btnCancel;
+        private DarkButton btnSave;
+        private DarkComboBox cmbTags;
+        private System.Windows.Forms.Label lblTag;
+        private System.Windows.Forms.Label lblAmount;
+        private DarkNumericUpDown nudGiveTakeAmount;
+        private DarkComboBox cmbAction;
+        private System.Windows.Forms.Label lblAction;
+    }
+}
diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs
new file mode 100644
index 00000000..3ad1e9da
--- /dev/null
+++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.cs	
@@ -0,0 +1,68 @@
+using System;
+using System.Linq;
+using System.Windows.Forms;
+
+using Intersect.Editor.Localization;
+using Intersect.GameObjects;
+using Intersect.GameObjects.Events;
+using Intersect.GameObjects.Events.Commands;
+
+namespace Intersect.Editor.Forms.Editors.Events.Event_Commands
+{
+
+    public partial class EventCommandChangeItemsBytag : UserControl
+    {
+
+        private readonly FrmEvent mEventEditor;
+
+        private EventPage mCurrentPage;
+
+        private ChangeItemsByTag mMyCommand;
+
+        public EventCommandChangeItemsBytag(ChangeItemsByTag refCommand, EventPage refPage, FrmEvent editor)
+        {
+            InitializeComponent();
+            mMyCommand = refCommand;
+            mEventEditor = editor;
+            mCurrentPage = refPage;
+            InitLocalization();
+            cmbTags.Items.Clear();
+            cmbTags.Items.AddRange(ItemBase.AllTags.OrderBy(x => x).ToArray());
+            cmbTags.SelectedIndex = cmbTags.Items.IndexOf(mMyCommand.Tag ?? "");
+            if (mMyCommand.Quantity < 1)
+            {
+                nudGiveTakeAmount.Value = 1;
+            }
+            else
+            {
+                nudGiveTakeAmount.Value = mMyCommand.Quantity;
+            }
+
+
+        }
+
+        private void InitLocalization()
+        {
+            lblAmount.Text = Strings.EventChangeItemsByTag.amount;
+            grpChangeItemsBytag.Text = Strings.EventChangeItemsByTag.title;
+            lblTag.Text = Strings.EventChangeItemsByTag.tag;
+            btnSave.Text = Strings.EventChangeItemsByTag.okay;
+            btnCancel.Text = Strings.EventChangeItemsByTag.cancel;
+        }
+
+        private void btnSave_Click(object sender, EventArgs e)
+        {
+            mMyCommand.Tag = cmbTags.GetItemText(cmbTags.SelectedItem);
+            mMyCommand.Add = !Convert.ToBoolean(cmbAction.SelectedIndex);
+            mMyCommand.Quantity = (int) nudGiveTakeAmount.Value;
+            mEventEditor.FinishCommandEdit();
+        }
+
+        private void btnCancel_Click(object sender, EventArgs e)
+        {
+            mEventEditor.CancelCommandEdit();
+        }
+
+    }
+
+}
diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx
new file mode 100644
index 00000000..3d2650f4
--- /dev/null
+++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ChangeItemsByTag.resx	
@@ -0,0 +1,135 @@
+<?xml version="1.0" encoding="utf-8"?>
+<root>
+  <!-- 
+    Microsoft ResX Schema 
+    
+    Version 2.0
+    
+    The primary goals of this format is to allow a simple XML format 
+    that is mostly human readable. The generation and parsing of the 
+    various data types are done through the TypeConverter classes 
+    associated with the data types.
+    
+    Example:
+    
+    ... ado.net/XML headers & schema ...
+    <resheader name="resmimetype">text/microsoft-resx</resheader>
+    <resheader name="version">2.0</resheader>
+    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
+    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
+    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
+    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
+    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
+        <value>[base64 mime encoded serialized .NET Framework object]</value>
+    </data>
+    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
+        <comment>This is a comment</comment>
+    </data>
+                
+    There are any number of "resheader" rows that contain simple 
+    name/value pairs.
+    
+    Each data row contains a name, and value. The row also contains a 
+    type or mimetype. Type corresponds to a .NET class that support 
+    text/value conversion through the TypeConverter architecture. 
+    Classes that don't support this are serialized and stored with the 
+    mimetype set.
+    
+    The mimetype is used for serialized objects, and tells the 
+    ResXResourceReader how to depersist the object. This is currently not 
+    extensible. For a given mimetype the value must be set accordingly:
+    
+    Note - application/x-microsoft.net.object.binary.base64 is the format 
+    that the ResXResourceWriter will generate, however the reader can 
+    read any of the formats listed below.
+    
+    mimetype: application/x-microsoft.net.object.binary.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
+            : and then encoded with base64 encoding.
+    
+    mimetype: application/x-microsoft.net.object.soap.base64
+    value   : The object must be serialized with 
+            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
+            : and then encoded with base64 encoding.
+
+    mimetype: application/x-microsoft.net.object.bytearray.base64
+    value   : The object must be serialized into a byte array 
+            : using a System.ComponentModel.TypeConverter
+            : and then encoded with base64 encoding.
+    -->
+  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
+    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
+    <xsd:element name="root" msdata:IsDataSet="true">
+      <xsd:complexType>
+        <xsd:choice maxOccurs="unbounded">
+          <xsd:element name="metadata">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" />
+              </xsd:sequence>
+              <xsd:attribute name="name" use="required" type="xsd:string" />
+              <xsd:attribute name="type" type="xsd:string" />
+              <xsd:attribute name="mimetype" type="xsd:string" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="assembly">
+            <xsd:complexType>
+              <xsd:attribute name="alias" type="xsd:string" />
+              <xsd:attribute name="name" type="xsd:string" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="data">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
+              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
+              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
+              <xsd:attribute ref="xml:space" />
+            </xsd:complexType>
+          </xsd:element>
+          <xsd:element name="resheader">
+            <xsd:complexType>
+              <xsd:sequence>
+                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
+              </xsd:sequence>
+              <xsd:attribute name="name" type="xsd:string" use="required" />
+            </xsd:complexType>
+          </xsd:element>
+        </xsd:choice>
+      </xsd:complexType>
+    </xsd:element>
+  </xsd:schema>
+  <resheader name="resmimetype">
+    <value>text/microsoft-resx</value>
+  </resheader>
+  <resheader name="version">
+    <value>2.0</value>
+  </resheader>
+  <resheader name="reader">
+    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <resheader name="writer">
+    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
+  </resheader>
+  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
+  <data name="cmbAction.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="cmbTags.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+</value>
+  </data>
+</root>
\ No newline at end of file
diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs
index 3ceae16c..5148b37f 100644
--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs	
+++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.Designer.cs	
@@ -69,6 +69,14 @@ private void InitializeComponent()
             this.cmbComparePlayerVar = new DarkUI.Controls.DarkComboBox();
             this.rdoVarComparePlayerVar = new DarkUI.Controls.DarkRadioButton();
             this.rdoVarCompareGlobalVar = new DarkUI.Controls.DarkRadioButton();
+            this.grpHasItemWTag = new DarkUI.Controls.DarkGroupBox();
+            this.nudHasItemWTag = new DarkUI.Controls.DarkNumericUpDown();
+            this.lblHasAtleastTag = new System.Windows.Forms.Label();
+            this.lblHasItemWTag = new System.Windows.Forms.Label();
+            this.cmbHasItemWTag = new DarkUI.Controls.DarkComboBox();
+            this.grpEquippedItemTag = new DarkUI.Controls.DarkGroupBox();
+            this.lblItemEquippedTag = new System.Windows.Forms.Label();
+            this.cmbEquippedItemTag = new DarkUI.Controls.DarkComboBox();
             this.grpQuestCompleted = new DarkUI.Controls.DarkGroupBox();
             this.lblQuestCompleted = new System.Windows.Forms.Label();
             this.cmbCompletedQuest = new DarkUI.Controls.DarkComboBox();
@@ -132,6 +140,9 @@ private void InitializeComponent()
             this.grpBooleanVariable.SuspendLayout();
             this.grpNumericVariable.SuspendLayout();
             ((System.ComponentModel.ISupportInitialize)(this.nudVariableValue)).BeginInit();
+            this.grpHasItemWTag.SuspendLayout();
+            ((System.ComponentModel.ISupportInitialize)(this.nudHasItemWTag)).BeginInit();
+            this.grpEquippedItemTag.SuspendLayout();
             this.grpQuestCompleted.SuspendLayout();
             this.grpQuestInProgress.SuspendLayout();
             this.grpStartQuest.SuspendLayout();
@@ -154,12 +165,14 @@ private void InitializeComponent()
             this.grpConditional.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
             this.grpConditional.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
             this.grpConditional.Controls.Add(this.grpFreeInventorySlots);
+            this.grpConditional.Controls.Add(this.grpVariable);
+            this.grpConditional.Controls.Add(this.grpHasItemWTag);
+            this.grpConditional.Controls.Add(this.grpEquippedItemTag);
             this.grpConditional.Controls.Add(this.chkNegated);
             this.grpConditional.Controls.Add(this.btnSave);
             this.grpConditional.Controls.Add(this.cmbConditionType);
             this.grpConditional.Controls.Add(this.lblType);
             this.grpConditional.Controls.Add(this.btnCancel);
-            this.grpConditional.Controls.Add(this.grpVariable);
             this.grpConditional.Controls.Add(this.grpQuestCompleted);
             this.grpConditional.Controls.Add(this.grpQuestInProgress);
             this.grpConditional.Controls.Add(this.grpStartQuest);
@@ -308,7 +321,7 @@ private void InitializeComponent()
             this.grpVariable.Controls.Add(this.grpBooleanVariable);
             this.grpVariable.Controls.Add(this.grpNumericVariable);
             this.grpVariable.ForeColor = System.Drawing.Color.Gainsboro;
-            this.grpVariable.Location = new System.Drawing.Point(9, 40);
+            this.grpVariable.Location = new System.Drawing.Point(7, 43);
             this.grpVariable.Name = "grpVariable";
             this.grpVariable.Size = new System.Drawing.Size(262, 233);
             this.grpVariable.TabIndex = 24;
@@ -739,6 +752,201 @@ private void InitializeComponent()
             this.rdoVarCompareGlobalVar.Text = "Global Variable Value:";
             this.rdoVarCompareGlobalVar.CheckedChanged += new System.EventHandler(this.rdoVarCompareGlobalVar_CheckedChanged);
             // 
+            // grpHasItemWTag
+            //
+            this.grpHasItemWTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.grpHasItemWTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpHasItemWTag.Controls.Add(this.nudHasItemWTag);
+            this.grpHasItemWTag.Controls.Add(this.lblHasAtleastTag);
+            this.grpHasItemWTag.Controls.Add(this.lblHasItemWTag);
+            this.grpHasItemWTag.Controls.Add(this.cmbHasItemWTag);
+            this.grpHasItemWTag.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpHasItemWTag.Location = new System.Drawing.Point(6, 43);
+            this.grpHasItemWTag.Name = "grpHasItemWTag";
+            this.grpHasItemWTag.Size = new System.Drawing.Size(262, 96);
+            this.grpHasItemWTag.TabIndex = 56;
+            this.grpHasItemWTag.TabStop = false;
+            this.grpHasItemWTag.Text = "Has Item With Tag:";
+            this.grpHasItemWTag.Visible = false;
+            //
+            // nudHasItemWTag
+            //
+            this.nudHasItemWTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.nudHasItemWTag.ForeColor = System.Drawing.Color.Gainsboro;
+            this.nudHasItemWTag.Location = new System.Drawing.Point(92, 19);
+            this.nudHasItemWTag.Maximum = new decimal(new int[] {
+            100000,
+            0,
+            0,
+            0});
+            this.nudHasItemWTag.Name = "nudHasItemWTag";
+            this.nudHasItemWTag.Size = new System.Drawing.Size(162, 20);
+            this.nudHasItemWTag.TabIndex = 9;
+            this.nudHasItemWTag.Value = new decimal(new int[] {
+            0,
+            0,
+            0,
+            0});
+            //
+            // lblHasAtleastTag
+            //
+            this.lblHasAtleastTag.AutoSize = true;
+            this.lblHasAtleastTag.Location = new System.Drawing.Point(6, 21);
+            this.lblHasAtleastTag.Name = "lblHasAtleastTag";
+            this.lblHasAtleastTag.Size = new System.Drawing.Size(66, 13);
+            this.lblHasAtleastTag.TabIndex = 6;
+            this.lblHasAtleastTag.Text = "Has at least:";
+            //
+            // lblHasItemWTag
+            //
+            this.lblHasItemWTag.AutoSize = true;
+            this.lblHasItemWTag.Location = new System.Drawing.Point(6, 55);
+            this.lblHasItemWTag.Name = "lblHasItemWTag";
+            this.lblHasItemWTag.Size = new System.Drawing.Size(29, 13);
+            this.lblHasItemWTag.TabIndex = 5;
+            this.lblHasItemWTag.Text = "Tag:";
+            //
+            // cmbHasItemWTag
+            //
+            this.cmbHasItemWTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbHasItemWTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbHasItemWTag.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbHasItemWTag.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbHasItemWTag.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbHasItemWTag.ButtonIcon")));
+            this.cmbHasItemWTag.DrawDropdownHoverOutline = false;
+            this.cmbHasItemWTag.DrawFocusRectangle = false;
+            this.cmbHasItemWTag.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbHasItemWTag.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbHasItemWTag.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbHasItemWTag.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbHasItemWTag.FormattingEnabled = true;
+            this.cmbHasItemWTag.Location = new System.Drawing.Point(92, 52);
+            this.cmbHasItemWTag.Name = "cmbHasItemWTag";
+            this.cmbHasItemWTag.Size = new System.Drawing.Size(162, 21);
+            this.cmbHasItemWTag.TabIndex = 3;
+            this.cmbHasItemWTag.Text = null;
+            this.cmbHasItemWTag.TextPadding = new System.Windows.Forms.Padding(2);
+            //
+            // grpEquippedItemTag
+            //
+            this.grpEquippedItemTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.grpEquippedItemTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpEquippedItemTag.Controls.Add(this.lblItemEquippedTag);
+            this.grpEquippedItemTag.Controls.Add(this.cmbEquippedItemTag);
+            this.grpEquippedItemTag.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpEquippedItemTag.Location = new System.Drawing.Point(6, 41);
+            this.grpEquippedItemTag.Name = "grpEquippedItemTag";
+            this.grpEquippedItemTag.Size = new System.Drawing.Size(262, 71);
+            this.grpEquippedItemTag.TabIndex = 55;
+            this.grpEquippedItemTag.TabStop = false;
+            this.grpEquippedItemTag.Text = "Item Equipped Tag";
+            this.grpEquippedItemTag.Visible = false;
+            //
+            // lblItemEquippedTag
+            //
+            this.lblItemEquippedTag.AutoSize = true;
+            this.lblItemEquippedTag.Location = new System.Drawing.Point(6, 21);
+            this.lblItemEquippedTag.Name = "lblItemEquippedTag";
+            this.lblItemEquippedTag.Size = new System.Drawing.Size(29, 13);
+            this.lblItemEquippedTag.TabIndex = 5;
+            this.lblItemEquippedTag.Text = "Tag:";
+            //
+            // cmbEquippedItemTag
+            //
+            this.cmbEquippedItemTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbEquippedItemTag.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbEquippedItemTag.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbEquippedItemTag.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbEquippedItemTag.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEquippedItemTag.ButtonIcon")));
+            this.cmbEquippedItemTag.DrawDropdownHoverOutline = false;
+            this.cmbEquippedItemTag.DrawFocusRectangle = false;
+            this.cmbEquippedItemTag.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbEquippedItemTag.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbEquippedItemTag.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbEquippedItemTag.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbEquippedItemTag.FormattingEnabled = true;
+            this.cmbEquippedItemTag.Location = new System.Drawing.Point(92, 18);
+            this.cmbEquippedItemTag.Name = "cmbEquippedItemTag";
+            this.cmbEquippedItemTag.Size = new System.Drawing.Size(162, 21);
+            this.cmbEquippedItemTag.TabIndex = 3;
+            this.cmbEquippedItemTag.Text = null;
+            this.cmbEquippedItemTag.TextPadding = new System.Windows.Forms.Padding(2);
+            //
+            // chkNegated
+            //
+            this.chkNegated.Location = new System.Drawing.Point(199, 279);
+            this.chkNegated.Name = "chkNegated";
+            this.chkNegated.Size = new System.Drawing.Size(72, 17);
+            this.chkNegated.TabIndex = 34;
+            this.chkNegated.Text = "Negated";
+            //
+            // btnSave
+            //
+            this.btnSave.Location = new System.Drawing.Point(12, 307);
+            this.btnSave.Name = "btnSave";
+            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+            this.btnSave.Size = new System.Drawing.Size(75, 23);
+            this.btnSave.TabIndex = 19;
+            this.btnSave.Text = "Ok";
+            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+            //
+            // cmbConditionType
+            //
+            this.cmbConditionType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbConditionType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbConditionType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbConditionType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbConditionType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbConditionType.ButtonIcon")));
+            this.cmbConditionType.DrawDropdownHoverOutline = false;
+            this.cmbConditionType.DrawFocusRectangle = false;
+            this.cmbConditionType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbConditionType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbConditionType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbConditionType.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbConditionType.FormattingEnabled = true;
+            this.cmbConditionType.Items.AddRange(new object[] {
+            "Variable is...",
+            "Has item...",
+            "Class is...",
+            "Knows spell...",
+            "Level is....",
+            "Self Switch is....",
+            "Power level is....",
+            "Time is between....",
+            "Can Start Quest....",
+            "Quest In Progress....",
+            "Quest Completed....",
+            "Player death...",
+            "No NPCs on the map...",
+            "Gender is...",
+            "Item Equipped Is..."});
+            this.cmbConditionType.Location = new System.Drawing.Point(88, 13);
+            this.cmbConditionType.Name = "cmbConditionType";
+            this.cmbConditionType.Size = new System.Drawing.Size(183, 21);
+            this.cmbConditionType.TabIndex = 22;
+            this.cmbConditionType.Text = "Variable is...";
+            this.cmbConditionType.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbConditionType.SelectedIndexChanged += new System.EventHandler(this.cmbConditionType_SelectedIndexChanged);
+            //
+            // lblType
+            //
+            this.lblType.AutoSize = true;
+            this.lblType.Location = new System.Drawing.Point(6, 16);
+            this.lblType.Name = "lblType";
+            this.lblType.Size = new System.Drawing.Size(81, 13);
+            this.lblType.TabIndex = 21;
+            this.lblType.Text = "Condition Type:";
+            //
+            // btnCancel
+            //
+            this.btnCancel.Location = new System.Drawing.Point(113, 307);
+            this.btnCancel.Name = "btnCancel";
+            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+            this.btnCancel.Size = new System.Drawing.Size(75, 23);
+            this.btnCancel.TabIndex = 20;
+            this.btnCancel.Text = "Cancel";
+            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+            //
             // grpQuestCompleted
             // 
             this.grpQuestCompleted.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
@@ -1568,6 +1776,11 @@ private void InitializeComponent()
             this.grpNumericVariable.ResumeLayout(false);
             this.grpNumericVariable.PerformLayout();
             ((System.ComponentModel.ISupportInitialize)(this.nudVariableValue)).EndInit();
+            this.grpHasItemWTag.ResumeLayout(false);
+            this.grpHasItemWTag.PerformLayout();
+            ((System.ComponentModel.ISupportInitialize)(this.nudHasItemWTag)).EndInit();
+            this.grpEquippedItemTag.ResumeLayout(false);
+            this.grpEquippedItemTag.PerformLayout();
             this.grpQuestCompleted.ResumeLayout(false);
             this.grpQuestCompleted.PerformLayout();
             this.grpQuestInProgress.ResumeLayout(false);
@@ -1693,5 +1906,13 @@ private void InitializeComponent()
         private DarkGroupBox grpFreeInventorySlots;
         private DarkNumericUpDown nudFreeInventorySlots;
         private System.Windows.Forms.Label lblFreeInventorySlotAmount;
+        private DarkGroupBox grpEquippedItemTag;
+        private System.Windows.Forms.Label lblItemEquippedTag;
+        private DarkComboBox cmbEquippedItemTag;
+        private DarkGroupBox grpHasItemWTag;
+        private DarkNumericUpDown nudHasItemWTag;
+        private System.Windows.Forms.Label lblHasAtleastTag;
+        private System.Windows.Forms.Label lblHasItemWTag;
+        private DarkComboBox cmbHasItemWTag;
     }
 }
diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs
index 7aca2cbb..6cf2cc78 100644
--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs	
+++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.cs	
@@ -132,6 +132,15 @@ private void InitLocalization()
             grpEquippedItem.Text = Strings.EventConditional.hasitemequipped;
             lblEquippedItem.Text = Strings.EventConditional.item;
 
+            //Item Equipped Has Tag
+            grpEquippedItemTag.Text = Strings.EventConditional.itemequippedhastag;
+            lblItemEquippedTag.Text = Strings.EventConditional.tag;
+
+            //Has Item With Tag
+            grpHasItemWTag.Text = Strings.EventConditional.hasitemwithtag;
+            lblHasAtleastTag.Text = Strings.EventConditional.hasatleast;
+            lblHasItemWTag.Text = Strings.EventConditional.tag;
+
             //Class is
             grpClass.Text = Strings.EventConditional.classis;
             lblClass.Text = Strings.EventConditional.Class;
@@ -316,6 +325,14 @@ private void ConditionTypeChanged(ConditionTypes type)
                 case ConditionTypes.NoNpcsOnMap:
                     Condition = new NoNpcsOnMapCondition();
 
+                    break;
+                case ConditionTypes.MapHasNpcWTag:
+                    Condition = new MapHasNPCWTag();
+                    if (cmbEquippedItemTag.Items.Count > 0)
+                    {
+                        cmbEquippedItemTag.SelectedIndex = 0;
+                    }
+
                     break;
                 case ConditionTypes.GenderIs:
                     Condition = new GenderIsCondition();
@@ -340,7 +357,31 @@ private void ConditionTypeChanged(ConditionTypes type)
                     nudFreeInventorySlots.Value = 1;
 
                     break;
+                case ConditionTypes.EquippedItemTagIs:
+                    Condition = new EquippedItemTagIsCondition();
+                    if (cmbEquippedItemTag.Items.Count > 0)
+                    {
+                        cmbEquippedItemTag.SelectedIndex = 0;
+                    }
+
+                    break;
+                case ConditionTypes.HasItemWTag:
+                    Condition = new HasItemWTagCondition();
+                    if (cmbHasItemWTag.Items.Count > 0)
+                    {
+                        cmbHasItemWTag.SelectedIndex = 0;
+                    }
+                    nudHasItemWTag.Value = 1;
+
+                    break;
+                case ConditionTypes.MapHasTag:
+                    Condition = new MapHasTag();
+                    if (cmbEquippedItemTag.Items.Count > 0)
+                    {
+                        cmbEquippedItemTag.SelectedIndex = 0;
+                    }
 
+                    break;
                 default:
                     throw new ArgumentOutOfRangeException();
             }
@@ -363,6 +404,8 @@ private void UpdateFormElements(ConditionTypes type)
             grpMapIs.Hide();
             grpEquippedItem.Hide();
             grpFreeInventorySlots.Hide();
+            grpHasItemWTag.Hide();
+            grpEquippedItemTag.Hide();
             switch (type)
             {
                 case ConditionTypes.VariableIs:
@@ -443,6 +486,11 @@ private void UpdateFormElements(ConditionTypes type)
 
                     break;
                 case ConditionTypes.NoNpcsOnMap:
+                    break;
+                case ConditionTypes.MapHasNpcWTag:
+                    ShowTagCombo(TagType.MapNPC);
+                    grpEquippedItemTag.Text = Strings.EventConditional.maphasnpcwithtag;
+
                     break;
                 case ConditionTypes.GenderIs:
                     grpGender.Show();
@@ -461,6 +509,20 @@ private void UpdateFormElements(ConditionTypes type)
 
                 case ConditionTypes.HasFreeInventorySlots:
                     grpFreeInventorySlots.Show();
+                    break;
+                case ConditionTypes.EquippedItemTagIs:
+                    ShowTagCombo(TagType.Item);
+                    grpEquippedItemTag.Text = Strings.EventConditional.itemequippedhastag;
+                    break;
+                case ConditionTypes.HasItemWTag:
+                    grpHasItemWTag.Show();
+                    cmbHasItemWTag.Items.Clear();
+                    cmbHasItemWTag.Items.AddRange(ItemBase.AllTags);
+
+                    break;
+                case ConditionTypes.MapHasTag:
+                    ShowTagCombo(TagType.Map);
+                    grpEquippedItemTag.Text = Strings.EventConditional.maphastag;
 
                     break;
                 default:
@@ -468,6 +530,36 @@ private void UpdateFormElements(ConditionTypes type)
             }
         }
 
+        private void ShowTagCombo(TagType type)
+        {
+            grpEquippedItemTag.Show();
+            cmbEquippedItemTag.Items.Clear();
+            string[] tagList;
+
+            switch (type)
+            {
+                case TagType.Item:
+                    tagList = ItemBase.AllTags;
+
+                    break;
+
+                case TagType.MapNPC:
+                    tagList = NpcBase.AllTags;
+
+                    break;
+
+                case TagType.Map:
+                    tagList = GameObjects.Maps.MapBase.AllTags;
+                    break;
+
+                default:
+                    tagList = new string[0];
+                    throw new NotImplementedException();
+            }
+
+            cmbEquippedItemTag.Items.AddRange(tagList);
+        }
+
         private void btnSave_Click(object sender, EventArgs e)
         {
             SaveFormValues((dynamic) Condition);
@@ -897,6 +989,31 @@ private void SetupFormValues(HasItemCondition condition)
             nudItemAmount.Value = condition.Quantity;
         }
 
+        private void SetupFormValues(HasItemWTagCondition condition)
+        {
+            for (int i = 0; i < cmbHasItemWTag.Items.Count; i++)
+            {
+                if (cmbHasItemWTag.Items[i].ToString() == condition.Tag)
+                {
+                    cmbHasItemWTag.SelectedIndex = i;
+                    break;
+                }
+            }
+            nudHasItemWTag.Value = condition.Quantity;
+        }
+
+        private void SetupFormValues(EquippedItemTagIsCondition condition)
+        {
+            for (int i = 0; i < cmbEquippedItemTag.Items.Count; i++)
+            {
+                if (cmbEquippedItemTag.Items[i].ToString() == condition.Tag)
+                {
+                    cmbEquippedItemTag.SelectedIndex = i;
+                    break;
+                }
+            }
+        }
+
         private void SetupFormValues(ClassIsCondition condition)
         {
             cmbClass.SelectedIndex = ClassBase.ListIndex(condition.ClassId);
@@ -968,6 +1085,30 @@ private void SetupFormValues(NoNpcsOnMapCondition condition)
             //Nothing to do but we need this here so the dynamic will work :) 
         }
 
+        private void SetupFormValues(MapHasNPCWTag condition)
+        {
+            for (int i = 0; i < cmbEquippedItemTag.Items.Count; i++)
+            {
+                if (cmbEquippedItemTag.Items[i].ToString() == condition.Tag)
+                {
+                    cmbEquippedItemTag.SelectedIndex = i;
+                    break;
+                }
+            }
+        }
+
+        private void SetupFormValues(MapHasTag condition)
+        {
+            for (int i = 0; i < cmbEquippedItemTag.Items.Count; i++)
+            {
+                if (cmbEquippedItemTag.Items[i].ToString() == condition.Tag)
+                {
+                    cmbEquippedItemTag.SelectedIndex = i;
+                    break;
+                }
+            }
+        }
+
         private void SetupFormValues(QuestCompletedCondition condition)
         {
             cmbCompletedQuest.SelectedIndex = QuestBase.ListIndex(condition.QuestId);
@@ -1109,6 +1250,18 @@ private void SaveFormValues(NoNpcsOnMapCondition condition)
             //Nothing to do but we need this here so the dynamic will work :) 
         }
 
+        private void SaveFormValues(MapHasNPCWTag condition)
+        {
+            condition.Tag = cmbEquippedItemTag.SelectedIndex == -1 ? null :
+                cmbEquippedItemTag.Items[cmbEquippedItemTag.SelectedIndex].ToString();
+        }
+
+        private void SaveFormValues(MapHasTag condition)
+        {
+            condition.Tag = cmbEquippedItemTag.SelectedIndex == -1 ? null :
+                cmbEquippedItemTag.Items[cmbEquippedItemTag.SelectedIndex].ToString();
+        }
+
         private void SaveFormValues(GenderIsCondition condition)
         {
             condition.Gender = (Gender) cmbGender.SelectedIndex;
@@ -1128,8 +1281,21 @@ private void SaveFormValues(HasFreeInventorySlots condition)
         {
             condition.Quantity = (int) nudFreeInventorySlots.Value;
         }
-        #endregion
+        
+        private void SaveFormValues(EquippedItemTagIsCondition condition)
+        {
+            condition.Tag = cmbEquippedItemTag.SelectedIndex == -1 ? null :
+                cmbEquippedItemTag.Items[cmbEquippedItemTag.SelectedIndex].ToString();
+        }
 
+        private void SaveFormValues(HasItemWTagCondition condition)
+        {
+            condition.Tag = cmbHasItemWTag.SelectedIndex == -1 ? null :
+                cmbHasItemWTag.Items[cmbHasItemWTag.SelectedIndex].ToString();
+            condition.Quantity = (int)nudHasItemWTag.Value;
+        }
+
+        #endregion
     }
 
 }
diff --git a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx
index fbd6a7cb..4a9b554c 100644
--- a/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx	
+++ b/Intersect.Editor/Forms/Editors/Events/Event Commands/EventCommand_ConditionalBranch.resx	
@@ -118,13 +118,6 @@
     <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
   </resheader>
   <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
-  <data name="cmbConditionType.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
-    <value>
-        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
-        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
-        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
-</value>
-  </data>
   <data name="cmbVariable.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
     <value>
         iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
@@ -179,6 +172,27 @@
         iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
         MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
         r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="cmbHasItemWTag.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="cmbEquippedItemTag.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
+</value>
+  </data>
+  <data name="cmbConditionType.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
+    <value>
+        iVBORw0KGgoAAAANSUhEUgAAAAkAAAAFCAYAAACXU8ZrAAAAIGNIUk0AAHolAACAgwAA+f8AAIDpAAB1
+        MAAA6mAAADqYAAAXb5JfxUYAAAAJcEhZcwAADsQAAA7EAZUrDhsAAAAvSURBVBhXY4iJiflPCDP8//8f
+        r0KQPFgRLoUwObgiEMamAIRRFIEwuoL///8zAAC5cW+geGnZqAAAAABJRU5ErkJggg==
 </value>
   </data>
   <data name="cmbCompletedQuest.ButtonIcon" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
diff --git a/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs b/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
index e9223a50..ede71d24 100644
--- a/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
+++ b/Intersect.Editor/Forms/Editors/Events/frmEvent.Designer.cs
@@ -32,25 +32,25 @@ protected override void Dispose(bool disposing)
         /// </summary>
         private void InitializeComponent()
         {
-      this.components = new System.ComponentModel.Container();
-      System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmEvent));
-      System.Windows.Forms.TreeNode treeNode1 = new System.Windows.Forms.TreeNode("Show Text");
-      System.Windows.Forms.TreeNode treeNode2 = new System.Windows.Forms.TreeNode("Show Options");
-      System.Windows.Forms.TreeNode treeNode3 = new System.Windows.Forms.TreeNode("Input Variable");
-      System.Windows.Forms.TreeNode treeNode4 = new System.Windows.Forms.TreeNode("Add Chatbox Text");
-      System.Windows.Forms.TreeNode treeNode5 = new System.Windows.Forms.TreeNode("Dialogue", new System.Windows.Forms.TreeNode[] {
+            this.components = new System.ComponentModel.Container();
+            System.ComponentModel.ComponentResourceManager resources = new System.ComponentModel.ComponentResourceManager(typeof(FrmEvent));
+            System.Windows.Forms.TreeNode treeNode1 = new System.Windows.Forms.TreeNode("Show Text");
+            System.Windows.Forms.TreeNode treeNode2 = new System.Windows.Forms.TreeNode("Show Options");
+            System.Windows.Forms.TreeNode treeNode3 = new System.Windows.Forms.TreeNode("Input Variable");
+            System.Windows.Forms.TreeNode treeNode4 = new System.Windows.Forms.TreeNode("Add Chatbox Text");
+            System.Windows.Forms.TreeNode treeNode5 = new System.Windows.Forms.TreeNode("Dialogue", new System.Windows.Forms.TreeNode[] {
             treeNode1,
             treeNode2,
             treeNode3,
             treeNode4});
-      System.Windows.Forms.TreeNode treeNode6 = new System.Windows.Forms.TreeNode("Set Variable");
-      System.Windows.Forms.TreeNode treeNode7 = new System.Windows.Forms.TreeNode("Set Self Switch");
-      System.Windows.Forms.TreeNode treeNode8 = new System.Windows.Forms.TreeNode("Conditional Branch");
-      System.Windows.Forms.TreeNode treeNode9 = new System.Windows.Forms.TreeNode("Exit Event Process");
-      System.Windows.Forms.TreeNode treeNode10 = new System.Windows.Forms.TreeNode("Label");
-      System.Windows.Forms.TreeNode treeNode11 = new System.Windows.Forms.TreeNode("Go To Label");
-      System.Windows.Forms.TreeNode treeNode12 = new System.Windows.Forms.TreeNode("Start Common Event");
-      System.Windows.Forms.TreeNode treeNode13 = new System.Windows.Forms.TreeNode("Logic Flow", new System.Windows.Forms.TreeNode[] {
+            System.Windows.Forms.TreeNode treeNode6 = new System.Windows.Forms.TreeNode("Set Variable");
+            System.Windows.Forms.TreeNode treeNode7 = new System.Windows.Forms.TreeNode("Set Self Switch");
+            System.Windows.Forms.TreeNode treeNode8 = new System.Windows.Forms.TreeNode("Conditional Branch");
+            System.Windows.Forms.TreeNode treeNode9 = new System.Windows.Forms.TreeNode("Exit Event Process");
+            System.Windows.Forms.TreeNode treeNode10 = new System.Windows.Forms.TreeNode("Label");
+            System.Windows.Forms.TreeNode treeNode11 = new System.Windows.Forms.TreeNode("Go To Label");
+            System.Windows.Forms.TreeNode treeNode12 = new System.Windows.Forms.TreeNode("Start Common Event");
+            System.Windows.Forms.TreeNode treeNode13 = new System.Windows.Forms.TreeNode("Logic Flow", new System.Windows.Forms.TreeNode[] {
             treeNode6,
             treeNode7,
             treeNode8,
@@ -58,22 +58,23 @@ private void InitializeComponent()
             treeNode10,
             treeNode11,
             treeNode12});
-      System.Windows.Forms.TreeNode treeNode14 = new System.Windows.Forms.TreeNode("Restore HP");
-      System.Windows.Forms.TreeNode treeNode15 = new System.Windows.Forms.TreeNode("Restore MP");
-      System.Windows.Forms.TreeNode treeNode16 = new System.Windows.Forms.TreeNode("Level Up");
-      System.Windows.Forms.TreeNode treeNode17 = new System.Windows.Forms.TreeNode("Give Experience");
-      System.Windows.Forms.TreeNode treeNode18 = new System.Windows.Forms.TreeNode("Change Level");
-      System.Windows.Forms.TreeNode treeNode19 = new System.Windows.Forms.TreeNode("Change Spells");
-      System.Windows.Forms.TreeNode treeNode20 = new System.Windows.Forms.TreeNode("Change Items");
-      System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode("Change Sprite");
-      System.Windows.Forms.TreeNode treeNode22 = new System.Windows.Forms.TreeNode("Change Face");
-      System.Windows.Forms.TreeNode treeNode23 = new System.Windows.Forms.TreeNode("Change Gender");
-      System.Windows.Forms.TreeNode treeNode24 = new System.Windows.Forms.TreeNode("Set Access");
-      System.Windows.Forms.TreeNode treeNode25 = new System.Windows.Forms.TreeNode("Change Class");
-      System.Windows.Forms.TreeNode treeNode26 = new System.Windows.Forms.TreeNode("Equip Item");
-      System.Windows.Forms.TreeNode treeNode27 = new System.Windows.Forms.TreeNode("Change Name Color");
-      System.Windows.Forms.TreeNode treeNode28 = new System.Windows.Forms.TreeNode("Change Player Label");
-      System.Windows.Forms.TreeNode treeNode29 = new System.Windows.Forms.TreeNode("Player Control", new System.Windows.Forms.TreeNode[] {
+            System.Windows.Forms.TreeNode treeNode14 = new System.Windows.Forms.TreeNode("Restore HP");
+            System.Windows.Forms.TreeNode treeNode15 = new System.Windows.Forms.TreeNode("Restore MP");
+            System.Windows.Forms.TreeNode treeNode16 = new System.Windows.Forms.TreeNode("Level Up");
+            System.Windows.Forms.TreeNode treeNode17 = new System.Windows.Forms.TreeNode("Give Experience");
+            System.Windows.Forms.TreeNode treeNode18 = new System.Windows.Forms.TreeNode("Change Level");
+            System.Windows.Forms.TreeNode treeNode19 = new System.Windows.Forms.TreeNode("Change Spells");
+            System.Windows.Forms.TreeNode treeNode20 = new System.Windows.Forms.TreeNode("Change Items");
+            System.Windows.Forms.TreeNode treeNode21 = new System.Windows.Forms.TreeNode("Change Items By Tag");
+            System.Windows.Forms.TreeNode treeNode22 = new System.Windows.Forms.TreeNode("Change Sprite");
+            System.Windows.Forms.TreeNode treeNode23 = new System.Windows.Forms.TreeNode("Change Face");
+            System.Windows.Forms.TreeNode treeNode24 = new System.Windows.Forms.TreeNode("Change Gender");
+            System.Windows.Forms.TreeNode treeNode25 = new System.Windows.Forms.TreeNode("Set Access");
+            System.Windows.Forms.TreeNode treeNode26 = new System.Windows.Forms.TreeNode("Change Class");
+            System.Windows.Forms.TreeNode treeNode27 = new System.Windows.Forms.TreeNode("Equip Item");
+            System.Windows.Forms.TreeNode treeNode28 = new System.Windows.Forms.TreeNode("Change Name Color");
+            System.Windows.Forms.TreeNode treeNode29 = new System.Windows.Forms.TreeNode("Change Player Label");
+            System.Windows.Forms.TreeNode treeNode30 = new System.Windows.Forms.TreeNode("Player Control", new System.Windows.Forms.TreeNode[] {
             treeNode14,
             treeNode15,
             treeNode16,
@@ -88,18 +89,18 @@ private void InitializeComponent()
             treeNode25,
             treeNode26,
             treeNode27,
-            treeNode28});
-      System.Windows.Forms.TreeNode treeNode30 = new System.Windows.Forms.TreeNode("Warp Player");
-      System.Windows.Forms.TreeNode treeNode31 = new System.Windows.Forms.TreeNode("Set Move Route");
-      System.Windows.Forms.TreeNode treeNode32 = new System.Windows.Forms.TreeNode("Wait for Route Completion");
-      System.Windows.Forms.TreeNode treeNode33 = new System.Windows.Forms.TreeNode("Hold Player");
-      System.Windows.Forms.TreeNode treeNode34 = new System.Windows.Forms.TreeNode("Release Player");
-      System.Windows.Forms.TreeNode treeNode35 = new System.Windows.Forms.TreeNode("Spawn NPC");
-      System.Windows.Forms.TreeNode treeNode36 = new System.Windows.Forms.TreeNode("Despawn NPC");
-      System.Windows.Forms.TreeNode treeNode37 = new System.Windows.Forms.TreeNode("Hide Player");
-      System.Windows.Forms.TreeNode treeNode38 = new System.Windows.Forms.TreeNode("Show Player");
-      System.Windows.Forms.TreeNode treeNode39 = new System.Windows.Forms.TreeNode("Movement", new System.Windows.Forms.TreeNode[] {
-            treeNode30,
+            treeNode28,
+            treeNode29});
+            System.Windows.Forms.TreeNode treeNode31 = new System.Windows.Forms.TreeNode("Warp Player");
+            System.Windows.Forms.TreeNode treeNode32 = new System.Windows.Forms.TreeNode("Set Move Route");
+            System.Windows.Forms.TreeNode treeNode33 = new System.Windows.Forms.TreeNode("Wait for Route Completion");
+            System.Windows.Forms.TreeNode treeNode34 = new System.Windows.Forms.TreeNode("Hold Player");
+            System.Windows.Forms.TreeNode treeNode35 = new System.Windows.Forms.TreeNode("Release Player");
+            System.Windows.Forms.TreeNode treeNode36 = new System.Windows.Forms.TreeNode("Spawn NPC");
+            System.Windows.Forms.TreeNode treeNode37 = new System.Windows.Forms.TreeNode("Despawn NPC");
+            System.Windows.Forms.TreeNode treeNode38 = new System.Windows.Forms.TreeNode("Hide Player");
+            System.Windows.Forms.TreeNode treeNode39 = new System.Windows.Forms.TreeNode("Show Player");
+            System.Windows.Forms.TreeNode treeNode40 = new System.Windows.Forms.TreeNode("Movement", new System.Windows.Forms.TreeNode[] {
             treeNode31,
             treeNode32,
             treeNode33,
@@ -107,1192 +108,1196 @@ private void InitializeComponent()
             treeNode35,
             treeNode36,
             treeNode37,
-            treeNode38});
-      System.Windows.Forms.TreeNode treeNode40 = new System.Windows.Forms.TreeNode("Play Animation");
-      System.Windows.Forms.TreeNode treeNode41 = new System.Windows.Forms.TreeNode("Play BGM");
-      System.Windows.Forms.TreeNode treeNode42 = new System.Windows.Forms.TreeNode("Fadeout BGM");
-      System.Windows.Forms.TreeNode treeNode43 = new System.Windows.Forms.TreeNode("Play Sound");
-      System.Windows.Forms.TreeNode treeNode44 = new System.Windows.Forms.TreeNode("Stop Sounds");
-      System.Windows.Forms.TreeNode treeNode45 = new System.Windows.Forms.TreeNode("Show Picture");
-      System.Windows.Forms.TreeNode treeNode46 = new System.Windows.Forms.TreeNode("Hide Picture");
-      System.Windows.Forms.TreeNode treeNode47 = new System.Windows.Forms.TreeNode("Special Effects", new System.Windows.Forms.TreeNode[] {
-            treeNode40,
+            treeNode38,
+            treeNode39});
+            System.Windows.Forms.TreeNode treeNode41 = new System.Windows.Forms.TreeNode("Play Animation");
+            System.Windows.Forms.TreeNode treeNode42 = new System.Windows.Forms.TreeNode("Play BGM");
+            System.Windows.Forms.TreeNode treeNode43 = new System.Windows.Forms.TreeNode("Fadeout BGM");
+            System.Windows.Forms.TreeNode treeNode44 = new System.Windows.Forms.TreeNode("Play Sound");
+            System.Windows.Forms.TreeNode treeNode45 = new System.Windows.Forms.TreeNode("Stop Sounds");
+            System.Windows.Forms.TreeNode treeNode46 = new System.Windows.Forms.TreeNode("Show Picture");
+            System.Windows.Forms.TreeNode treeNode47 = new System.Windows.Forms.TreeNode("Hide Picture");
+            System.Windows.Forms.TreeNode treeNode48 = new System.Windows.Forms.TreeNode("Special Effects", new System.Windows.Forms.TreeNode[] {
             treeNode41,
             treeNode42,
             treeNode43,
             treeNode44,
             treeNode45,
-            treeNode46});
-      System.Windows.Forms.TreeNode treeNode48 = new System.Windows.Forms.TreeNode("Start Quest");
-      System.Windows.Forms.TreeNode treeNode49 = new System.Windows.Forms.TreeNode("Complete Quest Task");
-      System.Windows.Forms.TreeNode treeNode50 = new System.Windows.Forms.TreeNode("End Quest");
-      System.Windows.Forms.TreeNode treeNode51 = new System.Windows.Forms.TreeNode("Quest Control", new System.Windows.Forms.TreeNode[] {
-            treeNode48,
+            treeNode46,
+            treeNode47});
+            System.Windows.Forms.TreeNode treeNode49 = new System.Windows.Forms.TreeNode("Start Quest");
+            System.Windows.Forms.TreeNode treeNode50 = new System.Windows.Forms.TreeNode("Complete Quest Task");
+            System.Windows.Forms.TreeNode treeNode51 = new System.Windows.Forms.TreeNode("End Quest");
+            System.Windows.Forms.TreeNode treeNode52 = new System.Windows.Forms.TreeNode("Quest Control", new System.Windows.Forms.TreeNode[] {
             treeNode49,
-            treeNode50});
-      System.Windows.Forms.TreeNode treeNode52 = new System.Windows.Forms.TreeNode("Wait...");
-      System.Windows.Forms.TreeNode treeNode53 = new System.Windows.Forms.TreeNode("Etc", new System.Windows.Forms.TreeNode[] {
-            treeNode52});
-      System.Windows.Forms.TreeNode treeNode54 = new System.Windows.Forms.TreeNode("Open Bank");
-      System.Windows.Forms.TreeNode treeNode55 = new System.Windows.Forms.TreeNode("Open Shop");
-      System.Windows.Forms.TreeNode treeNode56 = new System.Windows.Forms.TreeNode("Open Crafting Station");
-      System.Windows.Forms.TreeNode treeNode57 = new System.Windows.Forms.TreeNode("Shop and Bank", new System.Windows.Forms.TreeNode[] {
-            treeNode54,
+            treeNode50,
+            treeNode51});
+            System.Windows.Forms.TreeNode treeNode53 = new System.Windows.Forms.TreeNode("Wait...");
+            System.Windows.Forms.TreeNode treeNode54 = new System.Windows.Forms.TreeNode("Etc", new System.Windows.Forms.TreeNode[] {
+            treeNode53});
+            System.Windows.Forms.TreeNode treeNode55 = new System.Windows.Forms.TreeNode("Open Bank");
+            System.Windows.Forms.TreeNode treeNode56 = new System.Windows.Forms.TreeNode("Open Shop");
+            System.Windows.Forms.TreeNode treeNode57 = new System.Windows.Forms.TreeNode("Open Crafting Station");
+            System.Windows.Forms.TreeNode treeNode58 = new System.Windows.Forms.TreeNode("Shop and Bank", new System.Windows.Forms.TreeNode[] {
             treeNode55,
-            treeNode56});
-      this.lblName = new System.Windows.Forms.Label();
-      this.txtEventname = new DarkUI.Controls.DarkTextBox();
-      this.grpEntityOptions = new DarkUI.Controls.DarkGroupBox();
-      this.grpExtra = new DarkUI.Controls.DarkGroupBox();
-      this.chkInteractionFreeze = new DarkUI.Controls.DarkCheckBox();
-      this.chkWalkingAnimation = new DarkUI.Controls.DarkCheckBox();
-      this.chkDirectionFix = new DarkUI.Controls.DarkCheckBox();
-      this.chkHideName = new DarkUI.Controls.DarkCheckBox();
-      this.chkWalkThrough = new DarkUI.Controls.DarkCheckBox();
-      this.grpInspector = new DarkUI.Controls.DarkGroupBox();
-      this.pnlFacePreview = new System.Windows.Forms.Panel();
-      this.lblInspectorDesc = new System.Windows.Forms.Label();
-      this.txtDesc = new DarkUI.Controls.DarkTextBox();
-      this.chkDisableInspector = new DarkUI.Controls.DarkCheckBox();
-      this.cmbPreviewFace = new DarkUI.Controls.DarkComboBox();
-      this.lblFace = new System.Windows.Forms.Label();
-      this.grpPreview = new DarkUI.Controls.DarkGroupBox();
-      this.lblAnimation = new System.Windows.Forms.Label();
-      this.cmbAnimation = new DarkUI.Controls.DarkComboBox();
-      this.pnlPreview = new System.Windows.Forms.Panel();
-      this.grpMovement = new DarkUI.Controls.DarkGroupBox();
-      this.lblLayer = new System.Windows.Forms.Label();
-      this.cmbLayering = new DarkUI.Controls.DarkComboBox();
-      this.cmbEventFreq = new DarkUI.Controls.DarkComboBox();
-      this.cmbEventSpeed = new DarkUI.Controls.DarkComboBox();
-      this.lblFreq = new System.Windows.Forms.Label();
-      this.lblSpeed = new System.Windows.Forms.Label();
-      this.btnSetRoute = new DarkUI.Controls.DarkButton();
-      this.lblType = new System.Windows.Forms.Label();
-      this.cmbMoveType = new DarkUI.Controls.DarkComboBox();
-      this.grpTriggers = new DarkUI.Controls.DarkGroupBox();
-      this.txtCommand = new DarkUI.Controls.DarkTextBox();
-      this.lblCommand = new System.Windows.Forms.Label();
-      this.lblTriggerVal = new System.Windows.Forms.Label();
-      this.cmbTriggerVal = new DarkUI.Controls.DarkComboBox();
-      this.cmbTrigger = new DarkUI.Controls.DarkComboBox();
-      this.grpEventConditions = new DarkUI.Controls.DarkGroupBox();
-      this.btnEditConditions = new DarkUI.Controls.DarkButton();
-      this.grpNewCommands = new DarkUI.Controls.DarkGroupBox();
-      this.lblCloseCommands = new System.Windows.Forms.Label();
-      this.lstCommands = new System.Windows.Forms.TreeView();
-      this.grpEventCommands = new DarkUI.Controls.DarkGroupBox();
-      this.lstEventCommands = new System.Windows.Forms.ListBox();
-      this.grpCreateCommands = new DarkUI.Controls.DarkGroupBox();
-      this.btnSave = new DarkUI.Controls.DarkButton();
-      this.btnCancel = new DarkUI.Controls.DarkButton();
-      this.commandMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
-      this.btnInsert = new System.Windows.Forms.ToolStripMenuItem();
-      this.btnEdit = new System.Windows.Forms.ToolStripMenuItem();
-      this.btnCut = new System.Windows.Forms.ToolStripMenuItem();
-      this.btnCopy = new System.Windows.Forms.ToolStripMenuItem();
-      this.btnPaste = new System.Windows.Forms.ToolStripMenuItem();
-      this.btnDelete = new System.Windows.Forms.ToolStripMenuItem();
-      this.grpPageOptions = new DarkUI.Controls.DarkGroupBox();
-      this.btnClearPage = new DarkUI.Controls.DarkButton();
-      this.btnDeletePage = new DarkUI.Controls.DarkButton();
-      this.btnPastePage = new DarkUI.Controls.DarkButton();
-      this.btnCopyPage = new DarkUI.Controls.DarkButton();
-      this.btnNewPage = new DarkUI.Controls.DarkButton();
-      this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
-      this.chkIsGlobal = new DarkUI.Controls.DarkCheckBox();
-      this.pnlTabsContainer = new System.Windows.Forms.Panel();
-      this.pnlTabs = new System.Windows.Forms.Panel();
-      this.btnTabsRight = new DarkUI.Controls.DarkButton();
-      this.btnTabsLeft = new DarkUI.Controls.DarkButton();
-      this.panel1 = new System.Windows.Forms.Panel();
-      this.grpEntityOptions.SuspendLayout();
-      this.grpExtra.SuspendLayout();
-      this.grpInspector.SuspendLayout();
-      this.grpPreview.SuspendLayout();
-      this.grpMovement.SuspendLayout();
-      this.grpTriggers.SuspendLayout();
-      this.grpEventConditions.SuspendLayout();
-      this.grpNewCommands.SuspendLayout();
-      this.grpEventCommands.SuspendLayout();
-      this.commandMenu.SuspendLayout();
-      this.grpPageOptions.SuspendLayout();
-      this.grpGeneral.SuspendLayout();
-      this.pnlTabsContainer.SuspendLayout();
-      this.SuspendLayout();
-      // 
-      // lblName
-      // 
-      this.lblName.AutoSize = true;
-      this.lblName.Location = new System.Drawing.Point(6, 22);
-      this.lblName.Name = "lblName";
-      this.lblName.Size = new System.Drawing.Size(38, 13);
-      this.lblName.TabIndex = 1;
-      this.lblName.Text = "Name:";
-      // 
-      // txtEventname
-      // 
-      this.txtEventname.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.txtEventname.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.txtEventname.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
-      this.txtEventname.Location = new System.Drawing.Point(48, 19);
-      this.txtEventname.Name = "txtEventname";
-      this.txtEventname.Size = new System.Drawing.Size(124, 20);
-      this.txtEventname.TabIndex = 2;
-      this.txtEventname.TextChanged += new System.EventHandler(this.txtEventname_TextChanged);
-      // 
-      // grpEntityOptions
-      // 
-      this.grpEntityOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpEntityOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpEntityOptions.Controls.Add(this.grpExtra);
-      this.grpEntityOptions.Controls.Add(this.grpInspector);
-      this.grpEntityOptions.Controls.Add(this.grpPreview);
-      this.grpEntityOptions.Controls.Add(this.grpMovement);
-      this.grpEntityOptions.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpEntityOptions.Location = new System.Drawing.Point(21, 150);
-      this.grpEntityOptions.Name = "grpEntityOptions";
-      this.grpEntityOptions.Size = new System.Drawing.Size(326, 423);
-      this.grpEntityOptions.TabIndex = 12;
-      this.grpEntityOptions.TabStop = false;
-      this.grpEntityOptions.Text = "Entity Options";
-      // 
-      // grpExtra
-      // 
-      this.grpExtra.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpExtra.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpExtra.Controls.Add(this.chkInteractionFreeze);
-      this.grpExtra.Controls.Add(this.chkWalkingAnimation);
-      this.grpExtra.Controls.Add(this.chkDirectionFix);
-      this.grpExtra.Controls.Add(this.chkHideName);
-      this.grpExtra.Controls.Add(this.chkWalkThrough);
-      this.grpExtra.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpExtra.Location = new System.Drawing.Point(6, 297);
-      this.grpExtra.Name = "grpExtra";
-      this.grpExtra.Size = new System.Drawing.Size(315, 64);
-      this.grpExtra.TabIndex = 9;
-      this.grpExtra.TabStop = false;
-      this.grpExtra.Text = "Extra";
-      // 
-      // chkInteractionFreeze
-      // 
-      this.chkInteractionFreeze.AutoSize = true;
-      this.chkInteractionFreeze.Location = new System.Drawing.Point(6, 41);
-      this.chkInteractionFreeze.Name = "chkInteractionFreeze";
-      this.chkInteractionFreeze.Size = new System.Drawing.Size(111, 17);
-      this.chkInteractionFreeze.TabIndex = 6;
-      this.chkInteractionFreeze.Text = "Interaction Freeze";
-      this.chkInteractionFreeze.CheckedChanged += new System.EventHandler(this.chkInteractionFreeze_CheckedChanged);
-      // 
-      // chkWalkingAnimation
-      // 
-      this.chkWalkingAnimation.AutoSize = true;
-      this.chkWalkingAnimation.Location = new System.Drawing.Point(214, 19);
-      this.chkWalkingAnimation.Name = "chkWalkingAnimation";
-      this.chkWalkingAnimation.Size = new System.Drawing.Size(91, 17);
-      this.chkWalkingAnimation.TabIndex = 5;
-      this.chkWalkingAnimation.Text = "Walking Anim";
-      this.chkWalkingAnimation.CheckedChanged += new System.EventHandler(this.chkWalkingAnimation_CheckedChanged);
-      // 
-      // chkDirectionFix
-      // 
-      this.chkDirectionFix.AutoSize = true;
-      this.chkDirectionFix.Location = new System.Drawing.Point(156, 19);
-      this.chkDirectionFix.Name = "chkDirectionFix";
-      this.chkDirectionFix.Size = new System.Drawing.Size(55, 17);
-      this.chkDirectionFix.TabIndex = 4;
-      this.chkDirectionFix.Text = "Dir Fix";
-      this.chkDirectionFix.CheckedChanged += new System.EventHandler(this.chkDirectionFix_CheckedChanged);
-      // 
-      // chkHideName
-      // 
-      this.chkHideName.AutoSize = true;
-      this.chkHideName.Location = new System.Drawing.Point(75, 19);
-      this.chkHideName.Name = "chkHideName";
-      this.chkHideName.Size = new System.Drawing.Size(79, 17);
-      this.chkHideName.TabIndex = 3;
-      this.chkHideName.Text = "Hide Name";
-      this.chkHideName.CheckedChanged += new System.EventHandler(this.chkHideName_CheckedChanged);
-      // 
-      // chkWalkThrough
-      // 
-      this.chkWalkThrough.AutoSize = true;
-      this.chkWalkThrough.Location = new System.Drawing.Point(6, 19);
-      this.chkWalkThrough.Name = "chkWalkThrough";
-      this.chkWalkThrough.Size = new System.Drawing.Size(69, 17);
-      this.chkWalkThrough.TabIndex = 2;
-      this.chkWalkThrough.Text = "Passable";
-      this.chkWalkThrough.CheckedChanged += new System.EventHandler(this.chkWalkThrough_CheckedChanged);
-      // 
-      // grpInspector
-      // 
-      this.grpInspector.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpInspector.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpInspector.Controls.Add(this.pnlFacePreview);
-      this.grpInspector.Controls.Add(this.lblInspectorDesc);
-      this.grpInspector.Controls.Add(this.txtDesc);
-      this.grpInspector.Controls.Add(this.chkDisableInspector);
-      this.grpInspector.Controls.Add(this.cmbPreviewFace);
-      this.grpInspector.Controls.Add(this.lblFace);
-      this.grpInspector.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpInspector.Location = new System.Drawing.Point(6, 179);
-      this.grpInspector.Name = "grpInspector";
-      this.grpInspector.Size = new System.Drawing.Size(316, 117);
-      this.grpInspector.TabIndex = 7;
-      this.grpInspector.TabStop = false;
-      this.grpInspector.Text = "Entity Inspector Options";
-      // 
-      // pnlFacePreview
-      // 
-      this.pnlFacePreview.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
-      this.pnlFacePreview.Location = new System.Drawing.Point(9, 46);
-      this.pnlFacePreview.Name = "pnlFacePreview";
-      this.pnlFacePreview.Size = new System.Drawing.Size(64, 64);
-      this.pnlFacePreview.TabIndex = 12;
-      // 
-      // lblInspectorDesc
-      // 
-      this.lblInspectorDesc.Location = new System.Drawing.Point(79, 42);
-      this.lblInspectorDesc.Name = "lblInspectorDesc";
-      this.lblInspectorDesc.Size = new System.Drawing.Size(112, 19);
-      this.lblInspectorDesc.TabIndex = 11;
-      this.lblInspectorDesc.Text = "Inspector Description:";
-      // 
-      // txtDesc
-      // 
-      this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
-      this.txtDesc.Location = new System.Drawing.Point(79, 61);
-      this.txtDesc.Multiline = true;
-      this.txtDesc.Name = "txtDesc";
-      this.txtDesc.Size = new System.Drawing.Size(231, 50);
-      this.txtDesc.TabIndex = 0;
-      this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
-      // 
-      // chkDisableInspector
-      // 
-      this.chkDisableInspector.Location = new System.Drawing.Point(204, 15);
-      this.chkDisableInspector.Name = "chkDisableInspector";
-      this.chkDisableInspector.Size = new System.Drawing.Size(107, 21);
-      this.chkDisableInspector.TabIndex = 4;
-      this.chkDisableInspector.Text = "Disable Inspector";
-      this.chkDisableInspector.CheckedChanged += new System.EventHandler(this.chkDisablePreview_CheckedChanged);
-      // 
-      // cmbPreviewFace
-      // 
-      this.cmbPreviewFace.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbPreviewFace.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbPreviewFace.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbPreviewFace.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbPreviewFace.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbPreviewFace.ButtonIcon")));
-      this.cmbPreviewFace.DrawDropdownHoverOutline = false;
-      this.cmbPreviewFace.DrawFocusRectangle = false;
-      this.cmbPreviewFace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbPreviewFace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbPreviewFace.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbPreviewFace.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbPreviewFace.FormattingEnabled = true;
-      this.cmbPreviewFace.Location = new System.Drawing.Point(46, 15);
-      this.cmbPreviewFace.Name = "cmbPreviewFace";
-      this.cmbPreviewFace.Size = new System.Drawing.Size(114, 21);
-      this.cmbPreviewFace.TabIndex = 10;
-      this.cmbPreviewFace.Text = null;
-      this.cmbPreviewFace.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbPreviewFace.SelectedIndexChanged += new System.EventHandler(this.cmbPreviewFace_SelectedIndexChanged);
-      // 
-      // lblFace
-      // 
-      this.lblFace.AutoSize = true;
-      this.lblFace.Location = new System.Drawing.Point(6, 18);
-      this.lblFace.Name = "lblFace";
-      this.lblFace.Size = new System.Drawing.Size(34, 13);
-      this.lblFace.TabIndex = 9;
-      this.lblFace.Text = "Face:";
-      // 
-      // grpPreview
-      // 
-      this.grpPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpPreview.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpPreview.Controls.Add(this.lblAnimation);
-      this.grpPreview.Controls.Add(this.cmbAnimation);
-      this.grpPreview.Controls.Add(this.pnlPreview);
-      this.grpPreview.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpPreview.Location = new System.Drawing.Point(6, 13);
-      this.grpPreview.Name = "grpPreview";
-      this.grpPreview.Size = new System.Drawing.Size(160, 163);
-      this.grpPreview.TabIndex = 10;
-      this.grpPreview.TabStop = false;
-      this.grpPreview.Text = "Preview";
-      // 
-      // lblAnimation
-      // 
-      this.lblAnimation.AutoSize = true;
-      this.lblAnimation.Location = new System.Drawing.Point(4, 116);
-      this.lblAnimation.Name = "lblAnimation";
-      this.lblAnimation.Size = new System.Drawing.Size(56, 13);
-      this.lblAnimation.TabIndex = 2;
-      this.lblAnimation.Text = "Animation:";
-      // 
-      // cmbAnimation
-      // 
-      this.cmbAnimation.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbAnimation.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbAnimation.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbAnimation.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbAnimation.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAnimation.ButtonIcon")));
-      this.cmbAnimation.DrawDropdownHoverOutline = false;
-      this.cmbAnimation.DrawFocusRectangle = false;
-      this.cmbAnimation.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbAnimation.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbAnimation.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbAnimation.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbAnimation.FormattingEnabled = true;
-      this.cmbAnimation.Location = new System.Drawing.Point(20, 132);
-      this.cmbAnimation.Name = "cmbAnimation";
-      this.cmbAnimation.Size = new System.Drawing.Size(125, 21);
-      this.cmbAnimation.TabIndex = 1;
-      this.cmbAnimation.Text = null;
-      this.cmbAnimation.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbAnimation.SelectedIndexChanged += new System.EventHandler(this.cmbAnimation_SelectedIndexChanged);
-      // 
-      // pnlPreview
-      // 
-      this.pnlPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
-      this.pnlPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.pnlPreview.Location = new System.Drawing.Point(33, 14);
-      this.pnlPreview.Name = "pnlPreview";
-      this.pnlPreview.Size = new System.Drawing.Size(96, 96);
-      this.pnlPreview.TabIndex = 0;
-      this.pnlPreview.DoubleClick += new System.EventHandler(this.pnlPreview_DoubleClick);
-      // 
-      // grpMovement
-      // 
-      this.grpMovement.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpMovement.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpMovement.Controls.Add(this.lblLayer);
-      this.grpMovement.Controls.Add(this.cmbLayering);
-      this.grpMovement.Controls.Add(this.cmbEventFreq);
-      this.grpMovement.Controls.Add(this.cmbEventSpeed);
-      this.grpMovement.Controls.Add(this.lblFreq);
-      this.grpMovement.Controls.Add(this.lblSpeed);
-      this.grpMovement.Controls.Add(this.btnSetRoute);
-      this.grpMovement.Controls.Add(this.lblType);
-      this.grpMovement.Controls.Add(this.cmbMoveType);
-      this.grpMovement.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpMovement.Location = new System.Drawing.Point(169, 13);
-      this.grpMovement.Name = "grpMovement";
-      this.grpMovement.Size = new System.Drawing.Size(154, 163);
-      this.grpMovement.TabIndex = 8;
-      this.grpMovement.TabStop = false;
-      this.grpMovement.Text = "Movement";
-      // 
-      // lblLayer
-      // 
-      this.lblLayer.AutoSize = true;
-      this.lblLayer.Location = new System.Drawing.Point(6, 134);
-      this.lblLayer.Name = "lblLayer";
-      this.lblLayer.Size = new System.Drawing.Size(36, 13);
-      this.lblLayer.TabIndex = 7;
-      this.lblLayer.Text = "Layer:";
-      // 
-      // cmbLayering
-      // 
-      this.cmbLayering.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbLayering.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbLayering.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbLayering.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbLayering.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbLayering.ButtonIcon")));
-      this.cmbLayering.DrawDropdownHoverOutline = false;
-      this.cmbLayering.DrawFocusRectangle = false;
-      this.cmbLayering.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbLayering.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbLayering.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbLayering.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbLayering.FormattingEnabled = true;
-      this.cmbLayering.Items.AddRange(new object[] {
+            treeNode56,
+            treeNode57});
+            this.lblName = new System.Windows.Forms.Label();
+            this.txtEventname = new DarkUI.Controls.DarkTextBox();
+            this.grpEntityOptions = new DarkUI.Controls.DarkGroupBox();
+            this.grpExtra = new DarkUI.Controls.DarkGroupBox();
+            this.chkInteractionFreeze = new DarkUI.Controls.DarkCheckBox();
+            this.chkWalkingAnimation = new DarkUI.Controls.DarkCheckBox();
+            this.chkDirectionFix = new DarkUI.Controls.DarkCheckBox();
+            this.chkHideName = new DarkUI.Controls.DarkCheckBox();
+            this.chkWalkThrough = new DarkUI.Controls.DarkCheckBox();
+            this.grpInspector = new DarkUI.Controls.DarkGroupBox();
+            this.pnlFacePreview = new System.Windows.Forms.Panel();
+            this.lblInspectorDesc = new System.Windows.Forms.Label();
+            this.txtDesc = new DarkUI.Controls.DarkTextBox();
+            this.chkDisableInspector = new DarkUI.Controls.DarkCheckBox();
+            this.cmbPreviewFace = new DarkUI.Controls.DarkComboBox();
+            this.lblFace = new System.Windows.Forms.Label();
+            this.grpPreview = new DarkUI.Controls.DarkGroupBox();
+            this.lblAnimation = new System.Windows.Forms.Label();
+            this.cmbAnimation = new DarkUI.Controls.DarkComboBox();
+            this.pnlPreview = new System.Windows.Forms.Panel();
+            this.grpMovement = new DarkUI.Controls.DarkGroupBox();
+            this.lblLayer = new System.Windows.Forms.Label();
+            this.cmbLayering = new DarkUI.Controls.DarkComboBox();
+            this.cmbEventFreq = new DarkUI.Controls.DarkComboBox();
+            this.cmbEventSpeed = new DarkUI.Controls.DarkComboBox();
+            this.lblFreq = new System.Windows.Forms.Label();
+            this.lblSpeed = new System.Windows.Forms.Label();
+            this.btnSetRoute = new DarkUI.Controls.DarkButton();
+            this.lblType = new System.Windows.Forms.Label();
+            this.cmbMoveType = new DarkUI.Controls.DarkComboBox();
+            this.grpTriggers = new DarkUI.Controls.DarkGroupBox();
+            this.txtCommand = new DarkUI.Controls.DarkTextBox();
+            this.lblCommand = new System.Windows.Forms.Label();
+            this.lblTriggerVal = new System.Windows.Forms.Label();
+            this.cmbTriggerVal = new DarkUI.Controls.DarkComboBox();
+            this.cmbTrigger = new DarkUI.Controls.DarkComboBox();
+            this.grpEventConditions = new DarkUI.Controls.DarkGroupBox();
+            this.btnEditConditions = new DarkUI.Controls.DarkButton();
+            this.grpNewCommands = new DarkUI.Controls.DarkGroupBox();
+            this.lblCloseCommands = new System.Windows.Forms.Label();
+            this.lstCommands = new System.Windows.Forms.TreeView();
+            this.grpEventCommands = new DarkUI.Controls.DarkGroupBox();
+            this.lstEventCommands = new System.Windows.Forms.ListBox();
+            this.grpCreateCommands = new DarkUI.Controls.DarkGroupBox();
+            this.btnSave = new DarkUI.Controls.DarkButton();
+            this.btnCancel = new DarkUI.Controls.DarkButton();
+            this.commandMenu = new System.Windows.Forms.ContextMenuStrip(this.components);
+            this.btnInsert = new System.Windows.Forms.ToolStripMenuItem();
+            this.btnEdit = new System.Windows.Forms.ToolStripMenuItem();
+            this.btnCut = new System.Windows.Forms.ToolStripMenuItem();
+            this.btnCopy = new System.Windows.Forms.ToolStripMenuItem();
+            this.btnPaste = new System.Windows.Forms.ToolStripMenuItem();
+            this.btnDelete = new System.Windows.Forms.ToolStripMenuItem();
+            this.grpPageOptions = new DarkUI.Controls.DarkGroupBox();
+            this.btnClearPage = new DarkUI.Controls.DarkButton();
+            this.btnDeletePage = new DarkUI.Controls.DarkButton();
+            this.btnPastePage = new DarkUI.Controls.DarkButton();
+            this.btnCopyPage = new DarkUI.Controls.DarkButton();
+            this.btnNewPage = new DarkUI.Controls.DarkButton();
+            this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
+            this.chkIsGlobal = new DarkUI.Controls.DarkCheckBox();
+            this.pnlTabsContainer = new System.Windows.Forms.Panel();
+            this.pnlTabs = new System.Windows.Forms.Panel();
+            this.btnTabsRight = new DarkUI.Controls.DarkButton();
+            this.btnTabsLeft = new DarkUI.Controls.DarkButton();
+            this.panel1 = new System.Windows.Forms.Panel();
+            this.grpEntityOptions.SuspendLayout();
+            this.grpExtra.SuspendLayout();
+            this.grpInspector.SuspendLayout();
+            this.grpPreview.SuspendLayout();
+            this.grpMovement.SuspendLayout();
+            this.grpTriggers.SuspendLayout();
+            this.grpEventConditions.SuspendLayout();
+            this.grpNewCommands.SuspendLayout();
+            this.grpEventCommands.SuspendLayout();
+            this.commandMenu.SuspendLayout();
+            this.grpPageOptions.SuspendLayout();
+            this.grpGeneral.SuspendLayout();
+            this.pnlTabsContainer.SuspendLayout();
+            this.SuspendLayout();
+            // 
+            // lblName
+            // 
+            this.lblName.AutoSize = true;
+            this.lblName.Location = new System.Drawing.Point(6, 22);
+            this.lblName.Name = "lblName";
+            this.lblName.Size = new System.Drawing.Size(38, 13);
+            this.lblName.TabIndex = 1;
+            this.lblName.Text = "Name:";
+            // 
+            // txtEventname
+            // 
+            this.txtEventname.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.txtEventname.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.txtEventname.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.txtEventname.Location = new System.Drawing.Point(48, 19);
+            this.txtEventname.Name = "txtEventname";
+            this.txtEventname.Size = new System.Drawing.Size(124, 20);
+            this.txtEventname.TabIndex = 2;
+            this.txtEventname.TextChanged += new System.EventHandler(this.txtEventname_TextChanged);
+            // 
+            // grpEntityOptions
+            // 
+            this.grpEntityOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpEntityOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpEntityOptions.Controls.Add(this.grpExtra);
+            this.grpEntityOptions.Controls.Add(this.grpInspector);
+            this.grpEntityOptions.Controls.Add(this.grpPreview);
+            this.grpEntityOptions.Controls.Add(this.grpMovement);
+            this.grpEntityOptions.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpEntityOptions.Location = new System.Drawing.Point(21, 150);
+            this.grpEntityOptions.Name = "grpEntityOptions";
+            this.grpEntityOptions.Size = new System.Drawing.Size(326, 423);
+            this.grpEntityOptions.TabIndex = 12;
+            this.grpEntityOptions.TabStop = false;
+            this.grpEntityOptions.Text = "Entity Options";
+            // 
+            // grpExtra
+            // 
+            this.grpExtra.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpExtra.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpExtra.Controls.Add(this.chkInteractionFreeze);
+            this.grpExtra.Controls.Add(this.chkWalkingAnimation);
+            this.grpExtra.Controls.Add(this.chkDirectionFix);
+            this.grpExtra.Controls.Add(this.chkHideName);
+            this.grpExtra.Controls.Add(this.chkWalkThrough);
+            this.grpExtra.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpExtra.Location = new System.Drawing.Point(6, 297);
+            this.grpExtra.Name = "grpExtra";
+            this.grpExtra.Size = new System.Drawing.Size(315, 64);
+            this.grpExtra.TabIndex = 9;
+            this.grpExtra.TabStop = false;
+            this.grpExtra.Text = "Extra";
+            // 
+            // chkInteractionFreeze
+            // 
+            this.chkInteractionFreeze.AutoSize = true;
+            this.chkInteractionFreeze.Location = new System.Drawing.Point(6, 41);
+            this.chkInteractionFreeze.Name = "chkInteractionFreeze";
+            this.chkInteractionFreeze.Size = new System.Drawing.Size(111, 17);
+            this.chkInteractionFreeze.TabIndex = 6;
+            this.chkInteractionFreeze.Text = "Interaction Freeze";
+            this.chkInteractionFreeze.CheckedChanged += new System.EventHandler(this.chkInteractionFreeze_CheckedChanged);
+            // 
+            // chkWalkingAnimation
+            // 
+            this.chkWalkingAnimation.AutoSize = true;
+            this.chkWalkingAnimation.Location = new System.Drawing.Point(214, 19);
+            this.chkWalkingAnimation.Name = "chkWalkingAnimation";
+            this.chkWalkingAnimation.Size = new System.Drawing.Size(91, 17);
+            this.chkWalkingAnimation.TabIndex = 5;
+            this.chkWalkingAnimation.Text = "Walking Anim";
+            this.chkWalkingAnimation.CheckedChanged += new System.EventHandler(this.chkWalkingAnimation_CheckedChanged);
+            // 
+            // chkDirectionFix
+            // 
+            this.chkDirectionFix.AutoSize = true;
+            this.chkDirectionFix.Location = new System.Drawing.Point(156, 19);
+            this.chkDirectionFix.Name = "chkDirectionFix";
+            this.chkDirectionFix.Size = new System.Drawing.Size(55, 17);
+            this.chkDirectionFix.TabIndex = 4;
+            this.chkDirectionFix.Text = "Dir Fix";
+            this.chkDirectionFix.CheckedChanged += new System.EventHandler(this.chkDirectionFix_CheckedChanged);
+            // 
+            // chkHideName
+            // 
+            this.chkHideName.AutoSize = true;
+            this.chkHideName.Location = new System.Drawing.Point(75, 19);
+            this.chkHideName.Name = "chkHideName";
+            this.chkHideName.Size = new System.Drawing.Size(79, 17);
+            this.chkHideName.TabIndex = 3;
+            this.chkHideName.Text = "Hide Name";
+            this.chkHideName.CheckedChanged += new System.EventHandler(this.chkHideName_CheckedChanged);
+            // 
+            // chkWalkThrough
+            // 
+            this.chkWalkThrough.AutoSize = true;
+            this.chkWalkThrough.Location = new System.Drawing.Point(6, 19);
+            this.chkWalkThrough.Name = "chkWalkThrough";
+            this.chkWalkThrough.Size = new System.Drawing.Size(69, 17);
+            this.chkWalkThrough.TabIndex = 2;
+            this.chkWalkThrough.Text = "Passable";
+            this.chkWalkThrough.CheckedChanged += new System.EventHandler(this.chkWalkThrough_CheckedChanged);
+            // 
+            // grpInspector
+            // 
+            this.grpInspector.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpInspector.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpInspector.Controls.Add(this.pnlFacePreview);
+            this.grpInspector.Controls.Add(this.lblInspectorDesc);
+            this.grpInspector.Controls.Add(this.txtDesc);
+            this.grpInspector.Controls.Add(this.chkDisableInspector);
+            this.grpInspector.Controls.Add(this.cmbPreviewFace);
+            this.grpInspector.Controls.Add(this.lblFace);
+            this.grpInspector.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpInspector.Location = new System.Drawing.Point(6, 179);
+            this.grpInspector.Name = "grpInspector";
+            this.grpInspector.Size = new System.Drawing.Size(316, 117);
+            this.grpInspector.TabIndex = 7;
+            this.grpInspector.TabStop = false;
+            this.grpInspector.Text = "Entity Inspector Options";
+            // 
+            // pnlFacePreview
+            // 
+            this.pnlFacePreview.BackgroundImageLayout = System.Windows.Forms.ImageLayout.Stretch;
+            this.pnlFacePreview.Location = new System.Drawing.Point(9, 46);
+            this.pnlFacePreview.Name = "pnlFacePreview";
+            this.pnlFacePreview.Size = new System.Drawing.Size(64, 64);
+            this.pnlFacePreview.TabIndex = 12;
+            // 
+            // lblInspectorDesc
+            // 
+            this.lblInspectorDesc.Location = new System.Drawing.Point(79, 42);
+            this.lblInspectorDesc.Name = "lblInspectorDesc";
+            this.lblInspectorDesc.Size = new System.Drawing.Size(112, 19);
+            this.lblInspectorDesc.TabIndex = 11;
+            this.lblInspectorDesc.Text = "Inspector Description:";
+            // 
+            // txtDesc
+            // 
+            this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.txtDesc.Location = new System.Drawing.Point(79, 61);
+            this.txtDesc.Multiline = true;
+            this.txtDesc.Name = "txtDesc";
+            this.txtDesc.Size = new System.Drawing.Size(231, 50);
+            this.txtDesc.TabIndex = 0;
+            this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
+            // 
+            // chkDisableInspector
+            // 
+            this.chkDisableInspector.Location = new System.Drawing.Point(204, 15);
+            this.chkDisableInspector.Name = "chkDisableInspector";
+            this.chkDisableInspector.Size = new System.Drawing.Size(107, 21);
+            this.chkDisableInspector.TabIndex = 4;
+            this.chkDisableInspector.Text = "Disable Inspector";
+            this.chkDisableInspector.CheckedChanged += new System.EventHandler(this.chkDisablePreview_CheckedChanged);
+            // 
+            // cmbPreviewFace
+            // 
+            this.cmbPreviewFace.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbPreviewFace.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbPreviewFace.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbPreviewFace.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbPreviewFace.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbPreviewFace.ButtonIcon")));
+            this.cmbPreviewFace.DrawDropdownHoverOutline = false;
+            this.cmbPreviewFace.DrawFocusRectangle = false;
+            this.cmbPreviewFace.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbPreviewFace.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbPreviewFace.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbPreviewFace.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbPreviewFace.FormattingEnabled = true;
+            this.cmbPreviewFace.Location = new System.Drawing.Point(46, 15);
+            this.cmbPreviewFace.Name = "cmbPreviewFace";
+            this.cmbPreviewFace.Size = new System.Drawing.Size(114, 21);
+            this.cmbPreviewFace.TabIndex = 10;
+            this.cmbPreviewFace.Text = null;
+            this.cmbPreviewFace.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbPreviewFace.SelectedIndexChanged += new System.EventHandler(this.cmbPreviewFace_SelectedIndexChanged);
+            // 
+            // lblFace
+            // 
+            this.lblFace.AutoSize = true;
+            this.lblFace.Location = new System.Drawing.Point(6, 18);
+            this.lblFace.Name = "lblFace";
+            this.lblFace.Size = new System.Drawing.Size(34, 13);
+            this.lblFace.TabIndex = 9;
+            this.lblFace.Text = "Face:";
+            // 
+            // grpPreview
+            // 
+            this.grpPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpPreview.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpPreview.Controls.Add(this.lblAnimation);
+            this.grpPreview.Controls.Add(this.cmbAnimation);
+            this.grpPreview.Controls.Add(this.pnlPreview);
+            this.grpPreview.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpPreview.Location = new System.Drawing.Point(6, 13);
+            this.grpPreview.Name = "grpPreview";
+            this.grpPreview.Size = new System.Drawing.Size(160, 163);
+            this.grpPreview.TabIndex = 10;
+            this.grpPreview.TabStop = false;
+            this.grpPreview.Text = "Preview";
+            // 
+            // lblAnimation
+            // 
+            this.lblAnimation.AutoSize = true;
+            this.lblAnimation.Location = new System.Drawing.Point(4, 116);
+            this.lblAnimation.Name = "lblAnimation";
+            this.lblAnimation.Size = new System.Drawing.Size(56, 13);
+            this.lblAnimation.TabIndex = 2;
+            this.lblAnimation.Text = "Animation:";
+            // 
+            // cmbAnimation
+            // 
+            this.cmbAnimation.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbAnimation.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbAnimation.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbAnimation.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbAnimation.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbAnimation.ButtonIcon")));
+            this.cmbAnimation.DrawDropdownHoverOutline = false;
+            this.cmbAnimation.DrawFocusRectangle = false;
+            this.cmbAnimation.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbAnimation.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbAnimation.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbAnimation.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbAnimation.FormattingEnabled = true;
+            this.cmbAnimation.Location = new System.Drawing.Point(20, 132);
+            this.cmbAnimation.Name = "cmbAnimation";
+            this.cmbAnimation.Size = new System.Drawing.Size(125, 21);
+            this.cmbAnimation.TabIndex = 1;
+            this.cmbAnimation.Text = null;
+            this.cmbAnimation.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbAnimation.SelectedIndexChanged += new System.EventHandler(this.cmbAnimation_SelectedIndexChanged);
+            // 
+            // pnlPreview
+            // 
+            this.pnlPreview.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.pnlPreview.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.pnlPreview.Location = new System.Drawing.Point(33, 14);
+            this.pnlPreview.Name = "pnlPreview";
+            this.pnlPreview.Size = new System.Drawing.Size(96, 96);
+            this.pnlPreview.TabIndex = 0;
+            this.pnlPreview.DoubleClick += new System.EventHandler(this.pnlPreview_DoubleClick);
+            // 
+            // grpMovement
+            // 
+            this.grpMovement.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpMovement.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpMovement.Controls.Add(this.lblLayer);
+            this.grpMovement.Controls.Add(this.cmbLayering);
+            this.grpMovement.Controls.Add(this.cmbEventFreq);
+            this.grpMovement.Controls.Add(this.cmbEventSpeed);
+            this.grpMovement.Controls.Add(this.lblFreq);
+            this.grpMovement.Controls.Add(this.lblSpeed);
+            this.grpMovement.Controls.Add(this.btnSetRoute);
+            this.grpMovement.Controls.Add(this.lblType);
+            this.grpMovement.Controls.Add(this.cmbMoveType);
+            this.grpMovement.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpMovement.Location = new System.Drawing.Point(169, 13);
+            this.grpMovement.Name = "grpMovement";
+            this.grpMovement.Size = new System.Drawing.Size(154, 163);
+            this.grpMovement.TabIndex = 8;
+            this.grpMovement.TabStop = false;
+            this.grpMovement.Text = "Movement";
+            // 
+            // lblLayer
+            // 
+            this.lblLayer.AutoSize = true;
+            this.lblLayer.Location = new System.Drawing.Point(6, 134);
+            this.lblLayer.Name = "lblLayer";
+            this.lblLayer.Size = new System.Drawing.Size(36, 13);
+            this.lblLayer.TabIndex = 7;
+            this.lblLayer.Text = "Layer:";
+            // 
+            // cmbLayering
+            // 
+            this.cmbLayering.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbLayering.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbLayering.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbLayering.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbLayering.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbLayering.ButtonIcon")));
+            this.cmbLayering.DrawDropdownHoverOutline = false;
+            this.cmbLayering.DrawFocusRectangle = false;
+            this.cmbLayering.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbLayering.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbLayering.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbLayering.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbLayering.FormattingEnabled = true;
+            this.cmbLayering.Items.AddRange(new object[] {
             "Below Player",
             "Same as Player",
             "Above Player"});
-      this.cmbLayering.Location = new System.Drawing.Point(48, 131);
-      this.cmbLayering.Name = "cmbLayering";
-      this.cmbLayering.Size = new System.Drawing.Size(101, 21);
-      this.cmbLayering.TabIndex = 1;
-      this.cmbLayering.Text = "Below Player";
-      this.cmbLayering.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbLayering.SelectedIndexChanged += new System.EventHandler(this.cmbLayering_SelectedIndexChanged);
-      // 
-      // cmbEventFreq
-      // 
-      this.cmbEventFreq.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbEventFreq.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbEventFreq.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbEventFreq.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbEventFreq.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventFreq.ButtonIcon")));
-      this.cmbEventFreq.DrawDropdownHoverOutline = false;
-      this.cmbEventFreq.DrawFocusRectangle = false;
-      this.cmbEventFreq.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbEventFreq.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbEventFreq.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbEventFreq.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbEventFreq.FormattingEnabled = true;
-      this.cmbEventFreq.Items.AddRange(new object[] {
+            this.cmbLayering.Location = new System.Drawing.Point(48, 131);
+            this.cmbLayering.Name = "cmbLayering";
+            this.cmbLayering.Size = new System.Drawing.Size(101, 21);
+            this.cmbLayering.TabIndex = 1;
+            this.cmbLayering.Text = "Below Player";
+            this.cmbLayering.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbLayering.SelectedIndexChanged += new System.EventHandler(this.cmbLayering_SelectedIndexChanged);
+            // 
+            // cmbEventFreq
+            // 
+            this.cmbEventFreq.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbEventFreq.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbEventFreq.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbEventFreq.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbEventFreq.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventFreq.ButtonIcon")));
+            this.cmbEventFreq.DrawDropdownHoverOutline = false;
+            this.cmbEventFreq.DrawFocusRectangle = false;
+            this.cmbEventFreq.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbEventFreq.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbEventFreq.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbEventFreq.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbEventFreq.FormattingEnabled = true;
+            this.cmbEventFreq.Items.AddRange(new object[] {
             "Not Very Often",
             "Not Often",
             "Normal",
             "Often",
             "Very Often"});
-      this.cmbEventFreq.Location = new System.Drawing.Point(48, 104);
-      this.cmbEventFreq.Name = "cmbEventFreq";
-      this.cmbEventFreq.Size = new System.Drawing.Size(100, 21);
-      this.cmbEventFreq.TabIndex = 6;
-      this.cmbEventFreq.Text = "Not Very Often";
-      this.cmbEventFreq.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbEventFreq.SelectedIndexChanged += new System.EventHandler(this.cmbEventFreq_SelectedIndexChanged);
-      // 
-      // cmbEventSpeed
-      // 
-      this.cmbEventSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbEventSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbEventSpeed.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbEventSpeed.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbEventSpeed.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventSpeed.ButtonIcon")));
-      this.cmbEventSpeed.DrawDropdownHoverOutline = false;
-      this.cmbEventSpeed.DrawFocusRectangle = false;
-      this.cmbEventSpeed.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbEventSpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbEventSpeed.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbEventSpeed.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbEventSpeed.FormattingEnabled = true;
-      this.cmbEventSpeed.Items.AddRange(new object[] {
+            this.cmbEventFreq.Location = new System.Drawing.Point(48, 104);
+            this.cmbEventFreq.Name = "cmbEventFreq";
+            this.cmbEventFreq.Size = new System.Drawing.Size(100, 21);
+            this.cmbEventFreq.TabIndex = 6;
+            this.cmbEventFreq.Text = "Not Very Often";
+            this.cmbEventFreq.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbEventFreq.SelectedIndexChanged += new System.EventHandler(this.cmbEventFreq_SelectedIndexChanged);
+            // 
+            // cmbEventSpeed
+            // 
+            this.cmbEventSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbEventSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbEventSpeed.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbEventSpeed.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbEventSpeed.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbEventSpeed.ButtonIcon")));
+            this.cmbEventSpeed.DrawDropdownHoverOutline = false;
+            this.cmbEventSpeed.DrawFocusRectangle = false;
+            this.cmbEventSpeed.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbEventSpeed.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbEventSpeed.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbEventSpeed.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbEventSpeed.FormattingEnabled = true;
+            this.cmbEventSpeed.Items.AddRange(new object[] {
             "Slowest",
             "Slower",
             "Normal",
             "Faster",
             "Fastest"});
-      this.cmbEventSpeed.Location = new System.Drawing.Point(48, 77);
-      this.cmbEventSpeed.Name = "cmbEventSpeed";
-      this.cmbEventSpeed.Size = new System.Drawing.Size(100, 21);
-      this.cmbEventSpeed.TabIndex = 5;
-      this.cmbEventSpeed.Text = "Slowest";
-      this.cmbEventSpeed.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbEventSpeed.SelectedIndexChanged += new System.EventHandler(this.cmbEventSpeed_SelectedIndexChanged);
-      // 
-      // lblFreq
-      // 
-      this.lblFreq.AutoSize = true;
-      this.lblFreq.Location = new System.Drawing.Point(6, 107);
-      this.lblFreq.Name = "lblFreq";
-      this.lblFreq.Size = new System.Drawing.Size(31, 13);
-      this.lblFreq.TabIndex = 4;
-      this.lblFreq.Text = "Freq:";
-      // 
-      // lblSpeed
-      // 
-      this.lblSpeed.AutoSize = true;
-      this.lblSpeed.Location = new System.Drawing.Point(6, 80);
-      this.lblSpeed.Name = "lblSpeed";
-      this.lblSpeed.Size = new System.Drawing.Size(41, 13);
-      this.lblSpeed.TabIndex = 3;
-      this.lblSpeed.Text = "Speed:";
-      // 
-      // btnSetRoute
-      // 
-      this.btnSetRoute.Enabled = false;
-      this.btnSetRoute.Location = new System.Drawing.Point(73, 43);
-      this.btnSetRoute.Name = "btnSetRoute";
-      this.btnSetRoute.Padding = new System.Windows.Forms.Padding(5);
-      this.btnSetRoute.Size = new System.Drawing.Size(75, 23);
-      this.btnSetRoute.TabIndex = 2;
-      this.btnSetRoute.Text = "Set Route....";
-      this.btnSetRoute.Click += new System.EventHandler(this.btnSetRoute_Click);
-      // 
-      // lblType
-      // 
-      this.lblType.AutoSize = true;
-      this.lblType.Location = new System.Drawing.Point(6, 22);
-      this.lblType.Name = "lblType";
-      this.lblType.Size = new System.Drawing.Size(34, 13);
-      this.lblType.TabIndex = 1;
-      this.lblType.Text = "Type:";
-      // 
-      // cmbMoveType
-      // 
-      this.cmbMoveType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbMoveType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbMoveType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbMoveType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbMoveType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbMoveType.ButtonIcon")));
-      this.cmbMoveType.DrawDropdownHoverOutline = false;
-      this.cmbMoveType.DrawFocusRectangle = false;
-      this.cmbMoveType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbMoveType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbMoveType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbMoveType.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbMoveType.FormattingEnabled = true;
-      this.cmbMoveType.Items.AddRange(new object[] {
+            this.cmbEventSpeed.Location = new System.Drawing.Point(48, 77);
+            this.cmbEventSpeed.Name = "cmbEventSpeed";
+            this.cmbEventSpeed.Size = new System.Drawing.Size(100, 21);
+            this.cmbEventSpeed.TabIndex = 5;
+            this.cmbEventSpeed.Text = "Slowest";
+            this.cmbEventSpeed.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbEventSpeed.SelectedIndexChanged += new System.EventHandler(this.cmbEventSpeed_SelectedIndexChanged);
+            // 
+            // lblFreq
+            // 
+            this.lblFreq.AutoSize = true;
+            this.lblFreq.Location = new System.Drawing.Point(6, 107);
+            this.lblFreq.Name = "lblFreq";
+            this.lblFreq.Size = new System.Drawing.Size(31, 13);
+            this.lblFreq.TabIndex = 4;
+            this.lblFreq.Text = "Freq:";
+            // 
+            // lblSpeed
+            // 
+            this.lblSpeed.AutoSize = true;
+            this.lblSpeed.Location = new System.Drawing.Point(6, 80);
+            this.lblSpeed.Name = "lblSpeed";
+            this.lblSpeed.Size = new System.Drawing.Size(41, 13);
+            this.lblSpeed.TabIndex = 3;
+            this.lblSpeed.Text = "Speed:";
+            // 
+            // btnSetRoute
+            // 
+            this.btnSetRoute.Enabled = false;
+            this.btnSetRoute.Location = new System.Drawing.Point(73, 43);
+            this.btnSetRoute.Name = "btnSetRoute";
+            this.btnSetRoute.Padding = new System.Windows.Forms.Padding(5);
+            this.btnSetRoute.Size = new System.Drawing.Size(75, 23);
+            this.btnSetRoute.TabIndex = 2;
+            this.btnSetRoute.Text = "Set Route....";
+            this.btnSetRoute.Click += new System.EventHandler(this.btnSetRoute_Click);
+            // 
+            // lblType
+            // 
+            this.lblType.AutoSize = true;
+            this.lblType.Location = new System.Drawing.Point(6, 22);
+            this.lblType.Name = "lblType";
+            this.lblType.Size = new System.Drawing.Size(34, 13);
+            this.lblType.TabIndex = 1;
+            this.lblType.Text = "Type:";
+            // 
+            // cmbMoveType
+            // 
+            this.cmbMoveType.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbMoveType.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbMoveType.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbMoveType.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbMoveType.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbMoveType.ButtonIcon")));
+            this.cmbMoveType.DrawDropdownHoverOutline = false;
+            this.cmbMoveType.DrawFocusRectangle = false;
+            this.cmbMoveType.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbMoveType.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbMoveType.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbMoveType.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbMoveType.FormattingEnabled = true;
+            this.cmbMoveType.Items.AddRange(new object[] {
             "None",
             "Random",
             "Move Route"});
-      this.cmbMoveType.Location = new System.Drawing.Point(48, 19);
-      this.cmbMoveType.Name = "cmbMoveType";
-      this.cmbMoveType.Size = new System.Drawing.Size(100, 21);
-      this.cmbMoveType.TabIndex = 0;
-      this.cmbMoveType.Text = "None";
-      this.cmbMoveType.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbMoveType.SelectedIndexChanged += new System.EventHandler(this.cmbMoveType_SelectedIndexChanged);
-      // 
-      // grpTriggers
-      // 
-      this.grpTriggers.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpTriggers.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpTriggers.Controls.Add(this.txtCommand);
-      this.grpTriggers.Controls.Add(this.lblCommand);
-      this.grpTriggers.Controls.Add(this.lblTriggerVal);
-      this.grpTriggers.Controls.Add(this.cmbTriggerVal);
-      this.grpTriggers.Controls.Add(this.cmbTrigger);
-      this.grpTriggers.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpTriggers.Location = new System.Drawing.Point(25, 517);
-      this.grpTriggers.Name = "grpTriggers";
-      this.grpTriggers.Size = new System.Drawing.Size(317, 44);
-      this.grpTriggers.TabIndex = 21;
-      this.grpTriggers.TabStop = false;
-      this.grpTriggers.Text = "Trigger";
-      // 
-      // txtCommand
-      // 
-      this.txtCommand.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.txtCommand.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.txtCommand.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
-      this.txtCommand.Location = new System.Drawing.Point(181, 13);
-      this.txtCommand.Name = "txtCommand";
-      this.txtCommand.Size = new System.Drawing.Size(130, 20);
-      this.txtCommand.TabIndex = 12;
-      this.txtCommand.Visible = false;
-      this.txtCommand.TextChanged += new System.EventHandler(this.txtCommand_TextChanged);
-      // 
-      // lblCommand
-      // 
-      this.lblCommand.AutoSize = true;
-      this.lblCommand.Location = new System.Drawing.Point(113, 17);
-      this.lblCommand.Name = "lblCommand";
-      this.lblCommand.Size = new System.Drawing.Size(70, 13);
-      this.lblCommand.TabIndex = 11;
-      this.lblCommand.Text = "/Command: /";
-      this.lblCommand.Visible = false;
-      // 
-      // lblTriggerVal
-      // 
-      this.lblTriggerVal.AutoSize = true;
-      this.lblTriggerVal.Location = new System.Drawing.Point(113, 17);
-      this.lblTriggerVal.Name = "lblTriggerVal";
-      this.lblTriggerVal.Size = new System.Drawing.Size(53, 13);
-      this.lblTriggerVal.TabIndex = 10;
-      this.lblTriggerVal.Text = "Projectile:";
-      this.lblTriggerVal.Visible = false;
-      // 
-      // cmbTriggerVal
-      // 
-      this.cmbTriggerVal.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbTriggerVal.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbTriggerVal.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbTriggerVal.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbTriggerVal.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTriggerVal.ButtonIcon")));
-      this.cmbTriggerVal.DrawDropdownHoverOutline = false;
-      this.cmbTriggerVal.DrawFocusRectangle = false;
-      this.cmbTriggerVal.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbTriggerVal.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbTriggerVal.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbTriggerVal.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbTriggerVal.FormattingEnabled = true;
-      this.cmbTriggerVal.Items.AddRange(new object[] {
+            this.cmbMoveType.Location = new System.Drawing.Point(48, 19);
+            this.cmbMoveType.Name = "cmbMoveType";
+            this.cmbMoveType.Size = new System.Drawing.Size(100, 21);
+            this.cmbMoveType.TabIndex = 0;
+            this.cmbMoveType.Text = "None";
+            this.cmbMoveType.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbMoveType.SelectedIndexChanged += new System.EventHandler(this.cmbMoveType_SelectedIndexChanged);
+            // 
+            // grpTriggers
+            // 
+            this.grpTriggers.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpTriggers.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpTriggers.Controls.Add(this.txtCommand);
+            this.grpTriggers.Controls.Add(this.lblCommand);
+            this.grpTriggers.Controls.Add(this.lblTriggerVal);
+            this.grpTriggers.Controls.Add(this.cmbTriggerVal);
+            this.grpTriggers.Controls.Add(this.cmbTrigger);
+            this.grpTriggers.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpTriggers.Location = new System.Drawing.Point(25, 517);
+            this.grpTriggers.Name = "grpTriggers";
+            this.grpTriggers.Size = new System.Drawing.Size(317, 44);
+            this.grpTriggers.TabIndex = 21;
+            this.grpTriggers.TabStop = false;
+            this.grpTriggers.Text = "Trigger";
+            // 
+            // txtCommand
+            // 
+            this.txtCommand.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.txtCommand.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.txtCommand.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.txtCommand.Location = new System.Drawing.Point(181, 13);
+            this.txtCommand.Name = "txtCommand";
+            this.txtCommand.Size = new System.Drawing.Size(130, 20);
+            this.txtCommand.TabIndex = 12;
+            this.txtCommand.Visible = false;
+            this.txtCommand.TextChanged += new System.EventHandler(this.txtCommand_TextChanged);
+            // 
+            // lblCommand
+            // 
+            this.lblCommand.AutoSize = true;
+            this.lblCommand.Location = new System.Drawing.Point(113, 17);
+            this.lblCommand.Name = "lblCommand";
+            this.lblCommand.Size = new System.Drawing.Size(70, 13);
+            this.lblCommand.TabIndex = 11;
+            this.lblCommand.Text = "/Command: /";
+            this.lblCommand.Visible = false;
+            // 
+            // lblTriggerVal
+            // 
+            this.lblTriggerVal.AutoSize = true;
+            this.lblTriggerVal.Location = new System.Drawing.Point(113, 17);
+            this.lblTriggerVal.Name = "lblTriggerVal";
+            this.lblTriggerVal.Size = new System.Drawing.Size(53, 13);
+            this.lblTriggerVal.TabIndex = 10;
+            this.lblTriggerVal.Text = "Projectile:";
+            this.lblTriggerVal.Visible = false;
+            // 
+            // cmbTriggerVal
+            // 
+            this.cmbTriggerVal.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbTriggerVal.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbTriggerVal.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbTriggerVal.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbTriggerVal.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTriggerVal.ButtonIcon")));
+            this.cmbTriggerVal.DrawDropdownHoverOutline = false;
+            this.cmbTriggerVal.DrawFocusRectangle = false;
+            this.cmbTriggerVal.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbTriggerVal.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbTriggerVal.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbTriggerVal.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbTriggerVal.FormattingEnabled = true;
+            this.cmbTriggerVal.Items.AddRange(new object[] {
             "None"});
-      this.cmbTriggerVal.Location = new System.Drawing.Point(181, 13);
-      this.cmbTriggerVal.Name = "cmbTriggerVal";
-      this.cmbTriggerVal.Size = new System.Drawing.Size(130, 21);
-      this.cmbTriggerVal.TabIndex = 9;
-      this.cmbTriggerVal.Text = "None";
-      this.cmbTriggerVal.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbTriggerVal.Visible = false;
-      // 
-      // cmbTrigger
-      // 
-      this.cmbTrigger.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
-      this.cmbTrigger.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.cmbTrigger.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
-      this.cmbTrigger.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
-      this.cmbTrigger.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTrigger.ButtonIcon")));
-      this.cmbTrigger.DrawDropdownHoverOutline = false;
-      this.cmbTrigger.DrawFocusRectangle = false;
-      this.cmbTrigger.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
-      this.cmbTrigger.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
-      this.cmbTrigger.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
-      this.cmbTrigger.ForeColor = System.Drawing.Color.Gainsboro;
-      this.cmbTrigger.FormattingEnabled = true;
-      this.cmbTrigger.Items.AddRange(new object[] {
+            this.cmbTriggerVal.Location = new System.Drawing.Point(181, 13);
+            this.cmbTriggerVal.Name = "cmbTriggerVal";
+            this.cmbTriggerVal.Size = new System.Drawing.Size(130, 21);
+            this.cmbTriggerVal.TabIndex = 9;
+            this.cmbTriggerVal.Text = "None";
+            this.cmbTriggerVal.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbTriggerVal.Visible = false;
+            // 
+            // cmbTrigger
+            // 
+            this.cmbTrigger.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.cmbTrigger.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.cmbTrigger.BorderStyle = System.Windows.Forms.ButtonBorderStyle.Solid;
+            this.cmbTrigger.ButtonColor = System.Drawing.Color.FromArgb(((int)(((byte)(43)))), ((int)(((byte)(43)))), ((int)(((byte)(43)))));
+            this.cmbTrigger.ButtonIcon = ((System.Drawing.Bitmap)(resources.GetObject("cmbTrigger.ButtonIcon")));
+            this.cmbTrigger.DrawDropdownHoverOutline = false;
+            this.cmbTrigger.DrawFocusRectangle = false;
+            this.cmbTrigger.DrawMode = System.Windows.Forms.DrawMode.OwnerDrawFixed;
+            this.cmbTrigger.DropDownStyle = System.Windows.Forms.ComboBoxStyle.DropDownList;
+            this.cmbTrigger.FlatStyle = System.Windows.Forms.FlatStyle.Flat;
+            this.cmbTrigger.ForeColor = System.Drawing.Color.Gainsboro;
+            this.cmbTrigger.FormattingEnabled = true;
+            this.cmbTrigger.Items.AddRange(new object[] {
             "Action Button",
             "Player Touch",
             "Autorun",
             "Projectile Hit"});
-      this.cmbTrigger.Location = new System.Drawing.Point(6, 13);
-      this.cmbTrigger.Name = "cmbTrigger";
-      this.cmbTrigger.Size = new System.Drawing.Size(101, 21);
-      this.cmbTrigger.TabIndex = 2;
-      this.cmbTrigger.Text = "Action Button";
-      this.cmbTrigger.TextPadding = new System.Windows.Forms.Padding(2);
-      this.cmbTrigger.SelectedIndexChanged += new System.EventHandler(this.cmbTrigger_SelectedIndexChanged);
-      // 
-      // grpEventConditions
-      // 
-      this.grpEventConditions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpEventConditions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpEventConditions.Controls.Add(this.btnEditConditions);
-      this.grpEventConditions.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpEventConditions.Location = new System.Drawing.Point(21, 89);
-      this.grpEventConditions.Name = "grpEventConditions";
-      this.grpEventConditions.Size = new System.Drawing.Size(326, 55);
-      this.grpEventConditions.TabIndex = 5;
-      this.grpEventConditions.TabStop = false;
-      this.grpEventConditions.Text = "Conditions";
-      // 
-      // btnEditConditions
-      // 
-      this.btnEditConditions.Location = new System.Drawing.Point(7, 20);
-      this.btnEditConditions.Name = "btnEditConditions";
-      this.btnEditConditions.Padding = new System.Windows.Forms.Padding(5);
-      this.btnEditConditions.Size = new System.Drawing.Size(304, 23);
-      this.btnEditConditions.TabIndex = 0;
-      this.btnEditConditions.Text = "Spawn/Execution Conditions";
-      this.btnEditConditions.Click += new System.EventHandler(this.btnEditConditions_Click);
-      // 
-      // grpNewCommands
-      // 
-      this.grpNewCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpNewCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpNewCommands.Controls.Add(this.lblCloseCommands);
-      this.grpNewCommands.Controls.Add(this.lstCommands);
-      this.grpNewCommands.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpNewCommands.Location = new System.Drawing.Point(353, 89);
-      this.grpNewCommands.Name = "grpNewCommands";
-      this.grpNewCommands.Size = new System.Drawing.Size(457, 484);
-      this.grpNewCommands.TabIndex = 7;
-      this.grpNewCommands.TabStop = false;
-      this.grpNewCommands.Text = "Add Commands";
-      this.grpNewCommands.Visible = false;
-      // 
-      // lblCloseCommands
-      // 
-      this.lblCloseCommands.AutoSize = true;
-      this.lblCloseCommands.Location = new System.Drawing.Point(437, 14);
-      this.lblCloseCommands.Name = "lblCloseCommands";
-      this.lblCloseCommands.Size = new System.Drawing.Size(14, 13);
-      this.lblCloseCommands.TabIndex = 1;
-      this.lblCloseCommands.Text = "X";
-      this.lblCloseCommands.Click += new System.EventHandler(this.lblCloseCommands_Click);
-      // 
-      // lstCommands
-      // 
-      this.lstCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
-      this.lstCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.lstCommands.ForeColor = System.Drawing.Color.Gainsboro;
-      this.lstCommands.LineColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(150)))));
-      this.lstCommands.Location = new System.Drawing.Point(6, 32);
-      this.lstCommands.Name = "lstCommands";
-      treeNode1.Name = "showtext";
-      treeNode1.Tag = "1";
-      treeNode1.Text = "Show Text";
-      treeNode2.Name = "showoptions";
-      treeNode2.Tag = "2";
-      treeNode2.Text = "Show Options";
-      treeNode3.Name = "inputvariable";
-      treeNode3.Tag = "49";
-      treeNode3.Text = "Input Variable";
-      treeNode4.Name = "addchatboxtext";
-      treeNode4.Tag = "3";
-      treeNode4.Text = "Add Chatbox Text";
-      treeNode5.Name = "dialogue";
-      treeNode5.Text = "Dialogue";
-      treeNode6.Name = "setvariable";
-      treeNode6.Tag = "5";
-      treeNode6.Text = "Set Variable";
-      treeNode7.Name = "setselfswitch";
-      treeNode7.Tag = "6";
-      treeNode7.Text = "Set Self Switch";
-      treeNode8.Name = "conditionalbranch";
-      treeNode8.Tag = "7";
-      treeNode8.Text = "Conditional Branch";
-      treeNode9.Name = "exiteventprocess";
-      treeNode9.Tag = "8";
-      treeNode9.Text = "Exit Event Process";
-      treeNode10.Name = "label";
-      treeNode10.Tag = "9";
-      treeNode10.Text = "Label";
-      treeNode11.Name = "gotolabel";
-      treeNode11.Tag = "10";
-      treeNode11.Text = "Go To Label";
-      treeNode12.Name = "startcommonevent";
-      treeNode12.Tag = "11";
-      treeNode12.Text = "Start Common Event";
-      treeNode13.Name = "logicflow";
-      treeNode13.Text = "Logic Flow";
-      treeNode14.Name = "restorehp";
-      treeNode14.Tag = "12";
-      treeNode14.Text = "Restore HP";
-      treeNode15.Name = "restoremp";
-      treeNode15.Tag = "13";
-      treeNode15.Text = "Restore MP";
-      treeNode16.Name = "levelup";
-      treeNode16.Tag = "14";
-      treeNode16.Text = "Level Up";
-      treeNode17.Name = "giveexperience";
-      treeNode17.Tag = "15";
-      treeNode17.Text = "Give Experience";
-      treeNode18.Name = "changelevel";
-      treeNode18.Tag = "16";
-      treeNode18.Text = "Change Level";
-      treeNode19.Name = "changespells";
-      treeNode19.Tag = "17";
-      treeNode19.Text = "Change Spells";
-      treeNode20.Name = "changeitems";
-      treeNode20.Tag = "18";
-      treeNode20.Text = "Change Items";
-      treeNode21.Name = "changesprite";
-      treeNode21.Tag = "19";
-      treeNode21.Text = "Change Sprite";
-      treeNode22.Name = "changeface";
-      treeNode22.Tag = "20";
-      treeNode22.Text = "Change Face";
-      treeNode23.Name = "changegender";
-      treeNode23.Tag = "21";
-      treeNode23.Text = "Change Gender";
-      treeNode24.Name = "setaccess";
-      treeNode24.Tag = "22";
-      treeNode24.Text = "Set Access";
-      treeNode25.Name = "changeclass";
-      treeNode25.Tag = "38";
-      treeNode25.Text = "Change Class";
-      treeNode26.Name = "equipitem";
-      treeNode26.Tag = "47";
-      treeNode26.Text = "Equip Item";
-      treeNode27.Name = "changenamecolor";
-      treeNode27.Tag = "48";
-      treeNode27.Text = "Change Name Color";
-      treeNode28.Name = "changeplayerlabel";
-      treeNode28.Tag = "50";
-      treeNode28.Text = "Change Player Label";
-      treeNode29.Name = "playercontrol";
-      treeNode29.Text = "Player Control";
-      treeNode30.Name = "warpplayer";
-      treeNode30.Tag = "23";
-      treeNode30.Text = "Warp Player";
-      treeNode31.Name = "setmoveroute";
-      treeNode31.Tag = "24";
-      treeNode31.Text = "Set Move Route";
-      treeNode32.Name = "waitmoveroute";
-      treeNode32.Tag = "25";
-      treeNode32.Text = "Wait for Route Completion";
-      treeNode33.Name = "holdplayer";
-      treeNode33.Tag = "26";
-      treeNode33.Text = "Hold Player";
-      treeNode34.Name = "releaseplayer";
-      treeNode34.Tag = "27";
-      treeNode34.Text = "Release Player";
-      treeNode35.Name = "spawnnpc";
-      treeNode35.Tag = "28";
-      treeNode35.Text = "Spawn NPC";
-      treeNode36.Name = "despawnnpcs";
-      treeNode36.Tag = "39";
-      treeNode36.Text = "Despawn NPC";
-      treeNode37.Name = "hideplayer";
-      treeNode37.Tag = "45";
-      treeNode37.Text = "Hide Player";
-      treeNode38.Name = "showplayer";
-      treeNode38.Tag = "46";
-      treeNode38.Text = "Show Player";
-      treeNode39.Name = "movement";
-      treeNode39.Text = "Movement";
-      treeNode40.Name = "playanimation";
-      treeNode40.Tag = "29";
-      treeNode40.Text = "Play Animation";
-      treeNode41.Name = "playbgm";
-      treeNode41.Tag = "30";
-      treeNode41.Text = "Play BGM";
-      treeNode42.Name = "fadeoutbgm";
-      treeNode42.Tag = "31";
-      treeNode42.Text = "Fadeout BGM";
-      treeNode43.Name = "playsound";
-      treeNode43.Tag = "32";
-      treeNode43.Text = "Play Sound";
-      treeNode44.Name = "stopsounds";
-      treeNode44.Tag = "33";
-      treeNode44.Text = "Stop Sounds";
-      treeNode45.Name = "showpicture";
-      treeNode45.Tag = "43";
-      treeNode45.Text = "Show Picture";
-      treeNode46.Name = "hidepicture";
-      treeNode46.Tag = "44";
-      treeNode46.Text = "Hide Picture";
-      treeNode47.Name = "specialeffects";
-      treeNode47.Text = "Special Effects";
-      treeNode48.Name = "startquest";
-      treeNode48.Tag = "40";
-      treeNode48.Text = "Start Quest";
-      treeNode49.Name = "completequesttask";
-      treeNode49.Tag = "41";
-      treeNode49.Text = "Complete Quest Task";
-      treeNode50.Name = "endquest";
-      treeNode50.Tag = "42";
-      treeNode50.Text = "End Quest";
-      treeNode51.Name = "questcontrol";
-      treeNode51.Text = "Quest Control";
-      treeNode52.Name = "wait";
-      treeNode52.Tag = "34";
-      treeNode52.Text = "Wait...";
-      treeNode53.Name = "etc";
-      treeNode53.Text = "Etc";
-      treeNode54.Name = "openbank";
-      treeNode54.Tag = "35";
-      treeNode54.Text = "Open Bank";
-      treeNode55.Name = "openshop";
-      treeNode55.Tag = "36";
-      treeNode55.Text = "Open Shop";
-      treeNode56.Name = "opencraftingstation";
-      treeNode56.Tag = "37";
-      treeNode56.Text = "Open Crafting Station";
-      treeNode57.Name = "shopandbank";
-      treeNode57.Text = "Shop and Bank";
-      this.lstCommands.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {
+            this.cmbTrigger.Location = new System.Drawing.Point(6, 13);
+            this.cmbTrigger.Name = "cmbTrigger";
+            this.cmbTrigger.Size = new System.Drawing.Size(101, 21);
+            this.cmbTrigger.TabIndex = 2;
+            this.cmbTrigger.Text = "Action Button";
+            this.cmbTrigger.TextPadding = new System.Windows.Forms.Padding(2);
+            this.cmbTrigger.SelectedIndexChanged += new System.EventHandler(this.cmbTrigger_SelectedIndexChanged);
+            // 
+            // grpEventConditions
+            // 
+            this.grpEventConditions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpEventConditions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpEventConditions.Controls.Add(this.btnEditConditions);
+            this.grpEventConditions.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpEventConditions.Location = new System.Drawing.Point(21, 89);
+            this.grpEventConditions.Name = "grpEventConditions";
+            this.grpEventConditions.Size = new System.Drawing.Size(326, 55);
+            this.grpEventConditions.TabIndex = 5;
+            this.grpEventConditions.TabStop = false;
+            this.grpEventConditions.Text = "Conditions";
+            // 
+            // btnEditConditions
+            // 
+            this.btnEditConditions.Location = new System.Drawing.Point(7, 20);
+            this.btnEditConditions.Name = "btnEditConditions";
+            this.btnEditConditions.Padding = new System.Windows.Forms.Padding(5);
+            this.btnEditConditions.Size = new System.Drawing.Size(304, 23);
+            this.btnEditConditions.TabIndex = 0;
+            this.btnEditConditions.Text = "Spawn/Execution Conditions";
+            this.btnEditConditions.Click += new System.EventHandler(this.btnEditConditions_Click);
+            // 
+            // grpNewCommands
+            // 
+            this.grpNewCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpNewCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpNewCommands.Controls.Add(this.lblCloseCommands);
+            this.grpNewCommands.Controls.Add(this.lstCommands);
+            this.grpNewCommands.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpNewCommands.Location = new System.Drawing.Point(353, 89);
+            this.grpNewCommands.Name = "grpNewCommands";
+            this.grpNewCommands.Size = new System.Drawing.Size(457, 484);
+            this.grpNewCommands.TabIndex = 7;
+            this.grpNewCommands.TabStop = false;
+            this.grpNewCommands.Text = "Add Commands";
+            this.grpNewCommands.Visible = false;
+            // 
+            // lblCloseCommands
+            // 
+            this.lblCloseCommands.AutoSize = true;
+            this.lblCloseCommands.Location = new System.Drawing.Point(437, 14);
+            this.lblCloseCommands.Name = "lblCloseCommands";
+            this.lblCloseCommands.Size = new System.Drawing.Size(14, 13);
+            this.lblCloseCommands.TabIndex = 1;
+            this.lblCloseCommands.Text = "X";
+            this.lblCloseCommands.Click += new System.EventHandler(this.lblCloseCommands_Click);
+            // 
+            // lstCommands
+            // 
+            this.lstCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.lstCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.lstCommands.ForeColor = System.Drawing.Color.Gainsboro;
+            this.lstCommands.LineColor = System.Drawing.Color.FromArgb(((int)(((byte)(150)))), ((int)(((byte)(150)))), ((int)(((byte)(150)))));
+            this.lstCommands.Location = new System.Drawing.Point(6, 32);
+            this.lstCommands.Name = "lstCommands";
+            treeNode1.Name = "showtext";
+            treeNode1.Tag = "1";
+            treeNode1.Text = "Show Text";
+            treeNode2.Name = "showoptions";
+            treeNode2.Tag = "2";
+            treeNode2.Text = "Show Options";
+            treeNode3.Name = "inputvariable";
+            treeNode3.Tag = "49";
+            treeNode3.Text = "Input Variable";
+            treeNode4.Name = "addchatboxtext";
+            treeNode4.Tag = "3";
+            treeNode4.Text = "Add Chatbox Text";
+            treeNode5.Name = "dialogue";
+            treeNode5.Text = "Dialogue";
+            treeNode6.Name = "setvariable";
+            treeNode6.Tag = "5";
+            treeNode6.Text = "Set Variable";
+            treeNode7.Name = "setselfswitch";
+            treeNode7.Tag = "6";
+            treeNode7.Text = "Set Self Switch";
+            treeNode8.Name = "conditionalbranch";
+            treeNode8.Tag = "7";
+            treeNode8.Text = "Conditional Branch";
+            treeNode9.Name = "exiteventprocess";
+            treeNode9.Tag = "8";
+            treeNode9.Text = "Exit Event Process";
+            treeNode10.Name = "label";
+            treeNode10.Tag = "9";
+            treeNode10.Text = "Label";
+            treeNode11.Name = "gotolabel";
+            treeNode11.Tag = "10";
+            treeNode11.Text = "Go To Label";
+            treeNode12.Name = "startcommonevent";
+            treeNode12.Tag = "11";
+            treeNode12.Text = "Start Common Event";
+            treeNode13.Name = "logicflow";
+            treeNode13.Text = "Logic Flow";
+            treeNode14.Name = "restorehp";
+            treeNode14.Tag = "12";
+            treeNode14.Text = "Restore HP";
+            treeNode15.Name = "restoremp";
+            treeNode15.Tag = "13";
+            treeNode15.Text = "Restore MP";
+            treeNode16.Name = "levelup";
+            treeNode16.Tag = "14";
+            treeNode16.Text = "Level Up";
+            treeNode17.Name = "giveexperience";
+            treeNode17.Tag = "15";
+            treeNode17.Text = "Give Experience";
+            treeNode18.Name = "changelevel";
+            treeNode18.Tag = "16";
+            treeNode18.Text = "Change Level";
+            treeNode19.Name = "changespells";
+            treeNode19.Tag = "17";
+            treeNode19.Text = "Change Spells";
+            treeNode20.Name = "changeitems";
+            treeNode20.Tag = "18";
+            treeNode20.Text = "Change Items";
+            treeNode21.Name = "changeitemsbytag";
+            treeNode21.Tag = "51";
+            treeNode21.Text = "Change Items By Tag";
+            treeNode22.Name = "changesprite";
+            treeNode22.Tag = "19";
+            treeNode22.Text = "Change Sprite";
+            treeNode23.Name = "changeface";
+            treeNode23.Tag = "20";
+            treeNode23.Text = "Change Face";
+            treeNode24.Name = "changegender";
+            treeNode24.Tag = "21";
+            treeNode24.Text = "Change Gender";
+            treeNode25.Name = "setaccess";
+            treeNode25.Tag = "22";
+            treeNode25.Text = "Set Access";
+            treeNode26.Name = "changeclass";
+            treeNode26.Tag = "38";
+            treeNode26.Text = "Change Class";
+            treeNode27.Name = "equipitem";
+            treeNode27.Tag = "47";
+            treeNode27.Text = "Equip Item";
+            treeNode28.Name = "changenamecolor";
+            treeNode28.Tag = "48";
+            treeNode28.Text = "Change Name Color";
+            treeNode29.Name = "changeplayerlabel";
+            treeNode29.Tag = "50";
+            treeNode29.Text = "Change Player Label";
+            treeNode30.Name = "playercontrol";
+            treeNode30.Text = "Player Control";
+            treeNode31.Name = "warpplayer";
+            treeNode31.Tag = "23";
+            treeNode31.Text = "Warp Player";
+            treeNode32.Name = "setmoveroute";
+            treeNode32.Tag = "24";
+            treeNode32.Text = "Set Move Route";
+            treeNode33.Name = "waitmoveroute";
+            treeNode33.Tag = "25";
+            treeNode33.Text = "Wait for Route Completion";
+            treeNode34.Name = "holdplayer";
+            treeNode34.Tag = "26";
+            treeNode34.Text = "Hold Player";
+            treeNode35.Name = "releaseplayer";
+            treeNode35.Tag = "27";
+            treeNode35.Text = "Release Player";
+            treeNode36.Name = "spawnnpc";
+            treeNode36.Tag = "28";
+            treeNode36.Text = "Spawn NPC";
+            treeNode37.Name = "despawnnpcs";
+            treeNode37.Tag = "39";
+            treeNode37.Text = "Despawn NPC";
+            treeNode38.Name = "hideplayer";
+            treeNode38.Tag = "45";
+            treeNode38.Text = "Hide Player";
+            treeNode39.Name = "showplayer";
+            treeNode39.Tag = "46";
+            treeNode39.Text = "Show Player";
+            treeNode40.Name = "movement";
+            treeNode40.Text = "Movement";
+            treeNode41.Name = "playanimation";
+            treeNode41.Tag = "29";
+            treeNode41.Text = "Play Animation";
+            treeNode42.Name = "playbgm";
+            treeNode42.Tag = "30";
+            treeNode42.Text = "Play BGM";
+            treeNode43.Name = "fadeoutbgm";
+            treeNode43.Tag = "31";
+            treeNode43.Text = "Fadeout BGM";
+            treeNode44.Name = "playsound";
+            treeNode44.Tag = "32";
+            treeNode44.Text = "Play Sound";
+            treeNode45.Name = "stopsounds";
+            treeNode45.Tag = "33";
+            treeNode45.Text = "Stop Sounds";
+            treeNode46.Name = "showpicture";
+            treeNode46.Tag = "43";
+            treeNode46.Text = "Show Picture";
+            treeNode47.Name = "hidepicture";
+            treeNode47.Tag = "44";
+            treeNode47.Text = "Hide Picture";
+            treeNode48.Name = "specialeffects";
+            treeNode48.Text = "Special Effects";
+            treeNode49.Name = "startquest";
+            treeNode49.Tag = "40";
+            treeNode49.Text = "Start Quest";
+            treeNode50.Name = "completequesttask";
+            treeNode50.Tag = "41";
+            treeNode50.Text = "Complete Quest Task";
+            treeNode51.Name = "endquest";
+            treeNode51.Tag = "42";
+            treeNode51.Text = "End Quest";
+            treeNode52.Name = "questcontrol";
+            treeNode52.Text = "Quest Control";
+            treeNode53.Name = "wait";
+            treeNode53.Tag = "34";
+            treeNode53.Text = "Wait...";
+            treeNode54.Name = "etc";
+            treeNode54.Text = "Etc";
+            treeNode55.Name = "openbank";
+            treeNode55.Tag = "35";
+            treeNode55.Text = "Open Bank";
+            treeNode56.Name = "openshop";
+            treeNode56.Tag = "36";
+            treeNode56.Text = "Open Shop";
+            treeNode57.Name = "opencraftingstation";
+            treeNode57.Tag = "37";
+            treeNode57.Text = "Open Crafting Station";
+            treeNode58.Name = "shopandbank";
+            treeNode58.Text = "Shop and Bank";
+            this.lstCommands.Nodes.AddRange(new System.Windows.Forms.TreeNode[] {
             treeNode5,
             treeNode13,
-            treeNode29,
-            treeNode39,
-            treeNode47,
-            treeNode51,
-            treeNode53,
-            treeNode57});
-      this.lstCommands.Size = new System.Drawing.Size(445, 440);
-      this.lstCommands.TabIndex = 2;
-      this.lstCommands.NodeMouseDoubleClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.lstCommands_NodeMouseDoubleClick);
-      // 
-      // grpEventCommands
-      // 
-      this.grpEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpEventCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpEventCommands.Controls.Add(this.lstEventCommands);
-      this.grpEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpEventCommands.Location = new System.Drawing.Point(353, 89);
-      this.grpEventCommands.Name = "grpEventCommands";
-      this.grpEventCommands.Size = new System.Drawing.Size(457, 484);
-      this.grpEventCommands.TabIndex = 6;
-      this.grpEventCommands.TabStop = false;
-      this.grpEventCommands.Text = "Commands";
-      // 
-      // lstEventCommands
-      // 
-      this.lstEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
-      this.lstEventCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.lstEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
-      this.lstEventCommands.FormattingEnabled = true;
-      this.lstEventCommands.HorizontalScrollbar = true;
-      this.lstEventCommands.Items.AddRange(new object[] {
+            treeNode30,
+            treeNode40,
+            treeNode48,
+            treeNode52,
+            treeNode54,
+            treeNode58});
+            this.lstCommands.Size = new System.Drawing.Size(445, 440);
+            this.lstCommands.TabIndex = 2;
+            this.lstCommands.NodeMouseDoubleClick += new System.Windows.Forms.TreeNodeMouseClickEventHandler(this.lstCommands_NodeMouseDoubleClick);
+            // 
+            // grpEventCommands
+            // 
+            this.grpEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpEventCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpEventCommands.Controls.Add(this.lstEventCommands);
+            this.grpEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpEventCommands.Location = new System.Drawing.Point(353, 89);
+            this.grpEventCommands.Name = "grpEventCommands";
+            this.grpEventCommands.Size = new System.Drawing.Size(457, 484);
+            this.grpEventCommands.TabIndex = 6;
+            this.grpEventCommands.TabStop = false;
+            this.grpEventCommands.Text = "Commands";
+            // 
+            // lstEventCommands
+            // 
+            this.lstEventCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.lstEventCommands.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.lstEventCommands.ForeColor = System.Drawing.Color.Gainsboro;
+            this.lstEventCommands.FormattingEnabled = true;
+            this.lstEventCommands.HorizontalScrollbar = true;
+            this.lstEventCommands.Items.AddRange(new object[] {
             "@>"});
-      this.lstEventCommands.Location = new System.Drawing.Point(6, 19);
-      this.lstEventCommands.Name = "lstEventCommands";
-      this.lstEventCommands.Size = new System.Drawing.Size(445, 457);
-      this.lstEventCommands.TabIndex = 0;
-      this.lstEventCommands.SelectedIndexChanged += new System.EventHandler(this.lstEventCommands_SelectedIndexChanged);
-      this.lstEventCommands.DoubleClick += new System.EventHandler(this.lstEventCommands_DoubleClick);
-      this.lstEventCommands.KeyDown += new System.Windows.Forms.KeyEventHandler(this.lstEventCommands_KeyDown);
-      this.lstEventCommands.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lstEventCommands_Click);
-      // 
-      // grpCreateCommands
-      // 
-      this.grpCreateCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpCreateCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpCreateCommands.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpCreateCommands.Location = new System.Drawing.Point(353, 89);
-      this.grpCreateCommands.Name = "grpCreateCommands";
-      this.grpCreateCommands.Size = new System.Drawing.Size(457, 484);
-      this.grpCreateCommands.TabIndex = 8;
-      this.grpCreateCommands.TabStop = false;
-      this.grpCreateCommands.Visible = false;
-      // 
-      // btnSave
-      // 
-      this.btnSave.Location = new System.Drawing.Point(628, 586);
-      this.btnSave.Name = "btnSave";
-      this.btnSave.Padding = new System.Windows.Forms.Padding(5);
-      this.btnSave.Size = new System.Drawing.Size(93, 30);
-      this.btnSave.TabIndex = 6;
-      this.btnSave.Text = "Save";
-      this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
-      // 
-      // btnCancel
-      // 
-      this.btnCancel.Location = new System.Drawing.Point(727, 586);
-      this.btnCancel.Name = "btnCancel";
-      this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
-      this.btnCancel.Size = new System.Drawing.Size(93, 30);
-      this.btnCancel.TabIndex = 7;
-      this.btnCancel.Text = "Cancel";
-      this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
-      // 
-      // commandMenu
-      // 
-      this.commandMenu.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
-      this.commandMenu.ImageScalingSize = new System.Drawing.Size(24, 24);
-      this.commandMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
+            this.lstEventCommands.Location = new System.Drawing.Point(6, 19);
+            this.lstEventCommands.Name = "lstEventCommands";
+            this.lstEventCommands.Size = new System.Drawing.Size(445, 457);
+            this.lstEventCommands.TabIndex = 0;
+            this.lstEventCommands.SelectedIndexChanged += new System.EventHandler(this.lstEventCommands_SelectedIndexChanged);
+            this.lstEventCommands.DoubleClick += new System.EventHandler(this.lstEventCommands_DoubleClick);
+            this.lstEventCommands.KeyDown += new System.Windows.Forms.KeyEventHandler(this.lstEventCommands_KeyDown);
+            this.lstEventCommands.MouseDown += new System.Windows.Forms.MouseEventHandler(this.lstEventCommands_Click);
+            // 
+            // grpCreateCommands
+            // 
+            this.grpCreateCommands.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpCreateCommands.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpCreateCommands.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpCreateCommands.Location = new System.Drawing.Point(353, 89);
+            this.grpCreateCommands.Name = "grpCreateCommands";
+            this.grpCreateCommands.Size = new System.Drawing.Size(457, 484);
+            this.grpCreateCommands.TabIndex = 8;
+            this.grpCreateCommands.TabStop = false;
+            this.grpCreateCommands.Visible = false;
+            // 
+            // btnSave
+            // 
+            this.btnSave.Location = new System.Drawing.Point(628, 586);
+            this.btnSave.Name = "btnSave";
+            this.btnSave.Padding = new System.Windows.Forms.Padding(5);
+            this.btnSave.Size = new System.Drawing.Size(93, 30);
+            this.btnSave.TabIndex = 6;
+            this.btnSave.Text = "Save";
+            this.btnSave.Click += new System.EventHandler(this.btnSave_Click);
+            // 
+            // btnCancel
+            // 
+            this.btnCancel.Location = new System.Drawing.Point(727, 586);
+            this.btnCancel.Name = "btnCancel";
+            this.btnCancel.Padding = new System.Windows.Forms.Padding(5);
+            this.btnCancel.Size = new System.Drawing.Size(93, 30);
+            this.btnCancel.TabIndex = 7;
+            this.btnCancel.Text = "Cancel";
+            this.btnCancel.Click += new System.EventHandler(this.btnCancel_Click);
+            // 
+            // commandMenu
+            // 
+            this.commandMenu.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(60)))), ((int)(((byte)(63)))), ((int)(((byte)(65)))));
+            this.commandMenu.ImageScalingSize = new System.Drawing.Size(24, 24);
+            this.commandMenu.Items.AddRange(new System.Windows.Forms.ToolStripItem[] {
             this.btnInsert,
             this.btnEdit,
             this.btnCut,
             this.btnCopy,
             this.btnPaste,
             this.btnDelete});
-      this.commandMenu.Name = "commandMenu";
-      this.commandMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
-      this.commandMenu.Size = new System.Drawing.Size(108, 136);
-      // 
-      // btnInsert
-      // 
-      this.btnInsert.ForeColor = System.Drawing.Color.Gainsboro;
-      this.btnInsert.Name = "btnInsert";
-      this.btnInsert.Size = new System.Drawing.Size(107, 22);
-      this.btnInsert.Text = "Insert";
-      this.btnInsert.Click += new System.EventHandler(this.btnInsert_Click);
-      // 
-      // btnEdit
-      // 
-      this.btnEdit.ForeColor = System.Drawing.Color.Gainsboro;
-      this.btnEdit.Name = "btnEdit";
-      this.btnEdit.Size = new System.Drawing.Size(107, 22);
-      this.btnEdit.Text = "Edit";
-      this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
-      // 
-      // btnCut
-      // 
-      this.btnCut.ForeColor = System.Drawing.Color.Gainsboro;
-      this.btnCut.Name = "btnCut";
-      this.btnCut.Size = new System.Drawing.Size(107, 22);
-      this.btnCut.Text = "Cut";
-      this.btnCut.Click += new System.EventHandler(this.btnCut_Click);
-      // 
-      // btnCopy
-      // 
-      this.btnCopy.ForeColor = System.Drawing.Color.Gainsboro;
-      this.btnCopy.Name = "btnCopy";
-      this.btnCopy.Size = new System.Drawing.Size(107, 22);
-      this.btnCopy.Text = "Copy";
-      this.btnCopy.Click += new System.EventHandler(this.btnCopy_Click);
-      // 
-      // btnPaste
-      // 
-      this.btnPaste.ForeColor = System.Drawing.Color.Gainsboro;
-      this.btnPaste.Name = "btnPaste";
-      this.btnPaste.Size = new System.Drawing.Size(107, 22);
-      this.btnPaste.Text = "Paste";
-      this.btnPaste.Click += new System.EventHandler(this.btnPaste_Click);
-      // 
-      // btnDelete
-      // 
-      this.btnDelete.ForeColor = System.Drawing.Color.Gainsboro;
-      this.btnDelete.Name = "btnDelete";
-      this.btnDelete.Size = new System.Drawing.Size(107, 22);
-      this.btnDelete.Text = "Delete";
-      this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
-      // 
-      // grpPageOptions
-      // 
-      this.grpPageOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpPageOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpPageOptions.Controls.Add(this.btnClearPage);
-      this.grpPageOptions.Controls.Add(this.btnDeletePage);
-      this.grpPageOptions.Controls.Add(this.btnPastePage);
-      this.grpPageOptions.Controls.Add(this.btnCopyPage);
-      this.grpPageOptions.Controls.Add(this.btnNewPage);
-      this.grpPageOptions.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpPageOptions.Location = new System.Drawing.Point(313, 5);
-      this.grpPageOptions.Name = "grpPageOptions";
-      this.grpPageOptions.Size = new System.Drawing.Size(510, 50);
-      this.grpPageOptions.TabIndex = 13;
-      this.grpPageOptions.TabStop = false;
-      this.grpPageOptions.Text = "Page Options";
-      // 
-      // btnClearPage
-      // 
-      this.btnClearPage.Location = new System.Drawing.Point(402, 16);
-      this.btnClearPage.Name = "btnClearPage";
-      this.btnClearPage.Padding = new System.Windows.Forms.Padding(5);
-      this.btnClearPage.Size = new System.Drawing.Size(93, 30);
-      this.btnClearPage.TabIndex = 17;
-      this.btnClearPage.Text = "Clear Page";
-      this.btnClearPage.Click += new System.EventHandler(this.btnClearPage_Click);
-      // 
-      // btnDeletePage
-      // 
-      this.btnDeletePage.Enabled = false;
-      this.btnDeletePage.Location = new System.Drawing.Point(303, 16);
-      this.btnDeletePage.Name = "btnDeletePage";
-      this.btnDeletePage.Padding = new System.Windows.Forms.Padding(5);
-      this.btnDeletePage.Size = new System.Drawing.Size(93, 30);
-      this.btnDeletePage.TabIndex = 16;
-      this.btnDeletePage.Text = "Delete Page";
-      this.btnDeletePage.Click += new System.EventHandler(this.btnDeletePage_Click);
-      // 
-      // btnPastePage
-      // 
-      this.btnPastePage.Location = new System.Drawing.Point(204, 16);
-      this.btnPastePage.Name = "btnPastePage";
-      this.btnPastePage.Padding = new System.Windows.Forms.Padding(5);
-      this.btnPastePage.Size = new System.Drawing.Size(93, 30);
-      this.btnPastePage.TabIndex = 15;
-      this.btnPastePage.Text = "Paste Page";
-      this.btnPastePage.Click += new System.EventHandler(this.btnPastePage_Click);
-      // 
-      // btnCopyPage
-      // 
-      this.btnCopyPage.Location = new System.Drawing.Point(105, 16);
-      this.btnCopyPage.Name = "btnCopyPage";
-      this.btnCopyPage.Padding = new System.Windows.Forms.Padding(5);
-      this.btnCopyPage.Size = new System.Drawing.Size(93, 30);
-      this.btnCopyPage.TabIndex = 14;
-      this.btnCopyPage.Text = "Copy Page";
-      this.btnCopyPage.Click += new System.EventHandler(this.btnCopyPage_Click);
-      // 
-      // btnNewPage
-      // 
-      this.btnNewPage.Location = new System.Drawing.Point(6, 16);
-      this.btnNewPage.Name = "btnNewPage";
-      this.btnNewPage.Padding = new System.Windows.Forms.Padding(5);
-      this.btnNewPage.Size = new System.Drawing.Size(93, 30);
-      this.btnNewPage.TabIndex = 13;
-      this.btnNewPage.Text = "New Page";
-      this.btnNewPage.Click += new System.EventHandler(this.btnNewPage_Click);
-      // 
-      // grpGeneral
-      // 
-      this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
-      this.grpGeneral.Controls.Add(this.chkIsGlobal);
-      this.grpGeneral.Controls.Add(this.lblName);
-      this.grpGeneral.Controls.Add(this.txtEventname);
-      this.grpGeneral.ForeColor = System.Drawing.Color.Gainsboro;
-      this.grpGeneral.Location = new System.Drawing.Point(12, 5);
-      this.grpGeneral.Name = "grpGeneral";
-      this.grpGeneral.Size = new System.Drawing.Size(295, 49);
-      this.grpGeneral.TabIndex = 18;
-      this.grpGeneral.TabStop = false;
-      this.grpGeneral.Text = "General";
-      // 
-      // chkIsGlobal
-      // 
-      this.chkIsGlobal.AutoSize = true;
-      this.chkIsGlobal.Location = new System.Drawing.Point(202, 22);
-      this.chkIsGlobal.Name = "chkIsGlobal";
-      this.chkIsGlobal.Size = new System.Drawing.Size(87, 17);
-      this.chkIsGlobal.TabIndex = 3;
-      this.chkIsGlobal.Text = "Global Event";
-      this.chkIsGlobal.CheckedChanged += new System.EventHandler(this.chkIsGlobal_CheckedChanged);
-      // 
-      // pnlTabsContainer
-      // 
-      this.pnlTabsContainer.Controls.Add(this.pnlTabs);
-      this.pnlTabsContainer.Location = new System.Drawing.Point(12, 61);
-      this.pnlTabsContainer.Name = "pnlTabsContainer";
-      this.pnlTabsContainer.Size = new System.Drawing.Size(811, 22);
-      this.pnlTabsContainer.TabIndex = 22;
-      // 
-      // pnlTabs
-      // 
-      this.pnlTabs.AutoSize = true;
-      this.pnlTabs.Location = new System.Drawing.Point(0, 0);
-      this.pnlTabs.Name = "pnlTabs";
-      this.pnlTabs.Size = new System.Drawing.Size(811, 22);
-      this.pnlTabs.TabIndex = 23;
-      // 
-      // btnTabsRight
-      // 
-      this.btnTabsRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
-      this.btnTabsRight.Location = new System.Drawing.Point(773, 61);
-      this.btnTabsRight.Name = "btnTabsRight";
-      this.btnTabsRight.Padding = new System.Windows.Forms.Padding(5);
-      this.btnTabsRight.Size = new System.Drawing.Size(50, 23);
-      this.btnTabsRight.TabIndex = 1;
-      this.btnTabsRight.Text = ">";
-      this.btnTabsRight.Click += new System.EventHandler(this.btnTabsRight_Click);
-      // 
-      // btnTabsLeft
-      // 
-      this.btnTabsLeft.Location = new System.Drawing.Point(12, 61);
-      this.btnTabsLeft.Name = "btnTabsLeft";
-      this.btnTabsLeft.Padding = new System.Windows.Forms.Padding(5);
-      this.btnTabsLeft.Size = new System.Drawing.Size(50, 23);
-      this.btnTabsLeft.TabIndex = 0;
-      this.btnTabsLeft.Text = "<";
-      this.btnTabsLeft.Click += new System.EventHandler(this.btnTabsLeft_Click);
-      // 
-      // panel1
-      // 
-      this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
-      this.panel1.Location = new System.Drawing.Point(12, 83);
-      this.panel1.Name = "panel1";
-      this.panel1.Size = new System.Drawing.Size(811, 498);
-      this.panel1.TabIndex = 23;
-      // 
-      // FrmEvent
-      // 
-      this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
-      this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
-      this.AutoSize = true;
-      this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
-      this.ClientSize = new System.Drawing.Size(835, 622);
-      this.Controls.Add(this.grpNewCommands);
-      this.Controls.Add(this.grpTriggers);
-      this.Controls.Add(this.btnTabsRight);
-      this.Controls.Add(this.btnTabsLeft);
-      this.Controls.Add(this.grpEntityOptions);
-      this.Controls.Add(this.grpEventConditions);
-      this.Controls.Add(this.grpPageOptions);
-      this.Controls.Add(this.grpGeneral);
-      this.Controls.Add(this.btnCancel);
-      this.Controls.Add(this.btnSave);
-      this.Controls.Add(this.pnlTabsContainer);
-      this.Controls.Add(this.grpEventCommands);
-      this.Controls.Add(this.grpCreateCommands);
-      this.Controls.Add(this.panel1);
-      this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
-      this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
-      this.KeyPreview = true;
-      this.MaximizeBox = false;
-      this.Name = "FrmEvent";
-      this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
-      this.Text = "Event Editor";
-      this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.frmEvent_FormClosing);
-      this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.FrmEvent_FormClosed);
-      this.Load += new System.EventHandler(this.frmEvent_Load);
-      this.VisibleChanged += new System.EventHandler(this.FrmEvent_VisibleChanged);
-      this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.FrmEvent_KeyDown);
-      this.grpEntityOptions.ResumeLayout(false);
-      this.grpExtra.ResumeLayout(false);
-      this.grpExtra.PerformLayout();
-      this.grpInspector.ResumeLayout(false);
-      this.grpInspector.PerformLayout();
-      this.grpPreview.ResumeLayout(false);
-      this.grpPreview.PerformLayout();
-      this.grpMovement.ResumeLayout(false);
-      this.grpMovement.PerformLayout();
-      this.grpTriggers.ResumeLayout(false);
-      this.grpTriggers.PerformLayout();
-      this.grpEventConditions.ResumeLayout(false);
-      this.grpNewCommands.ResumeLayout(false);
-      this.grpNewCommands.PerformLayout();
-      this.grpEventCommands.ResumeLayout(false);
-      this.commandMenu.ResumeLayout(false);
-      this.grpPageOptions.ResumeLayout(false);
-      this.grpGeneral.ResumeLayout(false);
-      this.grpGeneral.PerformLayout();
-      this.pnlTabsContainer.ResumeLayout(false);
-      this.pnlTabsContainer.PerformLayout();
-      this.ResumeLayout(false);
+            this.commandMenu.Name = "commandMenu";
+            this.commandMenu.RenderMode = System.Windows.Forms.ToolStripRenderMode.System;
+            this.commandMenu.Size = new System.Drawing.Size(108, 136);
+            // 
+            // btnInsert
+            // 
+            this.btnInsert.ForeColor = System.Drawing.Color.Gainsboro;
+            this.btnInsert.Name = "btnInsert";
+            this.btnInsert.Size = new System.Drawing.Size(107, 22);
+            this.btnInsert.Text = "Insert";
+            this.btnInsert.Click += new System.EventHandler(this.btnInsert_Click);
+            // 
+            // btnEdit
+            // 
+            this.btnEdit.ForeColor = System.Drawing.Color.Gainsboro;
+            this.btnEdit.Name = "btnEdit";
+            this.btnEdit.Size = new System.Drawing.Size(107, 22);
+            this.btnEdit.Text = "Edit";
+            this.btnEdit.Click += new System.EventHandler(this.btnEdit_Click);
+            // 
+            // btnCut
+            // 
+            this.btnCut.ForeColor = System.Drawing.Color.Gainsboro;
+            this.btnCut.Name = "btnCut";
+            this.btnCut.Size = new System.Drawing.Size(107, 22);
+            this.btnCut.Text = "Cut";
+            this.btnCut.Click += new System.EventHandler(this.btnCut_Click);
+            // 
+            // btnCopy
+            // 
+            this.btnCopy.ForeColor = System.Drawing.Color.Gainsboro;
+            this.btnCopy.Name = "btnCopy";
+            this.btnCopy.Size = new System.Drawing.Size(107, 22);
+            this.btnCopy.Text = "Copy";
+            this.btnCopy.Click += new System.EventHandler(this.btnCopy_Click);
+            // 
+            // btnPaste
+            // 
+            this.btnPaste.ForeColor = System.Drawing.Color.Gainsboro;
+            this.btnPaste.Name = "btnPaste";
+            this.btnPaste.Size = new System.Drawing.Size(107, 22);
+            this.btnPaste.Text = "Paste";
+            this.btnPaste.Click += new System.EventHandler(this.btnPaste_Click);
+            // 
+            // btnDelete
+            // 
+            this.btnDelete.ForeColor = System.Drawing.Color.Gainsboro;
+            this.btnDelete.Name = "btnDelete";
+            this.btnDelete.Size = new System.Drawing.Size(107, 22);
+            this.btnDelete.Text = "Delete";
+            this.btnDelete.Click += new System.EventHandler(this.btnDelete_Click);
+            // 
+            // grpPageOptions
+            // 
+            this.grpPageOptions.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpPageOptions.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpPageOptions.Controls.Add(this.btnClearPage);
+            this.grpPageOptions.Controls.Add(this.btnDeletePage);
+            this.grpPageOptions.Controls.Add(this.btnPastePage);
+            this.grpPageOptions.Controls.Add(this.btnCopyPage);
+            this.grpPageOptions.Controls.Add(this.btnNewPage);
+            this.grpPageOptions.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpPageOptions.Location = new System.Drawing.Point(313, 5);
+            this.grpPageOptions.Name = "grpPageOptions";
+            this.grpPageOptions.Size = new System.Drawing.Size(510, 50);
+            this.grpPageOptions.TabIndex = 13;
+            this.grpPageOptions.TabStop = false;
+            this.grpPageOptions.Text = "Page Options";
+            // 
+            // btnClearPage
+            // 
+            this.btnClearPage.Location = new System.Drawing.Point(402, 16);
+            this.btnClearPage.Name = "btnClearPage";
+            this.btnClearPage.Padding = new System.Windows.Forms.Padding(5);
+            this.btnClearPage.Size = new System.Drawing.Size(93, 30);
+            this.btnClearPage.TabIndex = 17;
+            this.btnClearPage.Text = "Clear Page";
+            this.btnClearPage.Click += new System.EventHandler(this.btnClearPage_Click);
+            // 
+            // btnDeletePage
+            // 
+            this.btnDeletePage.Enabled = false;
+            this.btnDeletePage.Location = new System.Drawing.Point(303, 16);
+            this.btnDeletePage.Name = "btnDeletePage";
+            this.btnDeletePage.Padding = new System.Windows.Forms.Padding(5);
+            this.btnDeletePage.Size = new System.Drawing.Size(93, 30);
+            this.btnDeletePage.TabIndex = 16;
+            this.btnDeletePage.Text = "Delete Page";
+            this.btnDeletePage.Click += new System.EventHandler(this.btnDeletePage_Click);
+            // 
+            // btnPastePage
+            // 
+            this.btnPastePage.Location = new System.Drawing.Point(204, 16);
+            this.btnPastePage.Name = "btnPastePage";
+            this.btnPastePage.Padding = new System.Windows.Forms.Padding(5);
+            this.btnPastePage.Size = new System.Drawing.Size(93, 30);
+            this.btnPastePage.TabIndex = 15;
+            this.btnPastePage.Text = "Paste Page";
+            this.btnPastePage.Click += new System.EventHandler(this.btnPastePage_Click);
+            // 
+            // btnCopyPage
+            // 
+            this.btnCopyPage.Location = new System.Drawing.Point(105, 16);
+            this.btnCopyPage.Name = "btnCopyPage";
+            this.btnCopyPage.Padding = new System.Windows.Forms.Padding(5);
+            this.btnCopyPage.Size = new System.Drawing.Size(93, 30);
+            this.btnCopyPage.TabIndex = 14;
+            this.btnCopyPage.Text = "Copy Page";
+            this.btnCopyPage.Click += new System.EventHandler(this.btnCopyPage_Click);
+            // 
+            // btnNewPage
+            // 
+            this.btnNewPage.Location = new System.Drawing.Point(6, 16);
+            this.btnNewPage.Name = "btnNewPage";
+            this.btnNewPage.Padding = new System.Windows.Forms.Padding(5);
+            this.btnNewPage.Size = new System.Drawing.Size(93, 30);
+            this.btnNewPage.TabIndex = 13;
+            this.btnNewPage.Text = "New Page";
+            this.btnNewPage.Click += new System.EventHandler(this.btnNewPage_Click);
+            // 
+            // grpGeneral
+            // 
+            this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpGeneral.Controls.Add(this.chkIsGlobal);
+            this.grpGeneral.Controls.Add(this.lblName);
+            this.grpGeneral.Controls.Add(this.txtEventname);
+            this.grpGeneral.ForeColor = System.Drawing.Color.Gainsboro;
+            this.grpGeneral.Location = new System.Drawing.Point(12, 5);
+            this.grpGeneral.Name = "grpGeneral";
+            this.grpGeneral.Size = new System.Drawing.Size(295, 49);
+            this.grpGeneral.TabIndex = 18;
+            this.grpGeneral.TabStop = false;
+            this.grpGeneral.Text = "General";
+            // 
+            // chkIsGlobal
+            // 
+            this.chkIsGlobal.AutoSize = true;
+            this.chkIsGlobal.Location = new System.Drawing.Point(202, 22);
+            this.chkIsGlobal.Name = "chkIsGlobal";
+            this.chkIsGlobal.Size = new System.Drawing.Size(87, 17);
+            this.chkIsGlobal.TabIndex = 3;
+            this.chkIsGlobal.Text = "Global Event";
+            this.chkIsGlobal.CheckedChanged += new System.EventHandler(this.chkIsGlobal_CheckedChanged);
+            // 
+            // pnlTabsContainer
+            // 
+            this.pnlTabsContainer.Controls.Add(this.pnlTabs);
+            this.pnlTabsContainer.Location = new System.Drawing.Point(12, 61);
+            this.pnlTabsContainer.Name = "pnlTabsContainer";
+            this.pnlTabsContainer.Size = new System.Drawing.Size(811, 22);
+            this.pnlTabsContainer.TabIndex = 22;
+            // 
+            // pnlTabs
+            // 
+            this.pnlTabs.AutoSize = true;
+            this.pnlTabs.Location = new System.Drawing.Point(0, 0);
+            this.pnlTabs.Name = "pnlTabs";
+            this.pnlTabs.Size = new System.Drawing.Size(811, 22);
+            this.pnlTabs.TabIndex = 23;
+            // 
+            // btnTabsRight
+            // 
+            this.btnTabsRight.Anchor = ((System.Windows.Forms.AnchorStyles)((System.Windows.Forms.AnchorStyles.Top | System.Windows.Forms.AnchorStyles.Right)));
+            this.btnTabsRight.Location = new System.Drawing.Point(773, 61);
+            this.btnTabsRight.Name = "btnTabsRight";
+            this.btnTabsRight.Padding = new System.Windows.Forms.Padding(5);
+            this.btnTabsRight.Size = new System.Drawing.Size(50, 23);
+            this.btnTabsRight.TabIndex = 1;
+            this.btnTabsRight.Text = ">";
+            this.btnTabsRight.Click += new System.EventHandler(this.btnTabsRight_Click);
+            // 
+            // btnTabsLeft
+            // 
+            this.btnTabsLeft.Location = new System.Drawing.Point(12, 61);
+            this.btnTabsLeft.Name = "btnTabsLeft";
+            this.btnTabsLeft.Padding = new System.Windows.Forms.Padding(5);
+            this.btnTabsLeft.Size = new System.Drawing.Size(50, 23);
+            this.btnTabsLeft.TabIndex = 0;
+            this.btnTabsLeft.Text = "<";
+            this.btnTabsLeft.Click += new System.EventHandler(this.btnTabsLeft_Click);
+            // 
+            // panel1
+            // 
+            this.panel1.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.panel1.Location = new System.Drawing.Point(12, 83);
+            this.panel1.Name = "panel1";
+            this.panel1.Size = new System.Drawing.Size(811, 498);
+            this.panel1.TabIndex = 23;
+            // 
+            // FrmEvent
+            // 
+            this.AutoScaleDimensions = new System.Drawing.SizeF(6F, 13F);
+            this.AutoScaleMode = System.Windows.Forms.AutoScaleMode.Font;
+            this.AutoSize = true;
+            this.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
+            this.ClientSize = new System.Drawing.Size(835, 622);
+            this.Controls.Add(this.grpNewCommands);
+            this.Controls.Add(this.grpTriggers);
+            this.Controls.Add(this.btnTabsRight);
+            this.Controls.Add(this.btnTabsLeft);
+            this.Controls.Add(this.grpEntityOptions);
+            this.Controls.Add(this.grpEventConditions);
+            this.Controls.Add(this.grpPageOptions);
+            this.Controls.Add(this.grpGeneral);
+            this.Controls.Add(this.btnCancel);
+            this.Controls.Add(this.btnSave);
+            this.Controls.Add(this.pnlTabsContainer);
+            this.Controls.Add(this.grpEventCommands);
+            this.Controls.Add(this.grpCreateCommands);
+            this.Controls.Add(this.panel1);
+            this.FormBorderStyle = System.Windows.Forms.FormBorderStyle.FixedSingle;
+            this.Icon = ((System.Drawing.Icon)(resources.GetObject("$this.Icon")));
+            this.KeyPreview = true;
+            this.MaximizeBox = false;
+            this.Name = "FrmEvent";
+            this.StartPosition = System.Windows.Forms.FormStartPosition.CenterScreen;
+            this.Text = "Event Editor";
+            this.FormClosing += new System.Windows.Forms.FormClosingEventHandler(this.frmEvent_FormClosing);
+            this.FormClosed += new System.Windows.Forms.FormClosedEventHandler(this.FrmEvent_FormClosed);
+            this.Load += new System.EventHandler(this.frmEvent_Load);
+            this.VisibleChanged += new System.EventHandler(this.FrmEvent_VisibleChanged);
+            this.KeyDown += new System.Windows.Forms.KeyEventHandler(this.FrmEvent_KeyDown);
+            this.grpEntityOptions.ResumeLayout(false);
+            this.grpExtra.ResumeLayout(false);
+            this.grpExtra.PerformLayout();
+            this.grpInspector.ResumeLayout(false);
+            this.grpInspector.PerformLayout();
+            this.grpPreview.ResumeLayout(false);
+            this.grpPreview.PerformLayout();
+            this.grpMovement.ResumeLayout(false);
+            this.grpMovement.PerformLayout();
+            this.grpTriggers.ResumeLayout(false);
+            this.grpTriggers.PerformLayout();
+            this.grpEventConditions.ResumeLayout(false);
+            this.grpNewCommands.ResumeLayout(false);
+            this.grpNewCommands.PerformLayout();
+            this.grpEventCommands.ResumeLayout(false);
+            this.commandMenu.ResumeLayout(false);
+            this.grpPageOptions.ResumeLayout(false);
+            this.grpGeneral.ResumeLayout(false);
+            this.grpGeneral.PerformLayout();
+            this.pnlTabsContainer.ResumeLayout(false);
+            this.pnlTabsContainer.PerformLayout();
+            this.ResumeLayout(false);
 
         }
 
diff --git a/Intersect.Editor/Forms/Editors/Events/frmEvent.cs b/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
index c0dc7bc5..9f5c4e8a 100644
--- a/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
+++ b/Intersect.Editor/Forms/Editors/Events/frmEvent.cs
@@ -710,6 +710,11 @@ private void lstCommands_NodeMouseDoubleClick(object sender, TreeNodeMouseClickE
                 case EventCommandType.ShowPlayer:
                     tmpCommand = new ShowPlayerCommand();
 
+                    break;
+
+                case EventCommandType.ChangeItemsByTag:
+                    tmpCommand = new ChangeItemsByTag(CurrentPage.CommandLists);
+
                     break;
                 default:
                     throw new ArgumentOutOfRangeException();
@@ -1278,6 +1283,10 @@ private void OpenEditCommand(EventCommand command)
                 case EventCommandType.EndQuest:
                     cmdWindow = new EventCommandEndQuest((EndQuestCommand) command, this);
 
+                    break;
+                case EventCommandType.ChangeItemsByTag:
+                    cmdWindow = new EventCommandChangeItemsBytag((ChangeItemsByTag)command, CurrentPage, this);
+
                     break;
                 default:
                     throw new ArgumentOutOfRangeException();
diff --git a/Intersect.Editor/Forms/Editors/frmItem.Designer.cs b/Intersect.Editor/Forms/Editors/frmItem.Designer.cs
index d46aa33d..21b80353 100644
--- a/Intersect.Editor/Forms/Editors/frmItem.Designer.cs
+++ b/Intersect.Editor/Forms/Editors/frmItem.Designer.cs
@@ -42,6 +42,8 @@ private void InitializeComponent()
             this.btnCancel = new DarkUI.Controls.DarkButton();
             this.btnSave = new DarkUI.Controls.DarkButton();
             this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
+            this.lblTag = new System.Windows.Forms.Label();
+            this.txtTag = new DarkUI.Controls.DarkTextBox();
             this.btnAddFolder = new DarkUI.Controls.DarkButton();
             this.lblFolder = new System.Windows.Forms.Label();
             this.cmbFolder = new DarkUI.Controls.DarkComboBox();
@@ -317,6 +319,8 @@ private void InitializeComponent()
             // 
             this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
             this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpGeneral.Controls.Add(this.lblTag);
+            this.grpGeneral.Controls.Add(this.txtTag);
             this.grpGeneral.Controls.Add(this.btnAddFolder);
             this.grpGeneral.Controls.Add(this.lblFolder);
             this.grpGeneral.Controls.Add(this.cmbFolder);
@@ -348,6 +352,26 @@ private void InitializeComponent()
             this.grpGeneral.TabStop = false;
             this.grpGeneral.Text = "General";
             // 
+            // lblTag
+            //
+            this.lblTag.AutoSize = true;
+            this.lblTag.Location = new System.Drawing.Point(8, 129);
+            this.lblTag.Name = "lblTag";
+            this.lblTag.Size = new System.Drawing.Size(29, 13);
+            this.lblTag.TabIndex = 51;
+            this.lblTag.Text = "Tag:";
+            //
+            // txtTag
+            //
+            this.txtTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.txtTag.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.txtTag.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.txtTag.Location = new System.Drawing.Point(53, 127);
+            this.txtTag.Name = "txtTag";
+            this.txtTag.Size = new System.Drawing.Size(145, 20);
+            this.txtTag.TabIndex = 50;
+            this.txtTag.TextChanged += new System.EventHandler(this.txtTag_TextChanged);
+            //
             // btnAddFolder
             // 
             this.btnAddFolder.Location = new System.Drawing.Point(180, 58);
@@ -531,7 +555,7 @@ private void InitializeComponent()
             // lblDesc
             // 
             this.lblDesc.AutoSize = true;
-            this.lblDesc.Location = new System.Drawing.Point(9, 126);
+            this.lblDesc.Location = new System.Drawing.Point(9, 160);
             this.lblDesc.Name = "lblDesc";
             this.lblDesc.Size = new System.Drawing.Size(35, 13);
             this.lblDesc.TabIndex = 13;
@@ -542,10 +566,10 @@ private void InitializeComponent()
             this.txtDesc.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
             this.txtDesc.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
             this.txtDesc.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
-            this.txtDesc.Location = new System.Drawing.Point(12, 142);
+            this.txtDesc.Location = new System.Drawing.Point(12, 176);
             this.txtDesc.Multiline = true;
             this.txtDesc.Name = "txtDesc";
-            this.txtDesc.Size = new System.Drawing.Size(186, 93);
+            this.txtDesc.Size = new System.Drawing.Size(186, 59);
             this.txtDesc.TabIndex = 12;
             this.txtDesc.TextChanged += new System.EventHandler(this.txtDesc_TextChanged);
             // 
@@ -2602,5 +2626,7 @@ private void InitializeComponent()
     private Label lblHpRegen;
     private Label lblManaRegen;
     private Label lblRegenHint;
-  }
+        private Label lblTag;
+        private DarkTextBox txtTag;
+    }
 }
diff --git a/Intersect.Editor/Forms/Editors/frmItem.cs b/Intersect.Editor/Forms/Editors/frmItem.cs
index 07adb39b..09649878 100644
--- a/Intersect.Editor/Forms/Editors/frmItem.cs
+++ b/Intersect.Editor/Forms/Editors/frmItem.cs
@@ -162,6 +162,7 @@ private void InitLocalization()
             }
 
             lblDesc.Text = Strings.ItemEditor.description;
+            lblTag.Text = Strings.ItemEditor.tag;
             lblPic.Text = Strings.ItemEditor.picture;
             lblPrice.Text = Strings.ItemEditor.price;
             lblAnim.Text = Strings.ItemEditor.animation;
@@ -273,6 +274,7 @@ private void UpdateEditor()
                 txtName.Text = mEditorItem.Name;
                 cmbFolder.Text = mEditorItem.Folder;
                 txtDesc.Text = mEditorItem.Description;
+                txtTag.Text = String.Join(";", mEditorItem.Tags);
                 cmbType.SelectedIndex = (int) mEditorItem.ItemType;
                 cmbPic.SelectedIndex = cmbPic.FindString(TextUtils.NullToNone(mEditorItem.Icon));
                 cmbEquipmentAnimation.SelectedIndex = AnimationBase.ListIndex(mEditorItem.EquipmentAnimationId) + 1;
@@ -515,6 +517,20 @@ private void txtDesc_TextChanged(object sender, EventArgs e)
             mEditorItem.Description = txtDesc.Text;
         }
 
+        private void txtTag_TextChanged(object sender, EventArgs e)
+        {
+            try
+            {
+                mEditorItem.Tags.Clear();
+                mEditorItem.Tags.AddRange(txtTag.Text.Split(';'));
+            }
+            catch
+            {
+                MessageBox.Show(Strings.ItemEditor.tagparseerror, Strings.ItemEditor.tagparseerrortitle, MessageBoxButtons.OK, MessageBoxIcon.Warning);
+                return;
+            }
+        }
+
         private void cmbEquipmentSlot_SelectedIndexChanged(object sender, EventArgs e)
         {
             mEditorItem.EquipmentSlot = cmbEquipmentSlot.SelectedIndex;
@@ -1135,7 +1151,6 @@ private void txtSearch_Click(object sender, EventArgs e)
         }
 
         #endregion
-
     }
 
 }
diff --git a/Intersect.Editor/Forms/Editors/frmItem.resx b/Intersect.Editor/Forms/Editors/frmItem.resx
index 4c97d54d..36777ad0 100644
--- a/Intersect.Editor/Forms/Editors/frmItem.resx
+++ b/Intersect.Editor/Forms/Editors/frmItem.resx
@@ -125,51 +125,51 @@
         AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
         LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
         ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAY
-        CwAAAk1TRnQBSQFMAgEBAgEAAbABAQGwAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
+        CwAAAk1TRnQBSQFMAgEBAgEAAdABAQHQAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
         AwABEAMAAQEBAAEgBgABEFoAA/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2
         Af8D9gH/A/YB/4wAAyEBMAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFA
-        AyoBQAMqAUAIAAP2Af8DMgH/AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wP2
+        AyoBQAMqAUAIAAP2Af8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wP2
         Af+IAAMMARAB7gHyAfQB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/
-        A/YB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
-        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzIB/wP2Af+IAANAAXAByAHeAewB/wFEAbYB3AH/
-        AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2
-        AdwB/wFEAbYB3AH/AbYB0wHmAf8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHx
-        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMyAf8D9gH/
-        iAADXAHfAZEBwgHhAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHc
-        Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/
-        AzIB/wHxAe8B8AH/AdsB2QHaAf8BaQJoAf8BmgKZAf8DMgH/AZoCmQH/AWkCaAH/AdsB2QHaAf8B8QHv
-        AfAB/wMyAf8D9gH/hAADKgFAAd8B6gHxAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFE
-        AbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wHTAeEB6wH/AfEB7wHw
-        Af8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/AfEB7wHwAf8DMgH/AdsB2QHaAf8B8QHvAfAB/wMyAf8B8QHv
-        AfAB/wHbAdkB2gH/AzIB/wHxAe8B8AH/AzIB/wP2Af+EAANRAZ8BqQHOAeYB/wFEAbYB3AH/AUQBtgHc
-        Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wGf
-        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFEAbYB3AH/A/YB/wgAA/YB/wMyAf8B8QHvAfAB/wMyAf8B8QHv
-        AfAB/wHxAe8B8AH/AzIB/wHxAe8B8AH/AfEB7wHwAf8DMgH/AfEB7wHwAf8DMgH/A/YB/4QAA/YB/wGC
-        AboB3gH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHc
-        Af8BRAG2AdwB/wFEAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/
-        AzIB/wHxAe8B8AH/AzIB/wHFAcQBxQH/AV4BXQFeAf8BmgKZAf8BXgFdAV4B/wHFAcQBxQH/AzIB/wHx
-        Ae8B8AH/AzIB/wP2Af+EAAP2Af8D9gH/AUQBtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+        A/YB/wP2Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
+        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay4B/wP2Af+IAANAAXAByAHeAewB/wFAAbYB3AH/
+        AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2
+        AdwB/wFAAbYB3AH/AbYB0wHmAf8BQAG2AdwB/wP2Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHx
+        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMuAf8D9gH/
+        iAADXAHfAZEBwgHhAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHc
+        Af8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUABtgHcAf8D9gH/CAAD9gH/
+        Ay4B/wHxAe8B8AH/AdsB2QHaAf8BZQJkAf8BmgKZAf8DLgH/AZoCmQH/AWUCZAH/AdsB2QHaAf8B8QHv
+        AfAB/wMuAf8D9gH/hAADKgFAAd8B6gHxAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFA
+        AbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wHTAeEB6wH/AfEB7wHw
+        Af8BQAG2AdwB/wP2Af8IAAP2Af8DLgH/AfEB7wHwAf8DLgH/AdsB2QHaAf8B8QHvAfAB/wMuAf8B8QHv
+        AfAB/wHbAdkB2gH/Ay4B/wHxAe8B8AH/Ay4B/wP2Af+EAANRAZ8BqQHOAeYB/wFAAbYB3AH/AUABtgHc
+        Af8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wGf
+        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFAAbYB3AH/A/YB/wgAA/YB/wMuAf8B8QHvAfAB/wMuAf8B8QHv
+        AfAB/wHxAe8B8AH/Ay4B/wHxAe8B8AH/AfEB7wHwAf8DLgH/AfEB7wHwAf8DLgH/A/YB/4QAA/YB/wGC
+        AboB3gH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHc
+        Af8BQAG2AdwB/wFAAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUABtgHcAf8D9gH/CAAD9gH/
+        Ay4B/wHxAe8B8AH/Ay4B/wHFAcQBxQH/AVoBWQFaAf8BmgKZAf8BWgFZAVoB/wHFAcQBxQH/Ay4B/wHx
+        Ae8B8AH/Ay4B/wP2Af+EAAP2Af8D9gH/AUABtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
         AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AUQBtgHcAf8D9gH/CAAD9gH/AzIB/wHxAe8B8AH/AzIB/wFpAmgB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
-        AeUB/wFpAmgB/wMyAf8B8QHvAfAB/wMyAf8D9gH/iAAD9gH/AUQBtgHcAf8B8QHvAfAB/wHxAe8B8AH/
+        AUABtgHcAf8D9gH/CAAD9gH/Ay4B/wHxAe8B8AH/Ay4B/wFlAmQB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
+        AeUB/wFlAmQB/wMuAf8B8QHvAfAB/wMuAf8D9gH/iAAD9gH/AUABtgHcAf8B8QHvAfAB/wHxAe8B8AH/
         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
-        AfAB/wHxAe8B8AH/AUQBtgHcAf8D9gH/CAAD9gH/AzIB/wHxAe8B8AH/AdsB2QHaAf8BaQJoAf8BmgKZ
-        Af8B2wHZAdoB/wGaApkB/wFpAmgB/wHbAdkB2gH/AfEB7wHwAf8DMgH/A/YB/4gAA/YB/wFEAbYB3AH/
+        AfAB/wHxAe8B8AH/AUABtgHcAf8D9gH/CAAD9gH/Ay4B/wHxAe8B8AH/AdsB2QHaAf8BZQJkAf8BmgKZ
+        Af8B2wHZAdoB/wGaApkB/wFlAmQB/wHbAdkB2gH/AfEB7wHwAf8DLgH/A/YB/4gAA/YB/wFAAbYB3AH/
         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
-        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFEAbYB3AH/A/YB/wgAA/YB/wMyAf8B8QHvAfAB/wHx
+        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFAAbYB3AH/A/YB/wgAA/YB/wMuAf8B8QHvAfAB/wHx
         Ae8B8AH/AfEB7wHwAf8BxQHEAcUB/wGEAoMB/wHFAcQBxQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AzIB/wP2Af+IAAP2Af8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wHiAegB7gH/AfEB7wHw
-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BRAG2AdwB/wP2
-        Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AzIB/wMyAf8DMgH/A4YB/wNwAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BRAG2AdwB/wP2
-        Af8IAAP2Af8DMgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AzIB/wMyAf8DhgH/A3AB7wMhATCUAANcAd8ByAHeAewB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFE
-        AbYB3AH/AUQBtgHcAf8BRAG2AdwB/wFEAbYB3AH/AUQBtgHcAf8BRAG2AdwB/wP2Af8IAAP2Af8DMgH/
-        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzIB/wOGAf8DcAHv
+        Ay4B/wP2Af+IAAP2Af8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wHiAegB7gH/AfEB7wHw
+        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQAG2AdwB/wP2
+        Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+        Ay4B/wMuAf8DLgH/A4YB/wNmAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
+        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQAG2AdwB/wP2
+        Af8IAAP2Af8DLgH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+        Ay4B/wMuAf8DhgH/A2YB7wMhATCUAANcAd8ByAHeAewB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wFA
+        AbYB3AH/AUABtgHcAf8BQAG2AdwB/wFAAbYB3AH/AUABtgHcAf8BQAG2AdwB/wP2Af8IAAP2Af8DLgH/
+        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay4B/wOGAf8DZgHv
         AyEBMJgAAzoBYAP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/CAAD9gH/
-        AzIB/wMyAf8DMgH/AzIB/wMyAf8DMgH/AzIB/wOGAf8DcAHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
-        Af8D9gH/A/YB/wP2Af8DcAHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
+        Ay4B/wMuAf8DLgH/Ay4B/wMuAf8DLgH/Ay4B/wOGAf8DZgHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
+        Af8D9gH/A/YB/wP2Af8DZgHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
         A/8BAAL/AcABAQQAAcABAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEGAAHAAQEGAAHA
         AQEGAAHAAQEGAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEEAAGAAQABwAEBBAAB8AEA
         AcABAwQAAfABAAHAAQcEAAL/AcABDwQACw==
diff --git a/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs b/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs
index b1af3567..3e345080 100644
--- a/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs
+++ b/Intersect.Editor/Forms/Editors/frmNpc.Designer.cs
@@ -38,6 +38,8 @@ private void InitializeComponent()
             this.lstNpcs = new System.Windows.Forms.TreeView();
             this.imageList = new System.Windows.Forms.ImageList(this.components);
             this.grpGeneral = new DarkUI.Controls.DarkGroupBox();
+            this.lblTag = new System.Windows.Forms.Label();
+            this.txtTag = new DarkUI.Controls.DarkTextBox();
             this.btnAddFolder = new DarkUI.Controls.DarkButton();
             this.lblFolder = new System.Windows.Forms.Label();
             this.cmbFolder = new DarkUI.Controls.DarkComboBox();
@@ -263,6 +265,8 @@ private void InitializeComponent()
             // 
             this.grpGeneral.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
             this.grpGeneral.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
+            this.grpGeneral.Controls.Add(this.lblTag);
+            this.grpGeneral.Controls.Add(this.txtTag);
             this.grpGeneral.Controls.Add(this.btnAddFolder);
             this.grpGeneral.Controls.Add(this.lblFolder);
             this.grpGeneral.Controls.Add(this.cmbFolder);
@@ -281,6 +285,26 @@ private void InitializeComponent()
             this.grpGeneral.TabStop = false;
             this.grpGeneral.Text = "General";
             // 
+            // lblTag
+            //
+            this.lblTag.AutoSize = true;
+            this.lblTag.Location = new System.Drawing.Point(72, 110);
+            this.lblTag.Name = "lblTag";
+            this.lblTag.Size = new System.Drawing.Size(29, 13);
+            this.lblTag.TabIndex = 69;
+            this.lblTag.Text = "Tag:";
+            //
+            // txtTag
+            //
+            this.txtTag.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(69)))), ((int)(((byte)(73)))), ((int)(((byte)(74)))));
+            this.txtTag.BorderStyle = System.Windows.Forms.BorderStyle.FixedSingle;
+            this.txtTag.ForeColor = System.Drawing.Color.FromArgb(((int)(((byte)(220)))), ((int)(((byte)(220)))), ((int)(((byte)(220)))));
+            this.txtTag.Location = new System.Drawing.Point(106, 108);
+            this.txtTag.Name = "txtTag";
+            this.txtTag.Size = new System.Drawing.Size(89, 20);
+            this.txtTag.TabIndex = 68;
+            this.txtTag.TextChanged += new System.EventHandler(this.txtTag_TextChanged);
+            //
             // btnAddFolder
             // 
             this.btnAddFolder.Location = new System.Drawing.Point(177, 45);
@@ -367,7 +391,7 @@ private void InitializeComponent()
             this.cmbSprite.FormattingEnabled = true;
             this.cmbSprite.Items.AddRange(new object[] {
             "None"});
-            this.cmbSprite.Location = new System.Drawing.Point(75, 132);
+            this.cmbSprite.Location = new System.Drawing.Point(75, 150);
             this.cmbSprite.Name = "cmbSprite";
             this.cmbSprite.Size = new System.Drawing.Size(120, 21);
             this.cmbSprite.TabIndex = 11;
@@ -378,7 +402,7 @@ private void InitializeComponent()
             // lblPic
             // 
             this.lblPic.AutoSize = true;
-            this.lblPic.Location = new System.Drawing.Point(72, 116);
+            this.lblPic.Location = new System.Drawing.Point(72, 134);
             this.lblPic.Name = "lblPic";
             this.lblPic.Size = new System.Drawing.Size(37, 13);
             this.lblPic.TabIndex = 6;
@@ -782,6 +806,7 @@ private void InitializeComponent()
             // 
             // grpAttackSpeed
             // 
+            //
             this.grpAttackSpeed.BackColor = System.Drawing.Color.FromArgb(((int)(((byte)(45)))), ((int)(((byte)(45)))), ((int)(((byte)(48)))));
             this.grpAttackSpeed.BorderColor = System.Drawing.Color.FromArgb(((int)(((byte)(90)))), ((int)(((byte)(90)))), ((int)(((byte)(90)))));
             this.grpAttackSpeed.Controls.Add(this.nudAttackSpeedValue);
@@ -2136,5 +2161,7 @@ private void InitializeComponent()
         private System.Windows.Forms.Label lblAttackSpeedValue;
         private DarkComboBox cmbAttackSpeedModifier;
         private System.Windows.Forms.Label lblAttackSpeedModifier;
+        private System.Windows.Forms.Label lblTag;
+        private DarkTextBox txtTag;
     }
 }
\ No newline at end of file
diff --git a/Intersect.Editor/Forms/Editors/frmNpc.cs b/Intersect.Editor/Forms/Editors/frmNpc.cs
index 35191db5..b037e1fa 100644
--- a/Intersect.Editor/Forms/Editors/frmNpc.cs
+++ b/Intersect.Editor/Forms/Editors/frmNpc.cs
@@ -132,6 +132,8 @@ private void InitLocalization()
             lblName.Text = Strings.NpcEditor.name;
             grpBehavior.Text = Strings.NpcEditor.behavior;
 
+            lblTag.Text = Strings.EventConditional.tag;
+
             lblPic.Text = Strings.NpcEditor.sprite;
             lblSpawnDuration.Text = Strings.NpcEditor.spawnduration;
 
@@ -237,6 +239,7 @@ private void UpdateEditor()
                 pnlContainer.Show();
 
                 txtName.Text = mEditorItem.Name;
+                txtTag.Text = String.Join(";", mEditorItem.Tags);
                 cmbFolder.Text = mEditorItem.Folder;
                 cmbSprite.SelectedIndex = cmbSprite.FindString(TextUtils.NullToNone(mEditorItem.Sprite));
                 nudLevel.Value = mEditorItem.Level;
@@ -354,6 +357,21 @@ private void txtName_TextChanged(object sender, EventArgs e)
             mChangingName = false;
         }
 
+        private void txtTag_TextChanged(object sender, EventArgs e)
+        {
+            try
+            {
+                mEditorItem.Tags.Clear();
+                mEditorItem.Tags.AddRange(txtTag.Text.Split(';'));
+            }
+            catch
+            {
+                MessageBox.Show(Strings.NpcEditor.tagparseerror, Strings.NpcEditor.tagparseerrortitle, MessageBoxButtons.OK, MessageBoxIcon.Warning);
+                return;
+            }
+
+        }
+
         private void cmbSprite_SelectedIndexChanged(object sender, EventArgs e)
         {
             mEditorItem.Sprite = TextUtils.SanitizeNone(cmbSprite.Text);
@@ -1111,7 +1129,6 @@ private void txtSearch_Click(object sender, EventArgs e)
         }
 
         #endregion
-
     }
 
 }
diff --git a/Intersect.Editor/Forms/Editors/frmNpc.resx b/Intersect.Editor/Forms/Editors/frmNpc.resx
index d5437557..aa4cf569 100644
--- a/Intersect.Editor/Forms/Editors/frmNpc.resx
+++ b/Intersect.Editor/Forms/Editors/frmNpc.resx
@@ -125,51 +125,51 @@
         AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj00LjAuMC4w
         LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
         ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAAAY
-        CwAAAk1TRnQBSQFMAgEBAgEAAbgBAQG4AQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
+        CwAAAk1TRnQBSQFMAgEBAgEAAcgBAQHIAQEBEAEAARABAAT/ASEBAAj/AUIBTQE2BwABNgMAASgDAAFA
         AwABEAMAAQEBAAEgBgABEFoAA/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2
         Af8D9gH/A/YB/4wAAyEBMAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFAAyoBQAMqAUADKgFA
-        AyoBQAMqAUAIAAP2Af8DMQH/AzEB/wMxAf8DMQH/AzEB/wMxAf8DMQH/AzEB/wMxAf8DMQH/AzEB/wP2
+        AyoBQAMqAUAIAAP2Af8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wP2
         Af+IAAMMARAB7gHyAfQB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/
-        A/YB/wP2Af8IAAP2Af8DMQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
-        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzEB/wP2Af+IAANAAXAByAHeAewB/wFDAbYB3AH/
-        AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2
-        AdwB/wFDAbYB3AH/AbYB0wHmAf8BQwG2AdwB/wP2Af8IAAP2Af8DMQH/AfEB7wHwAf8B8QHvAfAB/wHx
-        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMxAf8D9gH/
-        iAADXAHfAZEBwgHhAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHc
-        Af8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUMBtgHcAf8D9gH/CAAD9gH/
-        AzEB/wHxAe8B8AH/AdsB2QHaAf8BaAJnAf8BmgKZAf8DMQH/AZoCmQH/AWgCZwH/AdsB2QHaAf8B8QHv
-        AfAB/wMxAf8D9gH/hAADKgFAAd8B6gHxAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFD
-        AbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wHTAeEB6wH/AfEB7wHw
-        Af8BQwG2AdwB/wP2Af8IAAP2Af8DMQH/AfEB7wHwAf8DMQH/AdsB2QHaAf8B8QHvAfAB/wMxAf8B8QHv
-        AfAB/wHbAdkB2gH/AzEB/wHxAe8B8AH/AzEB/wP2Af+EAANRAZ8BqQHOAeYB/wFDAbYB3AH/AUMBtgHc
-        Af8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wGf
-        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFDAbYB3AH/A/YB/wgAA/YB/wMxAf8B8QHvAfAB/wMxAf8B8QHv
-        AfAB/wHxAe8B8AH/AzEB/wHxAe8B8AH/AfEB7wHwAf8DMQH/AfEB7wHwAf8DMQH/A/YB/4QAA/YB/wGC
-        AboB3gH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHc
-        Af8BQwG2AdwB/wFDAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUMBtgHcAf8D9gH/CAAD9gH/
-        AzEB/wHxAe8B8AH/AzEB/wHFAcQBxQH/AV0BXAFdAf8BmgKZAf8BXQFcAV0B/wHFAcQBxQH/AzEB/wHx
-        Ae8B8AH/AzEB/wP2Af+EAAP2Af8D9gH/AUMBtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
+        A/YB/wP2Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHx
+        Ae8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay8B/wP2Af+IAANAAXAByAHeAewB/wFBAbYB3AH/
+        AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2
+        AdwB/wFBAbYB3AH/AbYB0wHmAf8BQQG2AdwB/wP2Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHx
+        Ae8B8AH/AcUBxAHFAf8BhAKDAf8BxQHEAcUB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wMvAf8D9gH/
+        iAADXAHfAZEBwgHhAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHc
+        Af8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BiQG9Ad8B/wHxAe8B8AH/AUEBtgHcAf8D9gH/CAAD9gH/
+        Ay8B/wHxAe8B8AH/AdsB2QHaAf8BZgJlAf8BmgKZAf8DLwH/AZoCmQH/AWYCZQH/AdsB2QHaAf8B8QHv
+        AfAB/wMvAf8D9gH/hAADKgFAAd8B6gHxAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFB
+        AbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wHTAeEB6wH/AfEB7wHw
+        Af8BQQG2AdwB/wP2Af8IAAP2Af8DLwH/AfEB7wHwAf8DLwH/AdsB2QHaAf8B8QHvAfAB/wMvAf8B8QHv
+        AfAB/wHbAdkB2gH/Ay8B/wHxAe8B8AH/Ay8B/wP2Af+EAANRAZ8BqQHOAeYB/wFBAbYB3AH/AUEBtgHc
+        Af8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wGf
+        AcgB4gH/AfEB7wHwAf8B8QHvAfAB/wFBAbYB3AH/A/YB/wgAA/YB/wMvAf8B8QHvAfAB/wMvAf8B8QHv
+        AfAB/wHxAe8B8AH/Ay8B/wHxAe8B8AH/AfEB7wHwAf8DLwH/AfEB7wHwAf8DLwH/A/YB/4QAA/YB/wGC
+        AboB3gH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHc
+        Af8BQQG2AdwB/wFBAbYB3AH/AeIB6AHuAf8B8QHvAfAB/wHxAe8B8AH/AUEBtgHcAf8D9gH/CAAD9gH/
+        Ay8B/wHxAe8B8AH/Ay8B/wHFAcQBxQH/AVsBWgFbAf8BmgKZAf8BWwFaAVsB/wHFAcQBxQH/Ay8B/wHx
+        Ae8B8AH/Ay8B/wP2Af+EAAP2Af8D9gH/AUEBtgHcAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
         AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AUMBtgHcAf8D9gH/CAAD9gH/AzEB/wHxAe8B8AH/AzEB/wFoAmcB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
-        AeUB/wFoAmcB/wMxAf8B8QHvAfAB/wMxAf8D9gH/iAAD9gH/AUMBtgHcAf8B8QHvAfAB/wHxAe8B8AH/
+        AUEBtgHcAf8D9gH/CAAD9gH/Ay8B/wHxAe8B8AH/Ay8B/wFmAmUB/wHmAeQB5QH/AfEB7wHwAf8B5gHk
+        AeUB/wFmAmUB/wMvAf8B8QHvAfAB/wMvAf8D9gH/iAAD9gH/AUEBtgHcAf8B8QHvAfAB/wHxAe8B8AH/
         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
-        AfAB/wHxAe8B8AH/AUMBtgHcAf8D9gH/CAAD9gH/AzEB/wHxAe8B8AH/AdsB2QHaAf8BaAJnAf8BmgKZ
-        Af8B2wHZAdoB/wGaApkB/wFoAmcB/wHbAdkB2gH/AfEB7wHwAf8DMQH/A/YB/4gAA/YB/wFDAbYB3AH/
+        AfAB/wHxAe8B8AH/AUEBtgHcAf8D9gH/CAAD9gH/Ay8B/wHxAe8B8AH/AdsB2QHaAf8BZgJlAf8BmgKZ
+        Af8B2wHZAdoB/wGaApkB/wFmAmUB/wHbAdkB2gH/AfEB7wHwAf8DLwH/A/YB/4gAA/YB/wFBAbYB3AH/
         AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHv
-        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFDAbYB3AH/A/YB/wgAA/YB/wMxAf8B8QHvAfAB/wHx
+        AfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wFBAbYB3AH/A/YB/wgAA/YB/wMvAf8B8QHvAfAB/wHx
         Ae8B8AH/AfEB7wHwAf8BxQHEAcUB/wGEAoMB/wHFAcQBxQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AzEB/wP2Af+IAAP2Af8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wHiAegB7gH/AfEB7wHw
-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQwG2AdwB/wP2
-        Af8IAAP2Af8DMQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AzEB/wMxAf8DMQH/A4YB/wNuAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
-        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQwG2AdwB/wP2
-        Af8IAAP2Af8DMQH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
-        AzEB/wMxAf8DhgH/A24B7wMhATCUAANcAd8ByAHeAewB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFD
-        AbYB3AH/AUMBtgHcAf8BQwG2AdwB/wFDAbYB3AH/AUMBtgHcAf8BQwG2AdwB/wP2Af8IAAP2Af8DMQH/
-        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AzEB/wOGAf8DbgHv
+        Ay8B/wP2Af+IAAP2Af8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wHiAegB7gH/AfEB7wHw
+        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQQG2AdwB/wP2
+        Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+        Ay8B/wMvAf8DLwH/A4YB/wNoAe+IAAP2Af8D9gH/A/YB/wP2Af8BigG+Ad8B/wGnAcsB5AH/AfEB7wHw
+        Af8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8BQQG2AdwB/wP2
+        Af8IAAP2Af8DLwH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/
+        Ay8B/wMvAf8DhgH/A2gB7wMhATCUAANcAd8ByAHeAewB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFB
+        AbYB3AH/AUEBtgHcAf8BQQG2AdwB/wFBAbYB3AH/AUEBtgHcAf8BQQG2AdwB/wP2Af8IAAP2Af8DLwH/
+        AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/AfEB7wHwAf8B8QHvAfAB/wHxAe8B8AH/Ay8B/wOGAf8DaAHv
         AyEBMJgAAzoBYAP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/A/YB/wP2Af8D9gH/CAAD9gH/
-        AzEB/wMxAf8DMQH/AzEB/wMxAf8DMQH/AzEB/wOGAf8DbgHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
-        Af8D9gH/A/YB/wP2Af8DbgHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
+        Ay8B/wMvAf8DLwH/Ay8B/wMvAf8DLwH/Ay8B/wOGAf8DaAHvAyEBMNQAA/YB/wP2Af8D9gH/A/YB/wP2
+        Af8D9gH/A/YB/wP2Af8DaAHvAyEBMJAAAUIBTQE+BwABPgMAASgDAAFAAwABEAMAAQEBAAEBBQABgBcA
         A/8BAAL/AcABAQQAAcABAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEGAAHAAQEGAAHA
         AQEGAAHAAQEGAAHAAQEEAAGAAQABwAEBBAABgAEAAcABAQQAAYABAAHAAQEEAAGAAQABwAEBBAAB8AEA
         AcABAwQAAfABAAHAAQcEAAL/AcABDwQACw==
diff --git a/Intersect.Editor/Forms/frmMain.resx b/Intersect.Editor/Forms/frmMain.resx
index 9369b71e..55982554 100644
--- a/Intersect.Editor/Forms/frmMain.resx
+++ b/Intersect.Editor/Forms/frmMain.resx
@@ -179,15 +179,15 @@
   <data name="toolStripBtnRedo.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
     <value>
         iVBORw0KGgoAAAANSUhEUgAAABAAAAAQCAYAAAAf8/9hAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8
-        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHASURBVDhPjVJNLwNhEF4qEiIkEhec8AOE+g/i6iMREgkO
-        4toSn3FwcJJeSBxU0fg4qfQgItrQQ1N1WVKk0Q0lot3URtrd9lAyZl5vaxvN8iSTfXfnmWdmnncFPQCg
-        Kp1OT2OEZFnOYnzg+RpjStO0BnyCqqoRPDfykh9kMpkWTIY3Tm+hfcIFZX12MPXawTzpgi3vHSSTycfX
-        xDtYHP7fItSZikdXz0HoXi8aAzYPRGMKO+dEeLkg4Ggz1JmSpT12WNi7BOnlDSIvCZjbCbJJKNdqOcgL
-        0jq8nAmE2qzfSSrG8TzUgUgU7gsJqge38sW/BOJxOUs7U+LhVQH0o4l2JJGxNV9BYS7+FKDvOZFi3hQI
-        IPGmA92mBF/hBI2t5DkmQjegjwIBfJl16ExcOw4RIYBXV8cpxqBuqVRK0o86vxukq7rHdZo5zRj0I2HH
-        qHXTnxcZXjmDlKrJuIaZ04yBxHocXbS5RbYKiXQuHkHiPanhNF2cZgxFUWrIxH1fGCr6HUyEfudb6fkT
-        pxzhNGOgJ+Uosu29eoLaIScTWT4UmbGYM3GaMZBYgiJLohSDaWeAGfrvW9EDRcaxc6z4bQjCFyc+2ILy
-        tHXhAAAAAElFTkSuQmCC
+        YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAAHASURBVDhPjVJNSwJhEN4ygiIKgi7VqfoBUfYfomsfEAVB
+        dYiuWmQfdOjQKbwUeMjMpI9ThoeISCkPYnax0EJSSkFcwxZRVw8W08zbq60kWw8M++7OM8/MPO8KSgBA
+        Uz6fN2AEkslkEeMDzw8YS7Isd+ATcrlcGM+dvOQHhUKhB5OhvatH6F+wQ92YGTSjZtAu2sHqeoJMJvOa
+        SKVBZ/H8FqHOVDy7cwPC8G7VmDA6ISpK7FwS4eWCgKMtU2dK1o6YYf34DiLxdwjHU7B66GOTUK5Xd1oW
+        pHV4ORMI9Om/k1SM4zmpA5EoHLcRaJ60lot/CYhiskg7U+IlIQH60UU7ksicyV1RWIo/Beh7SaSaNxUC
+        SAwOoNuU4CtcorGNPMdE6AaUUSGALysWhYmmiwARvHh1bZyiDuqWzWYjylHXjnx0Vc+4TjenqYN+JOwY
+        1e97yiLT29eQzclvuIaW09SBxHYc3W90+NkqJDK4cQ6pdEbGaYY4TR2SJLWQiSfuEDSMW5gI/c7BcOwT
+        p5zhNHWgJ/UocuC6j0HrlI2JbJ35mbGY03CaOpBYgyKb/ogIBpuXGfrvW1ECReaxs1j9NgThC/0O2HOk
+        ZCupAAAAAElFTkSuQmCC
 </value>
   </data>
   <data name="toolStripBtnPen.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
diff --git a/Intersect.Editor/Intersect.Editor.csproj b/Intersect.Editor/Intersect.Editor.csproj
index 04efdc14..cf0d8abf 100644
--- a/Intersect.Editor/Intersect.Editor.csproj
+++ b/Intersect.Editor/Intersect.Editor.csproj
@@ -86,6 +86,12 @@
     <Compile Include="Core\Preferences.cs" />
     <Compile Include="Core\Program.cs" />
     <Compile Include="Entities\Animation.cs" />
+    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeItemsByTag.cs">
+      <SubType>UserControl</SubType>
+    </Compile>
+    <Compile Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeItemsByTag.Designer.cs">
+      <DependentUpon>EventCommand_ChangeItemsByTag.cs</DependentUpon>
+    </Compile>
     <Compile Include="Forms\frmUpdate.cs">
       <SubType>Form</SubType>
     </Compile>
@@ -654,6 +660,9 @@
     <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeGender.resx">
       <DependentUpon>EventCommand_ChangeGender.cs</DependentUpon>
     </EmbeddedResource>
+    <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeItemsByTag.resx">
+      <DependentUpon>EventCommand_ChangeItemsByTag.cs</DependentUpon>
+    </EmbeddedResource>
     <EmbeddedResource Include="Forms\Editors\Events\Event Commands\EventCommand_ChangeVital.resx">
       <DependentUpon>EventCommand_ChangeVital.cs</DependentUpon>
     </EmbeddedResource>
diff --git a/Intersect.Editor/Localization/Strings.cs b/Intersect.Editor/Localization/Strings.cs
index b65d3a77..25380f74 100644
--- a/Intersect.Editor/Localization/Strings.cs
+++ b/Intersect.Editor/Localization/Strings.cs
@@ -49,6 +49,16 @@ public static string GetEventConditionalDesc(IsItemEquippedCondition condition)
             return Strings.EventConditionDesc.hasitemequipped.ToString(ItemBase.GetName(condition.ItemId));
         }
 
+        public static string GetEventConditionalDesc(EquippedItemTagIsCondition condition)
+        {
+            return Strings.EventConditionDesc.itemequippedtagis.ToString(condition.Tag ?? ItemBase.Deleted);
+        }
+
+        public static string GetEventConditionalDesc(HasItemWTagCondition condition)
+        {
+            return Strings.EventConditionDesc.hasitemwithtag.ToString(condition.Tag ?? ItemBase.Deleted);
+        }
+
         public static string GetEventConditionalDesc(ClassIsCondition condition)
         {
             return Strings.EventConditionDesc.Class.ToString(ClassBase.GetName(condition.ClassId));
@@ -222,6 +232,16 @@ public static string GetEventConditionalDesc(NoNpcsOnMapCondition condition)
             return Strings.EventConditionDesc.nonpcsonmap;
         }
 
+        public static string GetEventConditionalDesc(MapHasNPCWTag condition)
+        {
+            return Strings.EventConditionDesc.maphasnpcwithtag.ToString(condition.Tag ?? ItemBase.Deleted);
+        }
+
+        public static string GetEventConditionalDesc(MapHasTag condition)
+        {
+            return Strings.EventConditionDesc.maphastag.ToString(condition.Tag ?? ItemBase.Deleted);
+        }
+
         public static string GetEventConditionalDesc(GenderIsCondition condition)
         {
             return Strings.EventConditionDesc.gender.ToString(
@@ -1247,6 +1267,27 @@ public struct EventChangeItems
 
         }
 
+        public struct EventChangeItemsByTag
+        {
+
+            public static LocalizedString tag = @"Tag:";
+
+            public static Dictionary<int, LocalizedString> actions = new Dictionary<int, LocalizedString>
+            {
+                {0, @"Give"},
+                {1, @"Take"},
+            };
+
+            public static LocalizedString amount = @"Amount:";
+
+            public static LocalizedString cancel = @"Cancel";
+
+            public static LocalizedString okay = @"Ok";
+
+            public static LocalizedString title = @"Change Items By Tag";
+
+        }
+
         public struct EventEquipItems
         {
 
@@ -1471,6 +1512,8 @@ public struct EventCommandList
 
             public static LocalizedString enditemchange = @"End Item Change";
 
+            public static LocalizedString endchangeitemsbytag = @"End Change Items by Tag";
+
             public static LocalizedString endoptions = @"End Options";
 
             public static LocalizedString endquest = @"End Quest [{00}, {01}]";
@@ -1511,8 +1554,12 @@ public struct EventCommandList
 
             public static LocalizedString itemnotchanged = @"Item(s) Not Given/Taken (Doesn't have/Inventory full)";
 
+            public static LocalizedString itemnotchangedbytag = @"Item(s) Not Given/Taken (Doesn't have/Inventory full)";
+
             public static LocalizedString itemschanged = @"Item(s) Given/Taken Successfully";
 
+            public static LocalizedString itemchangedbytag = @"Item(s) Given/Taken Successfully";
+
             public static LocalizedString label = @"Label: {00}";
 
             public static LocalizedString leftshiftvariable = @"Left Bit Shift {00}";
@@ -1645,6 +1692,8 @@ public struct EventCommandList
 
             public static LocalizedString take = @"Take: Item {00}";
 
+            public static LocalizedString changeitemsbytag = @"Change Items by Tag: {00}";
+
             public static LocalizedString taskundefined = @"Undefined";
 
             public static LocalizedString teach = @"Teach: Spell {00}";
@@ -1728,6 +1777,7 @@ public struct EventCommands
                 {"changenamecolor", @"Change Name Color"},
                 {"inputvariable", @"Input Variable"},
                 {"changeplayerlabel", @"Change Player Label"},
+                {"changeitemsbytag", "Change Items By Tag" },
             };
 
         }
@@ -1807,7 +1857,11 @@ public struct EventConditional
                 {15, @"Gender is..."},
                 {16, @"Map is..."},
                 {17, @"Item Equipped is..."},
-                {18, @"Has X free Inventory slots..." }
+                {18, @"Has X free Inventory slots..." },
+                {19, @"Item Equipped Has Tag..."},
+                {20, @"Has Item With Tag..."},
+                {21, @"Map has Npc With Tag..."},
+                {22, @"Map has Tag..." },
             };
 
             public static LocalizedString endrange = @"End Range:";
@@ -1832,10 +1886,18 @@ public struct EventConditional
 
             public static LocalizedString hasitemequipped = @"Has Equipped Item";
 
+            public static LocalizedString itemequippedhastag = @"Item Equipped Has Tag";
+
+            public static LocalizedString hasitemwithtag = @"Has Item With Tag";
+
+            public static LocalizedString maphasnpcwithtag = @"Map Has NPCs With Tag";
+
             public static LocalizedString ignorestatbuffs = @"Ignore equipment & spell buffs.";
 
             public static LocalizedString item = @"Item:";
 
+            public static LocalizedString tag = @"Tag:";
+
             public static LocalizedString knowsspell = @"Knows Spell";
 
             public static LocalizedString level = @"Level";
@@ -1850,6 +1912,8 @@ public struct EventConditional
 
             public static LocalizedString mapis = @"Map Is...";
 
+            public static LocalizedString maphastag = @"Map Has Tag...";
+
             public static LocalizedString negated = @"Negated";
 
             public static LocalizedString numericvariable = @"Numeric Variable:";
@@ -1964,6 +2028,10 @@ public struct EventConditionDesc
 
             public static LocalizedString hasitemequipped = @"Player has Item {00} equipped";
 
+            public static LocalizedString itemequippedtagis = @"Player equipped Item tag is {00} ";
+
+            public static LocalizedString hasitemwithtag = @"Player has Item with tag {00}";
+
             public static LocalizedString knowsspell = @"Player knows Spell {00}";
 
             public static LocalizedString lessthan = @"is less than {00}";
@@ -1986,6 +2054,10 @@ public struct EventConditionDesc
 
             public static LocalizedString nonpcsonmap = @"No NPCs on the map";
 
+            public static LocalizedString maphasnpcwithtag = @"Map has NPCs with tag {00}";
+
+            public static LocalizedString maphastag = @"Map has tag {00}";
+
             public static LocalizedString notequal = @"does not equal {00}";
 
             public static LocalizedString onanytask = @", On Any Task";
@@ -2809,6 +2881,8 @@ public struct ItemEditor
 
             public static LocalizedString deletetitle = @"Delete Item";
 
+            public static LocalizedString tag = @"Tag:";
+
             public static LocalizedString description = @"Desc:";
 
             public static LocalizedString equipment = @"Equipment";
@@ -2928,6 +3002,10 @@ public struct ItemEditor
 
             public static LocalizedString weaponproperties = @"Weapon Properties";
 
+            public static LocalizedString tagparseerrortitle = @"Tag Parse Error";
+
+            public static LocalizedString tagparseerror = @"There was an issue with your Tags, they could not the split properly on ';'.\b\nPlease check your formatting!";
+
         }
 
         public struct LightEditor
@@ -3304,6 +3382,7 @@ public struct MapProperties
                 {"weatherxspeed", @"Weather X Speed"},
                 {"weatheryspeed", @"Weather Y Speed"},
                 {"weatherintensity", @"Weather Intensity"},
+                {"tags", @"Tags" },
             };
 
             public static Dictionary<string, string> descriptions = new Dictionary<string, string>()
@@ -3344,6 +3423,7 @@ public struct MapProperties
                 },
                 {"weatheryspeeddesc", @"How fast vertically weather particles move across the screen. (Range -5 to 5)"},
                 {"weatherintensitydesc", @"How intence the weather is (number of particles). (Range 0 to 100)"},
+                {"tagsdesc", @"The tags that apply to this map. (Semi-Colon ( ; ) separated)" },
             };
 
             public static LocalizedString title = @"Map Properties";
@@ -3544,6 +3624,10 @@ public struct NpcEditor
 
             public static LocalizedString undotitle = @"Undo Changes";
 
+            public static LocalizedString tagparseerrortitle = @"Tag Parse Error";
+
+            public static LocalizedString tagparseerror = @"There was an issue with your Tags, they could not the split properly on ';'.\b\nPlease check your formatting!";
+
         }
 
         public struct NpcSpawns
diff --git a/Intersect.Editor/Maps/MapProperties.cs b/Intersect.Editor/Maps/MapProperties.cs
index 67d9a671..9d2e98a8 100644
--- a/Intersect.Editor/Maps/MapProperties.cs
+++ b/Intersect.Editor/Maps/MapProperties.cs
@@ -98,6 +98,22 @@ public string ZoneType
             }
         }
 
+        [CustomCategory("general"), CustomDescription("tagsdesc"), CustomDisplayName("tags"), DefaultValue("")]
+        public string Tags
+        {
+            get => String.Join(";", mMyMap.Tags);
+            set
+            {
+                if (String.Join(";", mMyMap.Tags) != value)
+                {
+                    Globals.MapEditorWindow.PrepUndoState();
+                    mMyMap.Tags.Clear();
+                    mMyMap.Tags.AddRange(value.Split(';'));
+                    Globals.MapEditorWindow.AddUndoState();
+                }
+            }
+        }
+
         [CustomCategory("audio"), CustomDescription("musicdesc"), CustomDisplayName("music"), DefaultValue("None"),
          TypeConverter(typeof(MapMusicProperty)), Browsable(true)]
         public string Music
diff --git a/Intersect.Server/Entities/Events/CommandProcessing.cs b/Intersect.Server/Entities/Events/CommandProcessing.cs
index c9be4ef2..e1f84e9c 100644
--- a/Intersect.Server/Entities/Events/CommandProcessing.cs
+++ b/Intersect.Server/Entities/Events/CommandProcessing.cs
@@ -10,6 +10,7 @@
 using Intersect.GameObjects.Events.Commands;
 using Intersect.GameObjects.Switches_and_Variables;
 using Intersect.Server.Database;
+using Intersect.Server.Database.PlayerData.Players;
 using Intersect.Server.Database.PlayerData.Security;
 using Intersect.Server.General;
 using Intersect.Server.Localization;
@@ -449,6 +450,114 @@ Stack<CommandInstance> callStack
             callStack.Push(tmpStack);
         }
 
+        //Take Items By tag Command
+        private static void ProcessCommand(
+            ChangeItemsByTag command,
+            Player player,
+            Event instance,
+            CommandInstance stackInfo,
+            Stack<CommandInstance> callStack
+        )
+        {
+            var success = false;
+
+            // Retrieve all items that have the tag we're looking for so we can use this list to check against their inventory, or pick a random item!.
+            var potentialItems = new List<Guid>();
+            foreach (var dbObject in ItemBase.Lookup.Values)
+            {
+                var item = (ItemBase)dbObject;
+                if (item.Tags.Contains(command.Tag))
+                {
+                    potentialItems.Add(item.Id);
+                }
+            }
+
+            // Create a backup of our inventory in case we end up not being able to remove all required items and want to revert.
+            var invBackup = player.Items.Select(item => item?.Clone()).ToList();
+
+            // Going to use this to keep track of how many items we have to change.
+            var changed = 0;
+
+            // Go through each inventory slot we've retrieved before and attempt to remove as many items as we need.
+            //Check if we're going to be giving or taking items.
+            if (command.Add) // Add Items to the inventory!
+            {
+                // Go through the amout of items we have to give, and pick a random item from our list of potential items to attempt to give to our player.
+                var randomizer = new Random();
+                for (var attempt = 0; attempt < command.Quantity; attempt++)
+                {
+                    if (player.TryGiveItem(potentialItems[randomizer.Next(potentialItems.Count)], 1, ItemHandling.Normal, false, false))
+                    {
+                        changed += 1;
+                    }
+                }
+            }
+            else // Remove Items from the inventory!
+            {
+                // Find all inventory slots that has the items we've looked up above.
+                var inventorySlots = new List<InventorySlot>();
+                for (var slot = 0; slot < Options.MaxInvItems; slot++)
+                {
+                    if (potentialItems.Contains(player.Items[slot].ItemId))
+                    {
+                        inventorySlots.Add(player.Items[slot]);
+                    }
+                }
+
+                // Go through each inventory slot we've retrieved before and attempt to remove as many items as we need.
+                foreach (var slot in inventorySlots)
+                {
+                    // No point looping further if we are at the correct quantity!
+                    if (changed == command.Quantity) break;
+                
+                    for (var attempt = 0; attempt < command.Quantity; attempt++)
+                    {
+                        if (player.TryTakeItem(slot, 1, ItemHandling.Normal, false))
+                        {
+                            changed += 1;
+                        }
+                    }
+                }
+            }
+
+            // Do we still have items left to change or did we finish?
+            if ((command.Quantity - changed) == 0)
+            {
+                // We've succeeded! Let's update the inventory.
+                success = true;
+                PacketSender.SendInventory(player);
+            }
+            else
+            {
+                // We've failed to take all the required items. Time to restore our inventory!
+                for (var i = 0; i < invBackup.Count; i++)
+                {
+                    player.Items[i].Set(invBackup[i]);
+                }
+
+                PacketSender.SendInventory(player);
+            }
+
+            // Process other events.
+            List<EventCommand> newCommandList = null;
+            if (success && stackInfo.Page.CommandLists.ContainsKey(command.BranchIds[0]))
+            {
+                newCommandList = stackInfo.Page.CommandLists[command.BranchIds[0]];
+            }
+
+            if (!success && stackInfo.Page.CommandLists.ContainsKey(command.BranchIds[1]))
+            {
+                newCommandList = stackInfo.Page.CommandLists[command.BranchIds[1]];
+            }
+
+            var tmpStack = new CommandInstance(stackInfo.Page) {
+                CommandList = newCommandList,
+                CommandIndex = 0,
+            };
+
+            callStack.Push(tmpStack);
+        }
+
         //Equip Items Command
         private static void ProcessCommand(
             EquipItemCommand command,
diff --git a/Intersect.Server/Entities/Events/Conditions.cs b/Intersect.Server/Entities/Events/Conditions.cs
index 7d46d4a6..e3780fae 100644
--- a/Intersect.Server/Entities/Events/Conditions.cs
+++ b/Intersect.Server/Entities/Events/Conditions.cs
@@ -130,6 +130,65 @@ QuestBase questBase
             return false;
         }
 
+        public static bool MeetsCondition(
+            HasItemWTagCondition condition,
+            Player player,
+            Event eventInstance,
+            QuestBase questBase
+        )
+        {
+            // Get a list of all unique items the player has, filtering out the non-existant ones.
+            var playerItems = player.Items.Select(i => ItemBase.Get(i.ItemId))
+                .Where(item => item != null)
+                .Distinct().ToArray();
+
+            // Go through every unique item the player has, and see if we have enough tagged with our condition tag.
+            var tagItemCount = 0;
+            foreach (var item in playerItems)
+            {
+                // Does this item have the tag we are looking for?
+                if (item.Tags.Contains(condition.Tag))
+                {
+                    // Check if we can find an inventory slot the player has this item in.
+                    if (player.FindInventoryItemQuantity(item.Id) > -1)
+                    {
+                        // Increase our total item count by the actual amount of this item the player has.
+                        tagItemCount += player.CountItems(item.Id);
+
+                        // We've just increased our count, are we at the requirement?
+                        if (tagItemCount >= condition.Quantity)
+                        {
+                            return true;
+                        }
+                    }
+                }
+            }
+
+            return false;
+        }
+
+        public static bool MeetsCondition(
+            EquippedItemTagIsCondition condition,
+            Player player,
+            Event eventInstance,
+            QuestBase questBase
+        )
+        {
+            // Go through each equipment slot we have and check if the item equipped has a tag matching our condition.
+            for (var i = 0; i < Options.EquipmentSlots.Count; i++)
+            {
+                if (player.Equipment[i] >= 0)
+                {
+                    if (ItemBase.Get(player.Items[player.Equipment[i]].ItemId).Tags.Contains(condition.Tag))
+                    {
+                        return true;
+                    }
+                }
+            }
+
+            return false;
+        }
+
         public static bool MeetsCondition(
             ClassIsCondition condition,
             Player player,
@@ -382,6 +441,41 @@ QuestBase questBase
             return false;
         }
 
+        public static bool MeetsCondition(
+            MapHasNPCWTag condition,
+            Player player,
+            Event eventInstance,
+            QuestBase questBase
+        )
+        {
+            // Get the map our event is handled on, or if that fails the one our player is on.
+            var map = MapInstance.Get(eventInstance?.MapId ?? Guid.Empty);
+            if (map == null)
+            {
+                map = MapInstance.Get(player.MapId);
+            }
+
+            // if we have a map, actually process the condition.
+            if (map != null)
+            {
+                // Go through all our map entities and loook for any NPCs, if we have one check to see if they have a matching tag.
+                foreach (var en in map.GetEntities())
+                {
+                    if (en.GetType() == typeof(Npc))
+                    {
+                        var npc = (Npc)en;
+                        if (npc.Base.Tags.Contains(condition.Tag))
+                        {
+                            return true;
+                        }
+                    }
+
+                }
+            }
+
+            return false;
+        }
+
         public static bool MeetsCondition(
             GenderIsCondition condition,
             Player player,
@@ -402,6 +496,16 @@ QuestBase questBase
             return player.MapId == condition.MapId;
         }
 
+        public static bool MeetsCondition(
+            MapHasTag condition,
+            Player player,
+            Event eventInstance,
+            QuestBase questBase
+        )
+        {
+            return player.Map.Tags.Contains(condition.Tag);
+        }
+
         public static bool MeetsCondition(
             IsItemEquippedCondition condition,
             Player player,
diff --git a/Intersect.Server/Intersect.Server.csproj b/Intersect.Server/Intersect.Server.csproj
index 1bbee3dc..6c5bfcda 100644
--- a/Intersect.Server/Intersect.Server.csproj
+++ b/Intersect.Server/Intersect.Server.csproj
@@ -480,6 +480,14 @@
     <Compile Include="Entities\Pathfinding\SpatialAStar.cs" />
     <Compile Include="Entities\Pathfinding\PathfinderTarget.cs" />
     <Compile Include="Entities\Pathfinding\PriorityQueue.cs" />
+    <Compile Include="Migrations\Game\20200423004850_AddingTagSystem.cs" />
+    <Compile Include="Migrations\Game\20200423004850_AddingTagSystem.designer.cs">
+      <DependentUpon>20200423004850_AddingTagSystem.cs</DependentUpon>
+    </Compile>
+    <Compile Include="Migrations\Game\20200424140012_MapTags.cs" />
+    <Compile Include="Migrations\Game\20200424140012_MapTags.designer.cs">
+      <DependentUpon>20200424140012_MapTags.cs</DependentUpon>
+    </Compile>
     <Compile Include="Networking\Client.cs" />
     <Compile Include="Entities\Npc.cs" />
     <Compile Include="Networking\Helpers\NetDebug.cs" />
diff --git a/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs
new file mode 100644
index 00000000..93b6cf81
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.Designer.cs
@@ -0,0 +1,1040 @@
+// <auto-generated />
+using System;
+using Intersect.Server.Database.GameData;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace Intersect.Server.Migrations.Game
+{
+    [DbContext(typeof(GameContext))]
+    [Migration("20200423004850_AddingTagSystem")]
+    partial class AddingTagSystem
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CompleteSound");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Animations");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<long>("BaseExp");
+
+                    b.Property<int>("BasePoints");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("ExpIncrease");
+
+                    b.Property<string>("ExpOverridesJson")
+                        .HasColumnName("ExperienceOverrides");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("IncreasePercentage");
+
+                    b.Property<string>("JsonBaseStats")
+                        .HasColumnName("BaseStats");
+
+                    b.Property<string>("JsonBaseVitals")
+                        .HasColumnName("BaseVitals");
+
+                    b.Property<string>("JsonItems")
+                        .HasColumnName("Items");
+
+                    b.Property<string>("JsonSpells")
+                        .HasColumnName("Spells");
+
+                    b.Property<string>("JsonSprites")
+                        .HasColumnName("Sprites");
+
+                    b.Property<bool>("Locked");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("PointIncrease");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SpawnDir");
+
+                    b.Property<Guid>("SpawnMapId")
+                        .HasColumnName("SpawnMap");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<string>("StatIncreaseJson")
+                        .HasColumnName("StatIncreases");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalIncreaseJson")
+                        .HasColumnName("VitalIncreases");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Classes");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("IngredientsJson")
+                        .HasColumnName("Ingredients");
+
+                    b.Property<Guid>("ItemId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Time");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Crafts");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Crafts");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("CraftingTables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CommonEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("Global");
+
+                    b.Property<Guid>("MapId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PagesJson")
+                        .HasColumnName("Pages");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Events");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<int>("Cooldown");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<string>("Description");
+
+                    b.Property<bool>("DestroySpell");
+
+                    b.Property<Guid>("EquipmentAnimationId")
+                        .HasColumnName("EquipmentAnimation");
+
+                    b.Property<int>("EquipmentSlot");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("FemalePaperdoll");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<int>("ItemType");
+
+                    b.Property<string>("JsonUsageRequirements")
+                        .HasColumnName("UsageRequirements");
+
+                    b.Property<string>("MalePaperdoll");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PercentageStatsJson")
+                        .HasColumnName("PercentageStatsGiven");
+
+                    b.Property<string>("PercentageVitalsJson")
+                        .HasColumnName("PercentageVitalsGiven");
+
+                    b.Property<int>("Price");
+
+                    b.Property<Guid>("ProjectileId")
+                        .HasColumnName("Projectile");
+
+                    b.Property<bool>("QuickCast");
+
+                    b.Property<int>("Rarity");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SlotCount");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<bool>("Stackable");
+
+                    b.Property<int>("StatGrowth");
+
+                    b.Property<string>("StatsJson")
+                        .HasColumnName("StatsGiven");
+
+                    b.Property<string>("Tag");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<bool>("TwoHanded");
+
+                    b.Property<string>("VitalsJson")
+                        .HasColumnName("VitalsGiven");
+
+                    b.Property<string>("VitalsRegenJson")
+                        .HasColumnName("VitalsRegen");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Items");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("JsonData")
+                        .HasColumnName("JsonData");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapFolders");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Aggressive");
+
+                    b.Property<bool>("AttackAllies");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<string>("AttackOnSightConditionsJson")
+                        .HasColumnName("AttackOnSightConditions");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Spells");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("Experience");
+
+                    b.Property<byte>("FleeHealthPercentage");
+
+                    b.Property<bool>("FocusHighestDamageDealer");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonAggroList")
+                        .HasColumnName("AggroList");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonMaxVital")
+                        .HasColumnName("MaxVital");
+
+                    b.Property<string>("JsonStat")
+                        .HasColumnName("Stats");
+
+                    b.Property<int>("Level");
+
+                    b.Property<byte>("Movement");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("NpcVsNpcEnabled");
+
+                    b.Property<Guid>("OnDeathEventId")
+                        .HasColumnName("OnDeathEvent");
+
+                    b.Property<Guid>("OnDeathPartyEventId")
+                        .HasColumnName("OnDeathPartyEvent");
+
+                    b.Property<string>("PlayerCanAttackConditionsJson")
+                        .HasColumnName("PlayerCanAttackConditions");
+
+                    b.Property<string>("PlayerFriendConditionsJson")
+                        .HasColumnName("PlayerFriendConditions");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SightRange");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<int>("SpellFrequency");
+
+                    b.Property<string>("Sprite");
+
+                    b.Property<bool>("Swarm");
+
+                    b.Property<string>("Tag");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Npcs");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("PlayerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AmmoItemId")
+                        .HasColumnName("Ammo");
+
+                    b.Property<int>("AmmoRequired");
+
+                    b.Property<string>("AnimationsJson")
+                        .HasColumnName("Animations");
+
+                    b.Property<int>("Delay");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("GrappleHook");
+
+                    b.Property<bool>("IgnoreActiveResources");
+
+                    b.Property<bool>("IgnoreExhaustedResources");
+
+                    b.Property<bool>("IgnoreMapBlocks");
+
+                    b.Property<bool>("IgnoreZDimension");
+
+                    b.Property<int>("Knockback");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("PierceTarget");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Range");
+
+                    b.Property<string>("SpawnsJson")
+                        .HasColumnName("SpawnLocations");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Projectiles");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("BeforeDescription");
+
+                    b.Property<string>("EndDescription");
+
+                    b.Property<Guid>("EndEventId")
+                        .HasColumnName("EndEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("InProgressDescription");
+
+                    b.Property<string>("JsonRequirements")
+                        .HasColumnName("Requirements");
+
+                    b.Property<bool>("LogAfterComplete");
+
+                    b.Property<bool>("LogBeforeOffer");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("Quitable");
+
+                    b.Property<bool>("Repeatable");
+
+                    b.Property<string>("StartDescription");
+
+                    b.Property<Guid>("StartEventId")
+                        .HasColumnName("StartEvent");
+
+                    b.Property<string>("TasksJson")
+                        .HasColumnName("Tasks");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Quests");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonHarvestingRequirements")
+                        .HasColumnName("HarvestingRequirements");
+
+                    b.Property<int>("MaxHp");
+
+                    b.Property<int>("MinHp");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<int>("VitalRegen");
+
+                    b.Property<bool>("WalkableAfter");
+
+                    b.Property<bool>("WalkableBefore");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Resources");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Json")
+                        .HasColumnName("Value");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("ServerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("BuyingWhitelist");
+
+                    b.Property<Guid>("DefaultCurrencyId")
+                        .HasColumnName("DefaultCurrency");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonBuyingItems")
+                        .HasColumnName("BuyingItems");
+
+                    b.Property<string>("JsonSellingItems")
+                        .HasColumnName("SellingItems");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shops");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<Guid>("CastAnimationId")
+                        .HasColumnName("CastAnimation");
+
+                    b.Property<int>("CastDuration");
+
+                    b.Property<int>("CooldownDuration");
+
+                    b.Property<string>("Description");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<Guid>("HitAnimationId")
+                        .HasColumnName("HitAnimation");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<string>("JsonCastRequirements")
+                        .HasColumnName("CastRequirements");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpellType");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalCostJson")
+                        .HasColumnName("VitalCost");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Spells");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Tilesets");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("DaylightHuesJson")
+                        .HasColumnName("DaylightHues");
+
+                    b.Property<int>("RangeInterval");
+
+                    b.Property<float>("Rate");
+
+                    b.Property<bool>("SyncTime");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Time");
+                });
+
+            modelBuilder.Entity("Intersect.Server.Maps.MapInstance", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<int>("AHue");
+
+                    b.Property<byte[]>("AttributeData")
+                        .HasColumnName("Attributes");
+
+                    b.Property<int>("BHue");
+
+                    b.Property<int>("Brightness");
+
+                    b.Property<Guid>("Down");
+
+                    b.Property<string>("EventIdsJson")
+                        .HasColumnName("Events");
+
+                    b.Property<string>("Fog");
+
+                    b.Property<int>("FogTransparency");
+
+                    b.Property<int>("FogXSpeed");
+
+                    b.Property<int>("FogYSpeed");
+
+                    b.Property<int>("GHue");
+
+                    b.Property<bool>("IsIndoors");
+
+                    b.Property<Guid>("Left");
+
+                    b.Property<string>("LightsJson")
+                        .HasColumnName("Lights");
+
+                    b.Property<string>("Music");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("NpcSpawnsJson")
+                        .HasColumnName("NpcSpawns");
+
+                    b.Property<string>("OverlayGraphic");
+
+                    b.Property<string>("Panorama");
+
+                    b.Property<string>("PlayerLightColorJson")
+                        .HasColumnName("PlayerLightColor");
+
+                    b.Property<float>("PlayerLightExpand");
+
+                    b.Property<byte>("PlayerLightIntensity");
+
+                    b.Property<int>("PlayerLightSize");
+
+                    b.Property<int>("RHue");
+
+                    b.Property<int>("Revision");
+
+                    b.Property<Guid>("Right");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<byte[]>("TileData");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<Guid>("Up");
+
+                    b.Property<Guid>("WeatherAnimationId")
+                        .HasColumnName("WeatherAnimation");
+
+                    b.Property<int>("WeatherIntensity");
+
+                    b.Property<int>("WeatherXSpeed");
+
+                    b.Property<int>("WeatherYSpeed");
+
+                    b.Property<int>("ZoneType");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Maps");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Lower")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Upper")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.Property<int>("Value");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Consumable")
+                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.EffectData", "Effect", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Effect")
+                                .HasForeignKey("Intersect.GameObjects.EffectData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Exhausted")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Initial")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("CastRange");
+
+                            b1.Property<int>("CritChance");
+
+                            b1.Property<double>("CritMultiplier");
+
+                            b1.Property<int>("DamageType");
+
+                            b1.Property<int>("Duration");
+
+                            b1.Property<int>("Effect");
+
+                            b1.Property<bool>("Friendly");
+
+                            b1.Property<int>("HitRadius");
+
+                            b1.Property<bool>("HoTDoT");
+
+                            b1.Property<int>("HotDotInterval");
+
+                            b1.Property<int>("OnHitDuration")
+                                .HasColumnName("OnHit");
+
+                            b1.Property<string>("PercentageStatDiffJson")
+                                .HasColumnName("PercentageStatDiff");
+
+                            b1.Property<Guid>("ProjectileId")
+                                .HasColumnName("Projectile");
+
+                            b1.Property<int>("Scaling");
+
+                            b1.Property<int>("ScalingStat");
+
+                            b1.Property<string>("StatDiffJson")
+                                .HasColumnName("StatDiff");
+
+                            b1.Property<int>("TargetType");
+
+                            b1.Property<string>("TransformSprite");
+
+                            b1.Property<int>("TrapDuration")
+                                .HasColumnName("Trap");
+
+                            b1.Property<string>("VitalDiffJson")
+                                .HasColumnName("VitalDiff");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Combat")
+                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<bool>("IgnoreActiveResources");
+
+                            b1.Property<bool>("IgnoreInactiveResources");
+
+                            b1.Property<bool>("IgnoreMapBlocks");
+
+                            b1.Property<bool>("IgnoreZDimensionAttributes");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Dash")
+                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("Dir");
+
+                            b1.Property<Guid>("MapId");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Warp")
+                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs
new file mode 100644
index 00000000..32d0d58c
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200423004850_AddingTagSystem.cs
@@ -0,0 +1,31 @@
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Intersect.Server.Migrations.Game
+{
+    public partial class AddingTagSystem : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<string>(
+                name: "Tag",
+                table: "Npcs",
+                nullable: true);
+
+            migrationBuilder.AddColumn<string>(
+                name: "Tag",
+                table: "Items",
+                nullable: true);
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "Tag",
+                table: "Npcs");
+
+            migrationBuilder.DropColumn(
+                name: "Tag",
+                table: "Items");
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs b/Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs
new file mode 100644
index 00000000..b9167146
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200424140012_MapTags.Designer.cs
@@ -0,0 +1,1045 @@
+// <auto-generated />
+using System;
+using Intersect.Server.Database.GameData;
+using Microsoft.EntityFrameworkCore;
+using Microsoft.EntityFrameworkCore.Infrastructure;
+using Microsoft.EntityFrameworkCore.Migrations;
+using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
+
+namespace Intersect.Server.Migrations.Game
+{
+    [DbContext(typeof(GameContext))]
+    [Migration("20200424140012_MapTags")]
+    partial class MapTags
+    {
+        protected override void BuildTargetModel(ModelBuilder modelBuilder)
+        {
+#pragma warning disable 612, 618
+            modelBuilder
+                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065");
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CompleteSound");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Animations");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ClassBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<long>("BaseExp");
+
+                    b.Property<int>("BasePoints");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("ExpIncrease");
+
+                    b.Property<string>("ExpOverridesJson")
+                        .HasColumnName("ExperienceOverrides");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("IncreasePercentage");
+
+                    b.Property<string>("JsonBaseStats")
+                        .HasColumnName("BaseStats");
+
+                    b.Property<string>("JsonBaseVitals")
+                        .HasColumnName("BaseVitals");
+
+                    b.Property<string>("JsonItems")
+                        .HasColumnName("Items");
+
+                    b.Property<string>("JsonSpells")
+                        .HasColumnName("Spells");
+
+                    b.Property<string>("JsonSprites")
+                        .HasColumnName("Sprites");
+
+                    b.Property<bool>("Locked");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("PointIncrease");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SpawnDir");
+
+                    b.Property<Guid>("SpawnMapId")
+                        .HasColumnName("SpawnMap");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<string>("StatIncreaseJson")
+                        .HasColumnName("StatIncreases");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalIncreaseJson")
+                        .HasColumnName("VitalIncreases");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Classes");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Crafting.CraftBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("IngredientsJson")
+                        .HasColumnName("Ingredients");
+
+                    b.Property<Guid>("ItemId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Time");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Crafts");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.CraftingTableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Crafts");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("CraftingTables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Events.EventBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("CommonEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("Global");
+
+                    b.Property<Guid>("MapId");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PagesJson")
+                        .HasColumnName("Pages");
+
+                    b.Property<int>("SpawnX");
+
+                    b.Property<int>("SpawnY");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Events");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<int>("Cooldown");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<string>("Description");
+
+                    b.Property<bool>("DestroySpell");
+
+                    b.Property<Guid>("EquipmentAnimationId")
+                        .HasColumnName("EquipmentAnimation");
+
+                    b.Property<int>("EquipmentSlot");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("FemalePaperdoll");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<int>("ItemType");
+
+                    b.Property<string>("JsonTags")
+                        .HasColumnName("Tag");
+
+                    b.Property<string>("JsonUsageRequirements")
+                        .HasColumnName("UsageRequirements");
+
+                    b.Property<string>("MalePaperdoll");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("PercentageStatsJson")
+                        .HasColumnName("PercentageStatsGiven");
+
+                    b.Property<string>("PercentageVitalsJson")
+                        .HasColumnName("PercentageVitalsGiven");
+
+                    b.Property<int>("Price");
+
+                    b.Property<Guid>("ProjectileId")
+                        .HasColumnName("Projectile");
+
+                    b.Property<bool>("QuickCast");
+
+                    b.Property<int>("Rarity");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SlotCount");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<bool>("Stackable");
+
+                    b.Property<int>("StatGrowth");
+
+                    b.Property<string>("StatsJson")
+                        .HasColumnName("StatsGiven");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<bool>("TwoHanded");
+
+                    b.Property<string>("VitalsJson")
+                        .HasColumnName("VitalsGiven");
+
+                    b.Property<string>("VitalsRegenJson")
+                        .HasColumnName("VitalsRegen");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Items");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.Maps.MapList.MapList", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("JsonData")
+                        .HasColumnName("JsonData");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("MapFolders");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.NpcBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Aggressive");
+
+                    b.Property<bool>("AttackAllies");
+
+                    b.Property<Guid>("AttackAnimationId")
+                        .HasColumnName("AttackAnimation");
+
+                    b.Property<string>("AttackOnSightConditionsJson")
+                        .HasColumnName("AttackOnSightConditions");
+
+                    b.Property<int>("AttackSpeedModifier");
+
+                    b.Property<int>("AttackSpeedValue");
+
+                    b.Property<string>("CraftsJson")
+                        .HasColumnName("Spells");
+
+                    b.Property<int>("CritChance");
+
+                    b.Property<double>("CritMultiplier");
+
+                    b.Property<int>("Damage");
+
+                    b.Property<int>("DamageType");
+
+                    b.Property<long>("Experience");
+
+                    b.Property<byte>("FleeHealthPercentage");
+
+                    b.Property<bool>("FocusHighestDamageDealer");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonAggroList")
+                        .HasColumnName("AggroList");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonMaxVital")
+                        .HasColumnName("MaxVital");
+
+                    b.Property<string>("JsonStat")
+                        .HasColumnName("Stats");
+
+                    b.Property<string>("JsonTags")
+                        .HasColumnName("Tag");
+
+                    b.Property<int>("Level");
+
+                    b.Property<byte>("Movement");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("NpcVsNpcEnabled");
+
+                    b.Property<Guid>("OnDeathEventId")
+                        .HasColumnName("OnDeathEvent");
+
+                    b.Property<Guid>("OnDeathPartyEventId")
+                        .HasColumnName("OnDeathPartyEvent");
+
+                    b.Property<string>("PlayerCanAttackConditionsJson")
+                        .HasColumnName("PlayerCanAttackConditions");
+
+                    b.Property<string>("PlayerFriendConditionsJson")
+                        .HasColumnName("PlayerFriendConditions");
+
+                    b.Property<string>("RegenJson")
+                        .HasColumnName("VitalRegen");
+
+                    b.Property<int>("Scaling");
+
+                    b.Property<int>("ScalingStat");
+
+                    b.Property<int>("SightRange");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<int>("SpellFrequency");
+
+                    b.Property<string>("Sprite");
+
+                    b.Property<bool>("Swarm");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Npcs");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.PlayerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("PlayerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ProjectileBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AmmoItemId")
+                        .HasColumnName("Ammo");
+
+                    b.Property<int>("AmmoRequired");
+
+                    b.Property<string>("AnimationsJson")
+                        .HasColumnName("Animations");
+
+                    b.Property<int>("Delay");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<bool>("GrappleHook");
+
+                    b.Property<bool>("IgnoreActiveResources");
+
+                    b.Property<bool>("IgnoreExhaustedResources");
+
+                    b.Property<bool>("IgnoreMapBlocks");
+
+                    b.Property<bool>("IgnoreZDimension");
+
+                    b.Property<int>("Knockback");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("PierceTarget");
+
+                    b.Property<int>("Quantity");
+
+                    b.Property<int>("Range");
+
+                    b.Property<string>("SpawnsJson")
+                        .HasColumnName("SpawnLocations");
+
+                    b.Property<int>("Speed");
+
+                    b.Property<Guid>("SpellId")
+                        .HasColumnName("Spell");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Projectiles");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.QuestBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("BeforeDescription");
+
+                    b.Property<string>("EndDescription");
+
+                    b.Property<Guid>("EndEventId")
+                        .HasColumnName("EndEvent");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("InProgressDescription");
+
+                    b.Property<string>("JsonRequirements")
+                        .HasColumnName("Requirements");
+
+                    b.Property<bool>("LogAfterComplete");
+
+                    b.Property<bool>("LogBeforeOffer");
+
+                    b.Property<string>("Name");
+
+                    b.Property<bool>("Quitable");
+
+                    b.Property<bool>("Repeatable");
+
+                    b.Property<string>("StartDescription");
+
+                    b.Property<Guid>("StartEventId")
+                        .HasColumnName("StartEvent");
+
+                    b.Property<string>("TasksJson")
+                        .HasColumnName("Tasks");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Quests");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<Guid>("AnimationId")
+                        .HasColumnName("Animation");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonDrops")
+                        .HasColumnName("Drops");
+
+                    b.Property<string>("JsonHarvestingRequirements")
+                        .HasColumnName("HarvestingRequirements");
+
+                    b.Property<int>("MaxHp");
+
+                    b.Property<int>("MinHp");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpawnDuration");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<int>("Tool");
+
+                    b.Property<int>("VitalRegen");
+
+                    b.Property<bool>("WalkableAfter");
+
+                    b.Property<bool>("WalkableBefore");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Resources");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ServerVariableBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("Json")
+                        .HasColumnName("Value");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("TextId");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<byte>("Type");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("ServerVariables");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ShopBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("BuyingWhitelist");
+
+                    b.Property<Guid>("DefaultCurrencyId")
+                        .HasColumnName("DefaultCurrency");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<string>("JsonBuyingItems")
+                        .HasColumnName("BuyingItems");
+
+                    b.Property<string>("JsonSellingItems")
+                        .HasColumnName("SellingItems");
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Shops");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<bool>("Bound");
+
+                    b.Property<Guid>("CastAnimationId")
+                        .HasColumnName("CastAnimation");
+
+                    b.Property<int>("CastDuration");
+
+                    b.Property<int>("CooldownDuration");
+
+                    b.Property<string>("Description");
+
+                    b.Property<Guid>("EventId")
+                        .HasColumnName("Event");
+
+                    b.Property<string>("Folder");
+
+                    b.Property<Guid>("HitAnimationId")
+                        .HasColumnName("HitAnimation");
+
+                    b.Property<string>("Icon");
+
+                    b.Property<string>("JsonCastRequirements")
+                        .HasColumnName("CastRequirements");
+
+                    b.Property<string>("Name");
+
+                    b.Property<int>("SpellType");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<string>("VitalCostJson")
+                        .HasColumnName("VitalCost");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Spells");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TilesetBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("Name");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Tilesets");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.TimeBase", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<string>("DaylightHuesJson")
+                        .HasColumnName("DaylightHues");
+
+                    b.Property<int>("RangeInterval");
+
+                    b.Property<float>("Rate");
+
+                    b.Property<bool>("SyncTime");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Time");
+                });
+
+            modelBuilder.Entity("Intersect.Server.Maps.MapInstance", b =>
+                {
+                    b.Property<Guid>("Id")
+                        .ValueGeneratedOnAdd();
+
+                    b.Property<int>("AHue");
+
+                    b.Property<byte[]>("AttributeData")
+                        .HasColumnName("Attributes");
+
+                    b.Property<int>("BHue");
+
+                    b.Property<int>("Brightness");
+
+                    b.Property<Guid>("Down");
+
+                    b.Property<string>("EventIdsJson")
+                        .HasColumnName("Events");
+
+                    b.Property<string>("Fog");
+
+                    b.Property<int>("FogTransparency");
+
+                    b.Property<int>("FogXSpeed");
+
+                    b.Property<int>("FogYSpeed");
+
+                    b.Property<int>("GHue");
+
+                    b.Property<bool>("IsIndoors");
+
+                    b.Property<string>("JsonTags")
+                        .HasColumnName("Tag");
+
+                    b.Property<Guid>("Left");
+
+                    b.Property<string>("LightsJson")
+                        .HasColumnName("Lights");
+
+                    b.Property<string>("Music");
+
+                    b.Property<string>("Name");
+
+                    b.Property<string>("NpcSpawnsJson")
+                        .HasColumnName("NpcSpawns");
+
+                    b.Property<string>("OverlayGraphic");
+
+                    b.Property<string>("Panorama");
+
+                    b.Property<string>("PlayerLightColorJson")
+                        .HasColumnName("PlayerLightColor");
+
+                    b.Property<float>("PlayerLightExpand");
+
+                    b.Property<byte>("PlayerLightIntensity");
+
+                    b.Property<int>("PlayerLightSize");
+
+                    b.Property<int>("RHue");
+
+                    b.Property<int>("Revision");
+
+                    b.Property<Guid>("Right");
+
+                    b.Property<string>("Sound");
+
+                    b.Property<byte[]>("TileData");
+
+                    b.Property<long>("TimeCreated");
+
+                    b.Property<Guid>("Up");
+
+                    b.Property<Guid>("WeatherAnimationId")
+                        .HasColumnName("WeatherAnimation");
+
+                    b.Property<int>("WeatherIntensity");
+
+                    b.Property<int>("WeatherXSpeed");
+
+                    b.Property<int>("WeatherYSpeed");
+
+                    b.Property<int>("ZoneType");
+
+                    b.HasKey("Id");
+
+                    b.ToTable("Maps");
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.AnimationBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Lower", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Lower")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.AnimationLayer", "Upper", b1 =>
+                        {
+                            b1.Property<Guid>("AnimationBaseId");
+
+                            b1.Property<bool>("AlternateRenderLayer");
+
+                            b1.Property<bool>("DisableRotations");
+
+                            b1.Property<int>("FrameCount");
+
+                            b1.Property<int>("FrameSpeed");
+
+                            b1.Property<string>("Light");
+
+                            b1.Property<int>("LoopCount");
+
+                            b1.Property<string>("Sprite");
+
+                            b1.Property<int>("XFrames");
+
+                            b1.Property<int>("YFrames");
+
+                            b1.ToTable("Animations");
+
+                            b1.HasOne("Intersect.GameObjects.AnimationBase")
+                                .WithOne("Upper")
+                                .HasForeignKey("Intersect.GameObjects.AnimationLayer", "AnimationBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ItemBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ConsumableData", "Consumable", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.Property<int>("Value");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Consumable")
+                                .HasForeignKey("Intersect.GameObjects.ConsumableData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.EffectData", "Effect", b1 =>
+                        {
+                            b1.Property<Guid>("ItemBaseId");
+
+                            b1.Property<int>("Percentage");
+
+                            b1.Property<byte>("Type");
+
+                            b1.ToTable("Items");
+
+                            b1.HasOne("Intersect.GameObjects.ItemBase")
+                                .WithOne("Effect")
+                                .HasForeignKey("Intersect.GameObjects.EffectData", "ItemBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.ResourceBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Exhausted", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Exhausted")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.ResourceState", "Initial", b1 =>
+                        {
+                            b1.Property<Guid>("ResourceBaseId");
+
+                            b1.Property<string>("Graphic");
+
+                            b1.Property<bool>("GraphicFromTileset");
+
+                            b1.Property<int>("Height");
+
+                            b1.Property<bool>("RenderBelowEntities");
+
+                            b1.Property<int>("Width");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Resources");
+
+                            b1.HasOne("Intersect.GameObjects.ResourceBase")
+                                .WithOne("Initial")
+                                .HasForeignKey("Intersect.GameObjects.ResourceState", "ResourceBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+
+            modelBuilder.Entity("Intersect.GameObjects.SpellBase", b =>
+                {
+                    b.OwnsOne("Intersect.GameObjects.SpellCombatData", "Combat", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("CastRange");
+
+                            b1.Property<int>("CritChance");
+
+                            b1.Property<double>("CritMultiplier");
+
+                            b1.Property<int>("DamageType");
+
+                            b1.Property<int>("Duration");
+
+                            b1.Property<int>("Effect");
+
+                            b1.Property<bool>("Friendly");
+
+                            b1.Property<int>("HitRadius");
+
+                            b1.Property<bool>("HoTDoT");
+
+                            b1.Property<int>("HotDotInterval");
+
+                            b1.Property<int>("OnHitDuration")
+                                .HasColumnName("OnHit");
+
+                            b1.Property<string>("PercentageStatDiffJson")
+                                .HasColumnName("PercentageStatDiff");
+
+                            b1.Property<Guid>("ProjectileId")
+                                .HasColumnName("Projectile");
+
+                            b1.Property<int>("Scaling");
+
+                            b1.Property<int>("ScalingStat");
+
+                            b1.Property<string>("StatDiffJson")
+                                .HasColumnName("StatDiff");
+
+                            b1.Property<int>("TargetType");
+
+                            b1.Property<string>("TransformSprite");
+
+                            b1.Property<int>("TrapDuration")
+                                .HasColumnName("Trap");
+
+                            b1.Property<string>("VitalDiffJson")
+                                .HasColumnName("VitalDiff");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Combat")
+                                .HasForeignKey("Intersect.GameObjects.SpellCombatData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellDashOpts", "Dash", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<bool>("IgnoreActiveResources");
+
+                            b1.Property<bool>("IgnoreInactiveResources");
+
+                            b1.Property<bool>("IgnoreMapBlocks");
+
+                            b1.Property<bool>("IgnoreZDimensionAttributes");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Dash")
+                                .HasForeignKey("Intersect.GameObjects.SpellDashOpts", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+
+                    b.OwnsOne("Intersect.GameObjects.SpellWarpData", "Warp", b1 =>
+                        {
+                            b1.Property<Guid>("SpellBaseId");
+
+                            b1.Property<int>("Dir");
+
+                            b1.Property<Guid>("MapId");
+
+                            b1.Property<int>("X");
+
+                            b1.Property<int>("Y");
+
+                            b1.ToTable("Spells");
+
+                            b1.HasOne("Intersect.GameObjects.SpellBase")
+                                .WithOne("Warp")
+                                .HasForeignKey("Intersect.GameObjects.SpellWarpData", "SpellBaseId")
+                                .OnDelete(DeleteBehavior.Cascade);
+                        });
+                });
+#pragma warning restore 612, 618
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/20200424140012_MapTags.cs b/Intersect.Server/Migrations/Game/20200424140012_MapTags.cs
new file mode 100644
index 00000000..273d3818
--- /dev/null
+++ b/Intersect.Server/Migrations/Game/20200424140012_MapTags.cs
@@ -0,0 +1,22 @@
+using Microsoft.EntityFrameworkCore.Migrations;
+
+namespace Intersect.Server.Migrations.Game
+{
+    public partial class MapTags : Migration
+    {
+        protected override void Up(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.AddColumn<string>(
+                name: "Tag",
+                table: "Maps",
+                nullable: true);
+        }
+
+        protected override void Down(MigrationBuilder migrationBuilder)
+        {
+            migrationBuilder.DropColumn(
+                name: "Tag",
+                table: "Maps");
+        }
+    }
+}
diff --git a/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs b/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
index fbfd65a8..5a4b8cb5 100644
--- a/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
+++ b/Intersect.Server/Migrations/Game/GameContextModelSnapshot.cs
@@ -239,6 +239,9 @@ protected override void BuildModel(ModelBuilder modelBuilder)
 
                     b.Property<int>("ItemType");
 
+                    b.Property<string>("JsonTags")
+                        .HasColumnName("Tag");
+
                     b.Property<string>("JsonUsageRequirements")
                         .HasColumnName("UsageRequirements");
 
@@ -359,6 +362,9 @@ protected override void BuildModel(ModelBuilder modelBuilder)
                     b.Property<string>("JsonStat")
                         .HasColumnName("Stats");
 
+                    b.Property<string>("JsonTags")
+                        .HasColumnName("Tag");
+
                     b.Property<int>("Level");
 
                     b.Property<byte>("Movement");
@@ -718,6 +724,9 @@ protected override void BuildModel(ModelBuilder modelBuilder)
 
                     b.Property<bool>("IsIndoors");
 
+                    b.Property<string>("JsonTags")
+                        .HasColumnName("Tag");
+
                     b.Property<Guid>("Left");
 
                     b.Property<string>("LightsJson")
